package com.love2loveapp

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.ui.Modifier
import com.love2loveapp.views.ContentView

/**
 * MainActivity principale de Love2Love
 * Point d'entr√©e de l'application Android
 */
class MainActivity : ComponentActivity() {
    
    companion object {
        private const val TAG = "MainActivity"
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        try {
            Log.d(TAG, "üöÄ DEBUT onCreate MainActivity")
            Log.d(TAG, "üì± Process: ${android.os.Process.myPid()}")
            Log.d(TAG, "üîå Thread: ${Thread.currentThread().name}")
            Log.d(TAG, "üì¶ Package: ${packageName}")
            Log.d(TAG, "üÜî Task ID: ${taskId}")
            
            // üõ°Ô∏è Protection contre les crashes Compose hover (bug connu)
            Thread.setDefaultUncaughtExceptionHandler { thread, exception ->
                when {
                    exception.message?.contains("ACTION_HOVER_EXIT event was not cleared") == true -> {
                        Log.w(TAG, "üõ°Ô∏è Crash Compose hover intercept√© et ignor√©")
                        // Ne pas crash l'app pour ce bug connu de Compose
                        return@setDefaultUncaughtExceptionHandler
                    }
                    exception is IllegalStateException && 
                    exception.stackTrace.any { it.className.contains("AndroidComposeView") } -> {
                        Log.w(TAG, "üõ°Ô∏è Crash AndroidComposeView intercept√©: ${exception.message}")
                        return@setDefaultUncaughtExceptionHandler
                    }
                    else -> {
                        // Pour les autres erreurs, comportement normal
                        Log.e(TAG, "üí• Exception non intercept√©e", exception)
                        android.os.Process.killProcess(android.os.Process.myPid())
                    }
                }
            }
            
            // V√©rifier que AppDelegate est pr√™t
            val app = application as? AppDelegate
            if (app != null) {
                Log.d(TAG, "‚úÖ AppDelegate trouv√©")
                Log.d(TAG, "üîç AppDelegate ready: ${app.isAppReady()}")
            } else {
                Log.e(TAG, "‚ùå AppDelegate pas trouv√© ou mauvais type!")
            }
            
            Log.d(TAG, "üìû Appel super.onCreate...")
            super.onCreate(savedInstanceState)
            Log.d(TAG, "‚úÖ super.onCreate termin√©")
            
            Log.d(TAG, "üé® Configuration du contenu Compose...")
            setContent {
                Log.d(TAG, "üñºÔ∏è Dans setContent block")
                MaterialTheme {
                    Surface(
                        modifier = Modifier.fillMaxSize(),
                        color = MaterialTheme.colorScheme.background
                    ) {
                        Log.d(TAG, "üì± Chargement ContentView...")
                        ContentView()
                    }
                }
            }
            Log.d(TAG, "‚úÖ setContent configur√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå CRASH DANS onCreate MainActivity", e)
            Log.e(TAG, "‚ùå Exception: ${e.javaClass.simpleName}")
            Log.e(TAG, "‚ùå Message: ${e.message}")
            Log.e(TAG, "‚ùå Cause: ${e.cause}")
            e.printStackTrace()
            throw e // Re-throw pour que le syst√®me puisse g√©rer
        } finally {
            Log.d(TAG, "üèÅ FIN onCreate MainActivity")
        }
    }
    
    override fun onStart() {
        try {
            Log.d(TAG, "üé¨ DEBUT onStart")
            super.onStart()
            Log.d(TAG, "‚úÖ FIN onStart")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå CRASH DANS onStart", e)
            throw e
        }
    }
    
    override fun onResume() {
        try {
            Log.d(TAG, "‚ñ∂Ô∏è DEBUT onResume")
            super.onResume()
            Log.d(TAG, "‚úÖ FIN onResume")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå CRASH DANS onResume", e)
            throw e
        }
    }
    
    override fun onPause() {
        try {
            Log.d(TAG, "‚è∏Ô∏è DEBUT onPause")
            super.onPause()
            Log.d(TAG, "‚úÖ FIN onPause")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå CRASH DANS onPause", e)
            throw e
        }
    }
    
    override fun onStop() {
        try {
            Log.d(TAG, "‚èπÔ∏è DEBUT onStop")
            super.onStop()
            Log.d(TAG, "‚úÖ FIN onStop")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå CRASH DANS onStop", e)
            throw e
        }
    }
    
    override fun onDestroy() {
        try {
            Log.d(TAG, "üíÄ DEBUT onDestroy")
            super.onDestroy()
            Log.d(TAG, "‚úÖ FIN onDestroy")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå CRASH DANS onDestroy", e)
            throw e
        }
    }
}
