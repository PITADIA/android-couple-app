package com.love2loveapp.widgets

import android.content.Context
import android.util.Log
import androidx.work.*
import com.love2loveapp.services.widgets.WidgetRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.concurrent.TimeUnit

/**
 * ‚è∞ WidgetUpdateService - Service mise √† jour p√©riodique widgets
 * 
 * √âquivalent Android des Timeline iOS WidgetKit :
 * - WorkManager pour mise √† jour p√©riodique
 * - Gestion intelligente fr√©quence updates
 * - √âconomie batterie avec contraintes
 * - Synchronisation donn√©es app
 */
class WidgetUpdateService : CoroutineWorker {
    
    constructor(context: Context, params: WorkerParameters) : super(context, params)
    
    companion object {
        private const val TAG = "WidgetUpdateService"
        private const val WORK_NAME = "widget_periodic_update"
        
        // Fr√©quences mise √† jour (minutes)
        private const val UPDATE_INTERVAL_MINUTES = 30L      // Mise √† jour normale
        private const val UPDATE_INTERVAL_FAST_MINUTES = 15L // Mise √† jour rapide si donn√©es importantes
        
        /**
         * üöÄ D√©marrer mises √† jour p√©riodiques
         * 
         * Appel√© quand premier widget est ajout√©
         */
        fun startPeriodicUpdates(context: Context) {
            Log.d(TAG, "üöÄ D√©marrage mises √† jour p√©riodiques widgets")
            
            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)  // WiFi ou donn√©es
                .setRequiresBatteryNotLow(true)                 // Batterie pas faible
                .build()
            
            val periodicWorkRequest = PeriodicWorkRequestBuilder<WidgetUpdateService>(
                UPDATE_INTERVAL_MINUTES, TimeUnit.MINUTES
            )
                .setConstraints(constraints)
                .setBackoffCriteria(
                    BackoffPolicy.EXPONENTIAL,
                    WorkRequest.MIN_BACKOFF_MILLIS,
                    TimeUnit.MILLISECONDS
                )
                .addTag("widget_update")
                .build()
            
            WorkManager.getInstance(context)
                .enqueueUniquePeriodicWork(
                    WORK_NAME,
                    ExistingPeriodicWorkPolicy.KEEP,  // Garder travail existant
                    periodicWorkRequest
                )
            
            Log.d(TAG, "‚úÖ Travail p√©riodique widget configur√© (${UPDATE_INTERVAL_MINUTES}min)")
        }
        
        /**
         * ‚èπÔ∏è Arr√™ter mises √† jour p√©riodiques
         * 
         * Appel√© quand dernier widget est supprim√©
         */
        fun stopPeriodicUpdates(context: Context) {
            Log.d(TAG, "‚èπÔ∏è Arr√™t mises √† jour p√©riodiques widgets")
            
            WorkManager.getInstance(context)
                .cancelUniqueWork(WORK_NAME)
            
            Log.d(TAG, "‚úÖ Travail p√©riodique widget annul√©")
        }
        
        /**
         * üîÑ Forcer mise √† jour imm√©diate
         * 
         * Utilitaire pour mise √† jour on-demand
         */
        fun forceUpdate(context: Context) {
            Log.d(TAG, "üîÑ Force mise √† jour imm√©diate widgets")
            
            val immediateWorkRequest = OneTimeWorkRequestBuilder<WidgetUpdateService>()
                .setExpedited(OutOfQuotaPolicy.RUN_AS_NON_EXPEDITED_WORK_REQUEST)
                .addTag("widget_force_update")
                .build()
            
            WorkManager.getInstance(context)
                .enqueue(immediateWorkRequest)
        }
    }
    
    /**
     * üîÑ Ex√©cution travail mise √† jour
     * 
     * M√©thode principale appel√©e p√©riodiquement
     */
    override suspend fun doWork(): Result {
        return try {
            Log.d(TAG, "üîÑ D√©but travail mise √† jour widgets")
            
            // üìä V√©rifier si mise √† jour n√©cessaire
            val widgetRepository = WidgetRepository.getInstance(applicationContext)
            val currentData = widgetRepository.getCurrentWidgetData()
            
            Log.d(TAG, "üìä Donn√©es actuelles: age=${getDataAgeMinutes(currentData)}min")
            
            // Mise √† jour seulement si donn√©es p√©rim√©es
            if (currentData.needsUpdate(maxAgeMinutes = UPDATE_INTERVAL_MINUTES.toInt())) {
                Log.d(TAG, "üîÑ Donn√©es p√©rim√©es, rafra√Æchissement...")
                
                val refreshResult = widgetRepository.refreshWidgetData(forceUpdate = true)
                
                if (refreshResult.isSuccess) {
                    Log.d(TAG, "‚úÖ Rafra√Æchissement widgets r√©ussi")
                    
                    // Notifier widgets de la mise √† jour
                    HomeScreenWidgetProvider.updateAllWidgets(applicationContext)
                    DistanceWidgetProvider.updateAllWidgets(applicationContext)
                    
                    // D√©cider fr√©quence prochaine mise √† jour
                    scheduleNextUpdate(applicationContext, currentData)
                    
                    Result.success()
                } else {
                    Log.w(TAG, "‚ö†Ô∏è √âchec rafra√Æchissement, retry plus tard")
                    Result.retry()
                }
            } else {
                Log.d(TAG, "‚úÖ Donn√©es encore fra√Æches, pas de mise √† jour n√©cessaire")
                Result.success()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur travail mise √† jour widgets: ${e.message}", e)
            Result.failure()
        }
    }
    
    /**
     * ‚è∞ Planifier prochaine mise √† jour selon contexte
     */
    private fun scheduleNextUpdate(context: Context, data: com.love2loveapp.models.widgets.WidgetData) {
        
        // D√©terminer fr√©quence selon importance donn√©es
        val intervalMinutes = when {
            // Plus fr√©quent si anniversaire proche
            data.relationshipStats?.daysUntilNextAnniversary ?: Int.MAX_VALUE <= 1 -> UPDATE_INTERVAL_FAST_MINUTES
            
            // Plus fr√©quent si partenaire tr√®s proche g√©ographiquement
            data.distanceInfo?.isVeryClose == true -> UPDATE_INTERVAL_FAST_MINUTES
            
            // Fr√©quence normale sinon
            else -> UPDATE_INTERVAL_MINUTES
        }
        
        if (intervalMinutes != UPDATE_INTERVAL_MINUTES) {
            Log.d(TAG, "‚è∞ Fr√©quence adapt√©e: ${intervalMinutes}min (contexte important)")
            
            // Reprogrammer avec nouvelle fr√©quence
            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .setRequiresBatteryNotLow(true)
                .build()
            
            val newPeriodicWork = PeriodicWorkRequestBuilder<WidgetUpdateService>(
                intervalMinutes, TimeUnit.MINUTES
            )
                .setConstraints(constraints)
                .addTag("widget_update_adaptive")
                .build()
            
            WorkManager.getInstance(context)
                .enqueueUniquePeriodicWork(
                    "${WORK_NAME}_adaptive",
                    ExistingPeriodicWorkPolicy.REPLACE,
                    newPeriodicWork
                )
        }
    }
    
    /**
     * üìä Calculer √¢ge donn√©es en minutes
     */
    private fun getDataAgeMinutes(data: com.love2loveapp.models.widgets.WidgetData): Long {
        val now = System.currentTimeMillis()
        val dataTime = data.lastUpdated.time
        return (now - dataTime) / (1000 * 60)
    }
    
    /**
     * üîç D√©tecter si donn√©es importantes ont chang√©
     * 
     * Optimisation pour √©viter mises √† jour inutiles
     */
    private fun hasSignificantDataChanges(
        oldData: com.love2loveapp.models.widgets.WidgetData,
        newData: com.love2loveapp.models.widgets.WidgetData
    ): Boolean {
        return oldData.relationshipStats?.daysTotal != newData.relationshipStats?.daysTotal ||
                oldData.distanceInfo?.formattedDistance != newData.distanceInfo?.formattedDistance ||
                oldData.hasSubscription != newData.hasSubscription ||
                oldData.hasPartner != newData.hasPartner
    }
    
    /**
     * üìà Analytics travail widget
     */
    private fun logWorkAnalytics(success: Boolean, duration: Long) {
        Log.d(TAG, "üìà Widget work: success=$success, duration=${duration}ms")
        
        // TODO: Envoyer √† Firebase Analytics si n√©cessaire
        // val analytics = FirebaseAnalytics.getInstance(applicationContext)
        // analytics.logEvent("widget_update_work", Bundle().apply {
        //     putBoolean("success", success)
        //     putLong("duration_ms", duration)
        // })
    }
}
