package com.love2loveapp.views.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Person
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.love2loveapp.services.cache.UserCacheManager
import android.util.Log

private const val TAG = "PartnerProfileImage"

/**
 * üë• PartnerProfileImage - Photo de profil partenaire avec logique diff√©rentielle
 * 
 * Comportements iOS √©quivalents:
 * - hasPartner = true : Cache ‚Üí Firebase ‚Üí Initiales ‚Üí Point d'interrogation
 * - hasPartner = false : Petit bonhomme blanc + invitation (non cliquable)
 * - Surbrillance diff√©rentielle : 35% si partenaire, 20% sinon
 * - Bordure : 3dp si partenaire, 2dp sinon
 * - onClick uniquement si pas de partenaire connect√©
 */
@Composable
fun PartnerProfileImage(
    hasPartner: Boolean,
    imageURL: String?,
    partnerName: String,
    size: Dp,
    onClick: (() -> Unit)?,
    userCacheManager: UserCacheManager?,
    modifier: Modifier = Modifier
) {
    // üîç LOGS DE TRACE pour debugging
    LaunchedEffect(hasPartner, imageURL, partnerName) {
        Log.d(TAG, "üñºÔ∏è PartnerProfileImage - √âTAT:")
        Log.d(TAG, "   - hasPartner: $hasPartner")
        Log.d(TAG, "   - partnerName: '$partnerName'")
        Log.d(TAG, "   - imageURL: ${imageURL?.let { "${it.take(50)}${if (it.length > 50) "..." else ""}" } ?: "null"}")
        Log.d(TAG, "   - userCacheManager: ${if (userCacheManager != null) "‚úÖ Pr√©sent" else "‚ùå Null"}")
    }
    val clickableModifier = if (onClick != null && !hasPartner) {
        modifier.clickable { onClick() }
    } else {
        modifier
    }
    
    Box(
        modifier = clickableModifier.size(size + 12.dp),
        contentAlignment = Alignment.Center
    ) {
        // Effet surbrillance diff√©rentiel
        Box(
            modifier = Modifier
                .size(size + 12.dp)
                .clip(CircleShape)
                .background(
                    Color.White.copy(alpha = if (hasPartner) 0.35f else 0.2f)
                )
                .blur(radius = 6.dp)
        )
        
        if (hasPartner) {
            // PARTENAIRE CONNECT√â
            
            // PRIORIT√â 1: Cache partenaire
            val cachedPartnerImage = userCacheManager?.getCachedPartnerImage()
            Log.d(TAG, "üñºÔ∏è PRIORIT√â 1 - Cache: ${if (cachedPartnerImage != null) "‚úÖ IMAGE EN CACHE TROUV√âE" else "‚ùå PAS D'IMAGE EN CACHE"}")
            
            if (cachedPartnerImage != null) {
                Log.d(TAG, "‚úÖ AFFICHAGE: Image depuis cache")
                Image(
                    bitmap = cachedPartnerImage.asImageBitmap(),
                    contentDescription = "Photo partenaire",
                    modifier = Modifier
                        .size(size)
                        .clip(CircleShape),
                    contentScale = ContentScale.Crop
                )
                
                // V√©rifier changement URL en arri√®re-plan
                LaunchedEffect(imageURL) {
                    if (imageURL != null && userCacheManager?.hasPartnerImageChanged(imageURL) == true) {
                        Log.d(TAG, "üîÑ URL partenaire a chang√©, besoin de recharger")
                        // TODO: T√©l√©charger nouvelle image si changement d√©tect√©
                        // downloadAndCachePartnerImage(imageURL, userCacheManager)
                    }
                }
            }
            // PRIORIT√â 2: URL Firebase partenaire (TODO: Int√©grer Coil AsyncImage)
            else if (!imageURL.isNullOrEmpty()) {
                Log.d(TAG, "üñºÔ∏è PRIORIT√â 2 - URL Firebase pr√©sente, mais pas Coil ‚Üí affichage initiales")
                // Pour l'instant, on utilise les initiales en attendant Coil
                if (partnerName.isNotEmpty()) {
                    UserInitialsView(name = partnerName, size = size)
                } else {
                    QuestionMarkView(size = size)
                }
            }
            // PRIORIT√â 3: Initiales partenaire
            else if (partnerName.isNotEmpty()) {
                Log.d(TAG, "üñºÔ∏è PRIORIT√â 3 - Affichage initiales: '$partnerName'")
                UserInitialsView(name = partnerName, size = size)
            }
            // PRIORIT√â 4: Point d'interrogation
            else {
                Log.d(TAG, "üñºÔ∏è PRIORIT√â 4 - Aucune info ‚Üí point d'interrogation")
                QuestionMarkView(size = size)
            }
        } else {
            Log.d(TAG, "üë§ PAS DE PARTENAIRE ‚Üí ic√¥ne invitation")
            // PAS DE PARTENAIRE ‚Üí Petit bonhomme blanc + invitation
            PersonIconView(size = size)
        }
        
        // Bordure diff√©rentielle
        Box(
            modifier = Modifier
                .size(size)
                .clip(CircleShape)
                .border(
                    width = if (hasPartner) 3.dp else 2.dp,
                    color = Color.White,
                    shape = CircleShape
                )
        )
    }
}

/**
 * ‚ùì Point d'interrogation pour partenaire sans nom/photo
 */
@Composable
private fun QuestionMarkView(size: Dp) {
    Box(
        modifier = Modifier
            .size(size)
            .clip(CircleShape)
            .background(Color.Gray.copy(alpha = 0.4f)),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = "?",
            fontSize = (size.value * 0.4f).sp,
            fontWeight = FontWeight.Bold,
            color = Color.White
        )
    }
}

/**
 * üë§ Petit bonhomme blanc pour utilisateur sans partenaire
 * Design identique √† l'image fournie : fond gris clair + ic√¥ne personne blanche
 */
@Composable
private fun PersonIconView(size: Dp) {
    Box(
        modifier = Modifier
            .size(size)
            .clip(CircleShape)
            .background(Color.Gray.copy(alpha = 0.15f)), // Fond gris clair comme sur l'image
        contentAlignment = Alignment.Center
    ) {
        Icon(
            imageVector = Icons.Filled.Person,
            contentDescription = "Partenaire non connect√©",
            tint = Color.White, // Petit bonhomme blanc comme sur l'image
            modifier = Modifier.size(size * 0.6f) // Taille proportionnelle
        )
    }
}
