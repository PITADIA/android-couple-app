package com.love2loveapp.views.profile.utils

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.util.Log
import java.util.*

/**
 * üîó ProfileExternalLinks - Fonctions utilitaires pour liens externes profil
 * 
 * √âquivalent Android des fonctions iOS :
 * - openSupportEmail() ‚Üí email support Love2Love
 * - openSubscriptionSettings() ‚Üí Google Play Store abonnements
 * - openTermsAndConditions() ‚Üí CGV Google Play
 * - openPrivacyPolicy() ‚Üí Politique confidentialit√© (multilingue)
 */
object ProfileExternalLinks {
    
    private const val TAG = "ProfileExternalLinks"
    
    // URLs et param√®tres
    private const val SUPPORT_EMAIL = "contact@love2loveapp.com"
    private const val SUPPORT_SUBJECT = "Support Love2Love - Question"
    private const val GOOGLE_PLAY_SUBSCRIPTIONS_URL = "https://play.google.com/store/account/subscriptions"
    private const val GOOGLE_TERMS_URL = "https://play.google.com/about/play-terms/index.html"
    private const val PRIVACY_POLICY_FR = "https://love2lovesite.onrender.com"
    private const val PRIVACY_POLICY_EN = "https://love2lovesite.onrender.com/privacy-policy.html"
    
    /**
     * üìß Ouvrir l'email de support Love2Love
     * 
     * √âquivalent iOS openSupportEmail() avec :
     * - Intent EMAIL avec EXTRA_SUBJECT seulement (multilingue)
     * - Fallback gracieux si pas d'app email
     * - Corps d'email vide pour laisser l'utilisateur √©crire
     * - M√©thodes multiples pour r√©soudre les blocages Android
     */
    fun openSupportEmail(context: Context) {
        try {
            Log.d(TAG, "üìß Ouverture email support")
            
            // ‚úÖ M√âTHODE 1: Intent ACTION_SENDTO avec donn√©es mailto (le plus robuste)
            val mailtoIntent = Intent(Intent.ACTION_SENDTO).apply {
                data = Uri.parse("mailto:$SUPPORT_EMAIL?subject=${Uri.encode(SUPPORT_SUBJECT)}")
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            if (tryStartActivity(context, mailtoIntent, "ACTION_SENDTO avec mailto")) return
            
            // ‚úÖ M√âTHODE 2: Intent ACTION_SENDTO simple
            val sendtoIntent = Intent(Intent.ACTION_SENDTO).apply {
                data = Uri.parse("mailto:$SUPPORT_EMAIL")
                putExtra(Intent.EXTRA_SUBJECT, SUPPORT_SUBJECT)
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            if (tryStartActivity(context, sendtoIntent, "ACTION_SENDTO simple")) return
            
            // ‚úÖ M√âTHODE 3: Intent ACTION_SEND avec chooser
            val sendIntent = Intent(Intent.ACTION_SEND).apply {
                type = "text/plain"
                putExtra(Intent.EXTRA_EMAIL, arrayOf(SUPPORT_EMAIL))
                putExtra(Intent.EXTRA_SUBJECT, SUPPORT_SUBJECT)
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            val chooserIntent = Intent.createChooser(sendIntent, "Choisir une application email")
            if (tryStartActivity(context, chooserIntent, "ACTION_SEND avec chooser")) return
            
            // ‚úÖ M√âTHODE 4: Intent ACTION_VIEW avec mailto
            val viewIntent = Intent(Intent.ACTION_VIEW).apply {
                data = Uri.parse("mailto:$SUPPORT_EMAIL?subject=${Uri.encode(SUPPORT_SUBJECT)}")
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            if (tryStartActivity(context, viewIntent, "ACTION_VIEW avec mailto")) return
            
            // ‚úÖ M√âTHODE 5: Apps sp√©cifiques (Gmail, Outlook, etc.)
            if (tryOpenSpecificEmailApp(context)) return
            
            Log.w(TAG, "‚ö†Ô∏è Aucune m√©thode email n'a fonctionn√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur ouverture email support: ${e.message}", e)
        }
    }
    
    /**
     * Essaie de d√©marrer une activit√© avec logging
     */
    private fun tryStartActivity(context: Context, intent: Intent, method: String): Boolean {
        return try {
            Log.d(TAG, "üîÑ Tentative: $method")
            
            // V√©rifier si l'intent peut √™tre r√©solu avant de l'envoyer
            val packageManager = context.packageManager
            val resolveInfo = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                packageManager.resolveActivity(intent, android.content.pm.PackageManager.ResolveInfoFlags.of(0))
            } else {
                @Suppress("DEPRECATION")
                packageManager.resolveActivity(intent, 0)
            }
            
            if (resolveInfo != null) {
                context.startActivity(intent)
                Log.d(TAG, "‚úÖ Email support ouvert avec: $method")
                true
            } else {
                Log.d(TAG, "‚ùå Aucune app trouv√©e pour: $method")
                false
            }
        } catch (e: Exception) {
            Log.d(TAG, "‚ùå Erreur avec $method: ${e.message}")
            false
        }
    }
    
    /**
     * Essaie d'ouvrir des applications email sp√©cifiques
     */
    private fun tryOpenSpecificEmailApp(context: Context): Boolean {
        val emailApps = listOf(
            "com.google.android.gm", // Gmail
            "com.microsoft.office.outlook", // Outlook
            "com.yahoo.mobile.client.android.mail", // Yahoo Mail
            "com.samsung.android.email.provider", // Samsung Email
            "com.android.email" // Email Android par d√©faut
        )
        
        for (packageName in emailApps) {
            try {
                Log.d(TAG, "üîÑ Tentative app sp√©cifique: $packageName")
                
                val intent = Intent(Intent.ACTION_SENDTO).apply {
                    data = Uri.parse("mailto:$SUPPORT_EMAIL")
                    putExtra(Intent.EXTRA_SUBJECT, SUPPORT_SUBJECT)
                    setPackage(packageName)
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK
                }
                
                if (intent.resolveActivity(context.packageManager) != null) {
                    context.startActivity(intent)
                    Log.d(TAG, "‚úÖ Email ouvert avec: $packageName")
                    return true
                }
            } catch (e: Exception) {
                Log.d(TAG, "‚ùå Erreur avec $packageName: ${e.message}")
            }
        }
        
        return false
    }
    
    /**
     * üåê Essaie d'ouvrir une URL avec plusieurs m√©thodes navigateur
     */
    private fun tryOpenUrl(context: Context, url: String, description: String): Boolean {
        Log.d(TAG, "üîÑ Tentative ouverture: $description")
        
        // ‚úÖ M√âTHODE 1: Intent ACTION_VIEW direct
        try {
            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            val packageManager = context.packageManager
            val resolveInfo = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
                packageManager.resolveActivity(intent, android.content.pm.PackageManager.ResolveInfoFlags.of(0))
            } else {
                @Suppress("DEPRECATION")
                packageManager.resolveActivity(intent, 0)
            }
            
            if (resolveInfo != null) {
                context.startActivity(intent)
                Log.d(TAG, "‚úÖ $description ouverte avec ACTION_VIEW")
                return true
            }
        } catch (e: Exception) {
            Log.d(TAG, "‚ùå Erreur ACTION_VIEW: ${e.message}")
        }
        
        // ‚úÖ M√âTHODE 2: Intent avec chooser
        try {
            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
            val chooserIntent = Intent.createChooser(intent, "Choisir un navigateur").apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            context.startActivity(chooserIntent)
            Log.d(TAG, "‚úÖ $description ouverte avec chooser")
            return true
        } catch (e: Exception) {
            Log.d(TAG, "‚ùå Erreur chooser: ${e.message}")
        }
        
        // ‚úÖ M√âTHODE 3: Navigateurs sp√©cifiques
        val browsers = listOf(
            "com.android.chrome", // Chrome
            "com.microsoft.emmx", // Edge
            "org.mozilla.firefox", // Firefox
            "com.opera.browser", // Opera
            "com.brave.browser", // Brave
            "com.android.browser" // Navigateur Android par d√©faut
        )
        
        for (packageName in browsers) {
            try {
                Log.d(TAG, "üîÑ Tentative navigateur sp√©cifique: $packageName")
                
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).apply {
                    setPackage(packageName)
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK
                }
                
                if (intent.resolveActivity(context.packageManager) != null) {
                    context.startActivity(intent)
                    Log.d(TAG, "‚úÖ $description ouverte avec: $packageName")
                    return true
                }
            } catch (e: Exception) {
                Log.d(TAG, "‚ùå Erreur avec $packageName: ${e.message}")
            }
        }
        
        // ‚úÖ M√âTHODE 4: Copier URL dans le presse-papiers (fallback ultime)
        try {
            val clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager
            val clip = android.content.ClipData.newPlainText("URL", url)
            clipboard.setPrimaryClip(clip)
            
            Log.d(TAG, "üìã URL copi√©e dans le presse-papiers: $url")
            // Optionnel: Afficher un toast pour informer l'utilisateur
            return false // Pas vraiment ouvert, mais action alternative
        } catch (e: Exception) {
            Log.d(TAG, "‚ùå Erreur copie presse-papiers: ${e.message}")
        }
        
        Log.d(TAG, "‚ùå Toutes les m√©thodes ont √©chou√© pour: $description")
        return false
    }
    
    /**
     * üí≥ Ouvrir les param√®tres d'abonnement Google Play Store
     * 
     * √âquivalent iOS openSubscriptionSettings() avec :
     * - Tentative ouverture app Google Play Store directe
     * - Fallback vers URL web
     * - Gestion erreurs gracieuse
     */
    fun openSubscriptionSettings(context: Context) {
        try {
            Log.d(TAG, "üí≥ Ouverture param√®tres abonnements Google Play")
            
            // Tentative 1: Ouvrir directement dans l'app Google Play Store
            val playStoreIntent = Intent(Intent.ACTION_VIEW).apply {
                data = Uri.parse("https://play.google.com/store/account/subscriptions?package=${context.packageName}")
                setPackage("com.android.vending") // Package Google Play Store
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            if (playStoreIntent.resolveActivity(context.packageManager) != null) {
                context.startActivity(playStoreIntent)
                Log.d(TAG, "‚úÖ Abonnements ouverts dans Google Play Store")
                return
            }
            
            // Tentative 2: URL g√©n√©rale abonnements sans package sp√©cifique
            val generalPlayIntent = Intent(Intent.ACTION_VIEW).apply {
                data = Uri.parse(GOOGLE_PLAY_SUBSCRIPTIONS_URL)
                setPackage("com.android.vending")
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            if (generalPlayIntent.resolveActivity(context.packageManager) != null) {
                context.startActivity(generalPlayIntent)
                Log.d(TAG, "‚úÖ Abonnements ouverts (g√©n√©ral) dans Google Play Store")
                return
            }
            
            // Tentative 3: Fallback vers navigateur web
            val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(GOOGLE_PLAY_SUBSCRIPTIONS_URL))
            if (browserIntent.resolveActivity(context.packageManager) != null) {
                context.startActivity(browserIntent)
                Log.d(TAG, "‚úÖ Abonnements ouverts via navigateur")
            } else {
                Log.w(TAG, "‚ö†Ô∏è Impossible d'ouvrir les abonnements")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur ouverture abonnements: ${e.message}", e)
        }
    }
    
    /**
     * üìÑ Ouvrir les Conditions G√©n√©rales de Vente (Google Play)
     * 
     * √âquivalent iOS avec lien vers CGV Google Play :
     * - URL officielle Google Play Terms
     * - M√©thodes multiples pour r√©soudre les blocages Android
     */
    fun openTermsAndConditions(context: Context) {
        try {
            Log.d(TAG, "üìÑ Ouverture CGV Google Play")
            
            // ‚úÖ M√âTHODES MULTIPLES pour navigateurs (comme pour email)
            if (tryOpenUrl(context, GOOGLE_TERMS_URL, "CGV Google Play")) return
            
            Log.w(TAG, "‚ö†Ô∏è Aucune m√©thode n'a fonctionn√© pour ouvrir CGV")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur ouverture CGV: ${e.message}", e)
        }
    }
    
    /**
     * üîí Ouvrir la Politique de Confidentialit√© (multilingue)
     * 
     * √âquivalent iOS openPrivacyPolicy() avec :
     * - URL fran√ßaise ou anglaise selon langue syst√®me
     * - D√©tection automatique langue pr√©f√©r√©e
     * - M√©thodes multiples pour r√©soudre les blocages Android
     */
    fun openPrivacyPolicy(context: Context) {
        try {
            Log.d(TAG, "üîí Ouverture politique de confidentialit√©")
            
            // D√©tection langue comme iOS
            val isFrench = Locale.getDefault().language.startsWith("fr")
            val policyUrl = if (isFrench) {
                PRIVACY_POLICY_FR
            } else {
                PRIVACY_POLICY_EN
            }
            
            Log.d(TAG, "üåç Langue d√©tect√©e: ${Locale.getDefault().language}, URL: $policyUrl")
            
            // ‚úÖ M√âTHODES MULTIPLES pour navigateurs (comme pour email)
            if (tryOpenUrl(context, policyUrl, "Politique de confidentialit√©")) return
            
            Log.w(TAG, "‚ö†Ô∏è Aucune m√©thode n'a fonctionn√© pour ouvrir politique")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur ouverture politique: ${e.message}", e)
        }
    }
    
    /**
     * üì± Ouvrir les param√®tres Android (fallback g√©n√©ral)
     * 
     * Utilitaire pour ouvrir les param√®tres syst√®me Android
     * si les autres m√©thodes √©chouent
     */
    fun openAndroidSettings(context: Context) {
        try {
            Log.d(TAG, "üì± Ouverture param√®tres Android")
            
            val intent = Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                data = Uri.fromParts("package", context.packageName, null)
            }
            
            if (intent.resolveActivity(context.packageManager) != null) {
                context.startActivity(intent)
                Log.d(TAG, "‚úÖ Param√®tres Android ouverts")
            } else {
                Log.w(TAG, "‚ö†Ô∏è Impossible d'ouvrir param√®tres Android")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur ouverture param√®tres: ${e.message}", e)
        }
    }
    
    /**
     * üîç V√©rifier si une intention peut √™tre r√©solue
     * 
     * Utilitaire pour tester si une app peut g√©rer une intention
     * avant de la lancer
     */
    fun canResolveIntent(context: Context, intent: Intent): Boolean {
        return intent.resolveActivity(context.packageManager) != null
    }
    
    /**
     * üìä Obtenir informations syst√®me pour debug/support
     * 
     * Retourne infos utiles pour le support client
     */
    fun getSystemInfo(): Map<String, String> {
        return mapOf(
            "androidVersion" to android.os.Build.VERSION.RELEASE,
            "deviceModel" to android.os.Build.MODEL,
            "deviceManufacturer" to android.os.Build.MANUFACTURER,
            "language" to Locale.getDefault().language,
            "country" to Locale.getDefault().country,
            "buildType" to android.os.Build.TYPE,
            "apiLevel" to android.os.Build.VERSION.SDK_INT.toString()
        )
    }
}
