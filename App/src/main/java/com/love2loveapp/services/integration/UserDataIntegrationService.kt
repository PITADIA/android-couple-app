package com.love2loveapp.services.integration

import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import com.love2loveapp.AppDelegate
import com.love2loveapp.models.AppState
import com.love2loveapp.models.User
import com.love2loveapp.models.UserLocation
import kotlinx.coroutines.*

/**
 * üîÑ UserDataIntegrationService - Int√©gration donn√©es Firebase avec AppState local
 * 
 * Responsabilit√©s:
 * - Synchroniser les donn√©es utilisateur Firebase avec AppState
 * - √âcouter les changements temps r√©el
 * - D√©marrer/arr√™ter les services selon l'√©tat d'authentification
 * - Conversion entre mod√®les Firebase et mod√®les locaux
 */
class UserDataIntegrationService private constructor(
    private val appState: AppState
) {
    
    // üõ°Ô∏è Protection temporaire contre la d√©tection de suppression (selon rapport iOS)
    private var suppressAccountDeletionDetection = false
    private val suppressionTimeoutMs = 15000L // 15 secondes comme recommand√© par dev iOS
    
    companion object {
        private const val TAG = "UserDataIntegration"
        private const val USERS_COLLECTION = "users"
        
        @Volatile
        private var instance: UserDataIntegrationService? = null
        
        fun getInstance(appState: AppState): UserDataIntegrationService {
            return instance ?: synchronized(this) {
                instance ?: UserDataIntegrationService(appState).also { instance = it }
            }
        }
    }
    
    // Firebase services
    private val auth = FirebaseAuth.getInstance()
    private val db = FirebaseFirestore.getInstance()
    private val serviceScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
    
    // Listeners Firebase
    private var userDataListener: ListenerRegistration? = null
    private var authStateListener: FirebaseAuth.AuthStateListener? = null
    
    /**
     * üöÄ Initialise l'int√©gration Firebase
     */
    fun initialize() {
        Log.d(TAG, "üöÄ Initialisation UserDataIntegrationService")
        
        // √âcouter les changements d'authentification
        setupAuthStateListener()
        
        // Si d√©j√† authentifi√©, d√©marrer imm√©diatement
        val currentUser = auth.currentUser
        if (currentUser != null) {
            Log.d(TAG, "üë§ Utilisateur d√©j√† connect√©: [USER_MASKED]")
            startUserDataSync(currentUser.uid)
        } else {
            Log.d(TAG, "‚ÑπÔ∏è Aucun utilisateur connect√©")
        }
    }
    
    /**
     * üõ°Ô∏è Supprime temporairement la d√©tection de suppression de compte
     * Utilis√© pendant la cr√©ation de nouveau profil utilisateur
     * √âquivalent √† la logique iOS d√©crite dans RAPPORT_PROBLEME_PERMISSIONS_FIRESTORE.md
     */
    fun suppressAccountDeletionDetectionTemporarily(durationMs: Long = suppressionTimeoutMs) {
        Log.d(TAG, "üõ°Ô∏è Activation protection suppression pour ${durationMs}ms")
        suppressAccountDeletionDetection = true
        
        // Auto-r√©activation apr√®s timeout
        serviceScope.launch {
            delay(durationMs)
            suppressAccountDeletionDetection = false
            Log.d(TAG, "üõ°Ô∏è Protection suppression d√©sactiv√©e apr√®s timeout")
        }
    }
    
    /**
     * üîê Configure l'√©coute des changements d'authentification
     */
    private fun setupAuthStateListener() {
        authStateListener = FirebaseAuth.AuthStateListener { firebaseAuth ->
            val firebaseUser = firebaseAuth.currentUser
            
            if (firebaseUser != null) {
                Log.d(TAG, "üîê Utilisateur connect√©: [USER_MASKED]")
                
                // Marquer comme authentifi√© dans AppState
                appState.setAuthenticated(true, null) // Sera mis √† jour par le listener Firestore
                
                // üîë FLUSH TOKEN FCM POUR NOTIFICATIONS - Fixed !
                // AppState a maintenant un context - utilisons-le
                com.love2loveapp.MyFirebaseMessagingService.flushStashedTokenIfAny(AppDelegate.getInstance().applicationContext)
                
                // D√©marrer la synchronisation des donn√©es
                startUserDataSync(firebaseUser.uid)
                
                // D√©marrer les services de localisation et abonnement via AppDelegate
                serviceScope.launch {
                    try {
                        // üìç D√©marrer EXCLUSIVEMENT le service de localisation robuste (√©viter conflits GPS)
                        AppDelegate.getInstance().startLocationServicesIfAuthenticated()
                        Log.d(TAG, "üìç Service de localisation robuste d√©marr√© (GPS exclusif)")
                        
                        // üë• CRITIQUE: D√©marrer PartnerLocationService avec logs d√©taill√©s
                        Log.d(TAG, "üöÄ D√âMARRAGE CRITIQUE PartnerLocationService...")
                        AppDelegate.partnerLocationService?.let { service ->
                            service.startAutoSyncIfPartnerExists()
                            Log.d(TAG, "‚úÖ PartnerLocationService.startAutoSyncIfPartnerExists() appel√©")
                        } ?: Log.e(TAG, "‚ùå AppDelegate.partnerLocationService est NULL!")
                        
                        // ü§ù D√©marrer la synchronisation des abonnements partenaires
                        AppDelegate.partnerSubscriptionSyncService?.startListeningForUser()
                        Log.d(TAG, "ü§ù Service de partage d'abonnements d√©marr√©")
                        
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur d√©marrage services: ${e.message}", e)
                    }
                }
                
                // üõ´ Navigation sera d√©cid√©e par le listener Firestore selon onboardingInProgress
                Log.d(TAG, "üöÄ Authentification d√©tect√©e - attente donn√©es Firestore pour navigation")
                
            } else {
                Log.d(TAG, "üîì Utilisateur d√©connect√©")
                
                // Marquer comme non authentifi√©
                appState.setAuthenticated(false, null)
                
                // Arr√™ter la synchronisation
                stopUserDataSync()
                
                // Arr√™ter les services de localisation et abonnement
                AppDelegate.locationSyncService?.stopLocationSync()
                AppDelegate.partnerLocationService?.stopSync()
                
                // ü§ù Arr√™ter la synchronisation des abonnements partenaires
                AppDelegate.partnerSubscriptionSyncService?.stopAllListeners()
                Log.d(TAG, "ü§ù Service de partage d'abonnements arr√™t√©")
                
                // Navigation vers Welcome (utilisateur non authentifi√©)
                Log.d(TAG, "üöÄ Navigation automatique vers Welcome - utilisateur non authentifi√©")
                appState.navigateToScreen(com.love2loveapp.models.AppScreen.Welcome)
            }
        }
        
        auth.addAuthStateListener(authStateListener!!)
    }
    
    /**
     * üìä D√©marre la synchronisation des donn√©es utilisateur
     */
    private fun startUserDataSync(userId: String) {
        Log.d(TAG, "üìä D√©marrage sync donn√©es utilisateur: [USER_MASKED]")
        
        // Arr√™ter l'ancien listener s'il existe
        stopUserDataSync()
        
        // Cr√©er un listener temps r√©el sur le document utilisateur
        userDataListener = db.collection(USERS_COLLECTION)
            .document(userId)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener donn√©es utilisateur: ${error.message}", error)
                    
                    // üö® D√âTECTION SUPPRESSION - Erreur de permissions
                    // √âquivalent iOS: if error.localizedDescription.contains("permissions")
                    if (error.message?.contains("permissions", ignoreCase = true) == true ||
                        error.message?.contains("Missing or insufficient permissions", ignoreCase = true) == true) {
                        
                        // üõ°Ô∏è PROTECTION - V√©rifier si d√©tection temporairement d√©sactiv√©e
                        if (suppressAccountDeletionDetection) {
                            Log.d(TAG, "üõ°Ô∏è Erreur permissions mais protection active - cr√©ation profil en cours")
                            return@addSnapshotListener
                        }
                        
                        Log.w(TAG, "üö® D√âTECTION - Erreur permissions Firestore = Compte supprim√©")
                        handleAccountDeletionDetected(userId)
                    }
                    
                    return@addSnapshotListener
                }
                
                if (snapshot != null && snapshot.exists()) {
                    try {
                        val firestoreData = snapshot.data ?: return@addSnapshotListener
                        
                        // Convertir les donn√©es Firestore en mod√®le User local
                        val user = convertFirestoreToUser(userId, firestoreData)
                        
                        // üî• CRITIQUE: Mettre √† jour AppState avec d√©tection partenaire
                        appState.setAuthenticated(true, null) // Authentifier d'abord
                        appState.updateUserData(user) // Puis mettre √† jour donn√©es avec d√©tection partenaire
                        
                        // Sauvegarder dans SharedPreferences pour persistance
                        saveUserToSharedPreferences(user)
                        
                        Log.d(TAG, "‚úÖ Donn√©es utilisateur mises √† jour: [USER_MASKED]")
                        
                        // üõ´ Navigation intelligente bas√©e sur l'√©tat d'onboarding et d'abonnement
                        if (user.onboardingInProgress) {
                            // Utilisateur avec onboarding en cours
                            if (user.isSubscribed) {
                                // Utilisateur payant : aller directement √† l'app principale
                                Log.d(TAG, "üí≥ Utilisateur payant avec onboarding en cours - direction MainScreen")
                                appState.navigateToScreen(com.love2loveapp.models.AppScreen.Main)
                            } else {
                                // üî• CORRECTION: Ne pas naviguer si on est d√©j√† en train de faire l'onboarding
                                val currentScreen = appState.currentScreen.value
                                if (currentScreen == com.love2loveapp.models.AppScreen.Welcome || 
                                    currentScreen == com.love2loveapp.models.AppScreen.Onboarding) {
                                    Log.d(TAG, "‚è≠Ô∏è Onboarding d√©j√† en cours (√©cran: $currentScreen) - pas de navigation automatique")
                                } else {
                                    // Utilisateur non payant : afficher Welcome pour choix utilisateur
                                    Log.d(TAG, "üÜì Utilisateur non payant avec onboarding en cours - affichage Welcome")
                                    appState.navigateToScreen(com.love2loveapp.models.AppScreen.Welcome)
                                }
                            }
                        } else {
                            // Onboarding termin√©, aller √† l'app principale
                            Log.d(TAG, "üè† Onboarding termin√© - direction MainScreen")
                            appState.navigateToScreen(com.love2loveapp.models.AppScreen.Main)
                        }
                        
                        // Si localisation a chang√©, mettre √† jour le service
                        user.currentLocation?.let { location ->
                            // La localisation sera g√©r√©e par LocationSyncService
                            Log.d(TAG, "üìç Localisation utilisateur: [LOCATION_MASKED]")
                        }
                        
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur parsing donn√©es utilisateur: ${e.message}", e)
                    }
                } else {
                    // üõ°Ô∏è PROTECTION - V√©rifier si d√©tection de suppression est temporairement d√©sactiv√©e
                    if (suppressAccountDeletionDetection) {
                        Log.d(TAG, "üõ°Ô∏è Document inexistant mais protection active - cr√©ation profil en cours")
                        return@addSnapshotListener
                    }
                    
                    // üö® D√âTECTION SUPPRESSION DE COMPTE
                    // Document Firestore inexistant mais Firebase Auth connect√© = compte supprim√©
                    Log.w(TAG, "üö® D√âTECTION - Document utilisateur inexistant: $userId")
                    Log.w(TAG, "üö® Firebase Auth connect√© mais Firestore vide = Compte supprim√©")
                    
                    handleAccountDeletionDetected(userId)
                }
            }
    }
    
    /**
     * ‚èπÔ∏è Arr√™te la synchronisation des donn√©es utilisateur
     */
    private fun stopUserDataSync() {
        userDataListener?.remove()
        userDataListener = null
    }
    
    /**
     * üö® G√®re la d√©tection de suppression de compte
     * √âquivalent iOS: handleAccountDeletionDetected()
     */
    private fun handleAccountDeletionDetected(userId: String) {
        // üõ°Ô∏è Si la protection est active, on NE fait RIEN
        if (suppressAccountDeletionDetection) {
            Log.d(TAG, "üõ°Ô∏è Suppression d√©tect√©e mais protection active - on ignore")
            return
        }
        
        Log.w(TAG, "üö® Gestion suppression de compte d√©tect√©e pour: $userId")
        
        serviceScope.launch {
            try {
                // 1. Nettoyer cache local (√©quivalent UserCacheManager.clearCache())
                clearUserCache()
                
                // 2. D√©connexion RevenueCat (si disponible)
                // TODO: Impl√©menter si RevenueCat est utilis√©
                
                // 3. R√©initialiser AppState complet
                appState.deleteAccount()
                
                // 4. Forcer d√©connexion Firebase Auth pour √©viter les boucles
                auth.signOut()
                
                Log.w(TAG, "‚úÖ Nettoyage complet apr√®s suppression de compte")
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors du nettoyage apr√®s suppression: ${e.message}", e)
                
                // En cas d'erreur, forcer quand m√™me la d√©connexion
                try {
                    auth.signOut()
                } catch (signOutError: Exception) {
                    Log.e(TAG, "‚ùå Impossible de d√©connecter Firebase Auth: ${signOutError.message}")
                }
            }
        }
    }
    
    /**
     * üßπ Nettoie le cache local utilisateur
     * √âquivalent iOS: UserCacheManager.clearCache()
     */
    private fun clearUserCache() {
        try {
            val context = AppDelegate.getInstance()
            val prefs = context.getSharedPreferences("love2love_prefs", android.content.Context.MODE_PRIVATE)
            
            // Nettoyer toutes les donn√©es utilisateur
            prefs.edit().clear().apply()
            
            // Nettoyer aussi le cache images si disponible
            AppDelegate.userCacheManager?.clearAllImageCache()
            
            Log.d(TAG, "üßπ Cache utilisateur nettoy√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage cache: ${e.message}", e)
        }
    }
    
    /**
     * üîÑ Convertit les donn√©es Firestore en mod√®le User local
     */
    private fun convertFirestoreToUser(userId: String, data: Map<String, Any>): User {
        // Extraction des donn√©es de base
        val name = data["name"] as? String ?: ""
        val email = data["email"] as? String
        val partnerId = data["partnerId"] as? String
        val isSubscribed = data["isSubscribed"] as? Boolean ?: false
        val relationshipGoals = (data["relationshipGoals"] as? List<*>)?.mapNotNull { it as? String } ?: emptyList()
        val relationshipDuration = data["relationshipDuration"] as? String
        val relationshipImprovement = data["relationshipImprovement"] as? String
        val questionMode = data["questionMode"] as? String
        val onboardingInProgress = data["onboardingInProgress"] as? Boolean ?: false
        val profileImageURL = data["profileImageURL"] as? String
        
        // üìÖ EXTRACTION RELATIONSHIP START DATE (CRUCIAL POUR STATISTIQUES)
        val relationshipStartDate = try {
            (data["relationshipStartDate"] as? com.google.firebase.Timestamp)?.toDate()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur parsing relationshipStartDate: ${e.message}", e)
            null
        }
        
        // Extraction de la localisation
        val locationData = data["currentLocation"] as? Map<String, Any>
        val currentLocation = locationData?.let { locData ->
            val latitude = locData["latitude"] as? Double
            val longitude = locData["longitude"] as? Double
            val address = locData["address"] as? String
            val city = locData["city"] as? String
            val country = locData["country"] as? String
            val lastUpdated = (locData["lastUpdated"] as? Number)?.toLong() ?: System.currentTimeMillis()
            
            if (latitude != null && longitude != null) {
                UserLocation(latitude, longitude, address, city, country, lastUpdated)
            } else null
        }
        
        return User(
            id = userId,
            _rawName = name,
            email = email,
            partnerId = partnerId,
            isSubscribed = isSubscribed,
            relationshipGoals = relationshipGoals,
            relationshipDuration = relationshipDuration,
            relationshipImprovement = relationshipImprovement,
            questionMode = questionMode,
            onboardingInProgress = onboardingInProgress,
            profileImageURL = profileImageURL,
            currentLocation = currentLocation,
            relationshipStartDate = relationshipStartDate // üìä AJOUT POUR STATISTIQUES
        )
    }
    
    /**
     * üíæ Sauvegarde les donn√©es utilisateur dans Firestore
     */
    fun saveUserData(user: User) {
        val currentUserId = auth.currentUser?.uid
        if (currentUserId == null) {
            Log.w(TAG, "‚ö†Ô∏è Utilisateur non connect√©, impossible de sauvegarder")
            return
        }
        
        serviceScope.launch {
            try {
                val firestoreData = convertUserToFirestore(user)
                
                db.collection(USERS_COLLECTION)
                    .document(currentUserId)
                    .set(firestoreData, com.google.firebase.firestore.SetOptions.merge())
                    .addOnSuccessListener {
                        Log.d(TAG, "‚úÖ Donn√©es utilisateur sauvegard√©es dans Firestore")
                    }
                    .addOnFailureListener { e ->
                        Log.e(TAG, "‚ùå Erreur sauvegarde utilisateur: ${e.message}", e)
                    }
                    
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Exception sauvegarde utilisateur: ${e.message}", e)
            }
        }
    }
    
    /**
     * üîÑ Convertit le mod√®le User local en donn√©es Firestore
     */
    private fun convertUserToFirestore(user: User): Map<String, Any?> {
        val firestoreData = mutableMapOf<String, Any?>()
        
        Log.d(TAG, "üéØ SAUVEGARDE FIRESTORE - DONN√âES USER:")
        Log.d(TAG, "  - user.id: '[MASKED]'")
        Log.d(TAG, "  - user.name (propri√©t√© calc): '[MASKED]'")
        
        // üî• PERSISTANCE: Sauvegarder le nom g√©n√©r√© automatiquement en Firestore
        // pour √©viter de r√©g√©n√©rer √† chaque chargement et maintenir la coh√©rence
        firestoreData["name"] = user.name
        firestoreData["email"] = user.email
        firestoreData["partnerId"] = user.partnerId
        firestoreData["isSubscribed"] = user.isSubscribed
        firestoreData["relationshipGoals"] = user.relationshipGoals
        firestoreData["relationshipDuration"] = user.relationshipDuration
        firestoreData["relationshipImprovement"] = user.relationshipImprovement
        firestoreData["questionMode"] = user.questionMode
        firestoreData["onboardingInProgress"] = user.onboardingInProgress
        firestoreData["profileImageURL"] = user.profileImageURL
        
        // üìÖ RELATIONSHIP START DATE (CRUCIAL POUR STATISTIQUES)
        user.relationshipStartDate?.let { date ->
            firestoreData["relationshipStartDate"] = com.google.firebase.Timestamp(date)
        }
        
        // Localisation
        user.currentLocation?.let { location ->
            firestoreData["currentLocation"] = mapOf(
                "latitude" to location.latitude,
                "longitude" to location.longitude,
                "address" to location.address,
                "city" to location.city,
                "country" to location.country,
                "lastUpdated" to location.lastUpdated
            )
        }
        
        return firestoreData
    }
    
    /**
     * üíæ Sauvegarde les donn√©es utilisateur dans SharedPreferences pour persistance
     */
    private fun saveUserToSharedPreferences(user: User) {
        try {
            val context = AppDelegate.getInstance()
            val prefs = context.getSharedPreferences("love2love_prefs", android.content.Context.MODE_PRIVATE)
            
            prefs.edit().apply {
                putBoolean("onboarding_completed", true)
                putString("user_id", user.id)
                putString("user_name", user.name)
                putString("user_email", user.email)
                putString("user_partner_id", user.partnerId)
                putBoolean("user_is_subscribed", user.isSubscribed)
                putStringSet("user_goals", user.relationshipGoals.toSet())
                putString("user_duration", user.relationshipDuration)
                putString("user_improvement", user.relationshipImprovement)
                putString("user_question_mode", user.questionMode)
                putBoolean("user_onboarding_in_progress", user.onboardingInProgress)
                apply()
            }
            
            Log.d(TAG, "üíæ Donn√©es utilisateur sauvegard√©es dans SharedPreferences")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur sauvegarde SharedPreferences: ${e.message}", e)
        }
    }
    
    /**
     * üßπ Nettoie les ressources
     */
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage UserDataIntegrationService")
        
        authStateListener?.let { listener ->
            auth.removeAuthStateListener(listener)
        }
        authStateListener = null
        
        stopUserDataSync()
        serviceScope.cancel()
    }
}
