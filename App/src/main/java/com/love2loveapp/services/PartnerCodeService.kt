package com.love2loveapp.services

import android.content.Context
import android.content.Intent
import android.util.Log
import com.google.firebase.analytics.ktx.analytics
import com.google.firebase.analytics.ktx.logEvent
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.FieldValue
import com.google.firebase.Timestamp
import com.google.firebase.functions.FirebaseFunctions
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.util.Date
import kotlin.random.Random

/**
 * Service Android pour le syst√®me de code partenaire Love2Love
 * √âquivalent du PartnerCodeService iOS avec toute la logique de s√©curit√©
 */
class PartnerCodeService private constructor() {

    companion object {
        @JvmStatic
        val shared = PartnerCodeService()
    }

    // Firebase services
    private val db = FirebaseFirestore.getInstance()
    private val auth = FirebaseAuth.getInstance()
    private val functions = FirebaseFunctions.getInstance()
    private val analytics = Firebase.analytics

    // √âtats observables
    private val _state = MutableStateFlow(PartnerCodeState())
    val state: StateFlow<PartnerCodeState> = _state.asStateFlow()

    data class PartnerCodeState(
        val generatedCode: String? = null,
        val isLoading: Boolean = false,
        val errorMessage: String? = null,
        val isConnected: Boolean = false,
        val partnerInfo: PartnerInfo? = null
    )

    data class PartnerInfo(
        val id: String,
        val name: String,
        val connectedAt: Date,
        val isSubscribed: Boolean
    )

    /**
     * G√©n√®re un code partenaire unique avec conformit√© Apple (24h max)
     */
    suspend fun generatePartnerCode(): String? = withContext(Dispatchers.IO) {
        try {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            Log.d("PartnerCodeService", "üîÑ G√©n√©ration code partenaire...")

            val currentUser = auth.currentUser 
                ?: throw Exception("Utilisateur non connect√©")

            // üõ°Ô∏è CONFORMIT√â APPLE : V√©rifier si code r√©cent (< 24h) existe
            val yesterday = Date(System.currentTimeMillis() - 86400000) // 24h en ms
            val recentCodesQuery = db.collection("partnerCodes")
                .whereEqualTo("userId", currentUser.uid)
                .whereGreaterThan("createdAt", Timestamp(yesterday))
                .whereEqualTo("isActive", true)
                .get()
                .await()

            // Si code r√©cent existe, le retourner
            if (!recentCodesQuery.isEmpty) {
                val existingCode = recentCodesQuery.documents.first().id
                Log.d("PartnerCodeService", "‚úÖ Code r√©cent trouv√©: [CODE_MASQU√â]")
                
                _state.value = _state.value.copy(
                    generatedCode = existingCode,
                    isLoading = false
                )
                return@withContext existingCode
            }

            // Sinon, g√©n√©rer un nouveau code unique
            var attempts = 0
            var code: String
            var isUnique: Boolean

            do {
                code = String.format("%08d", Random.nextInt(10000000, 99999999))

                // V√©rifier unicit√©
                val existingDoc = db.collection("partnerCodes")
                    .document(code)
                    .get()
                    .await()

                isUnique = !existingDoc.exists()
                attempts++

                if (attempts > 10) {
                    throw Exception("Impossible de g√©n√©rer un code unique apr√®s 10 tentatives")
                }
            } while (!isUnique)

            Log.d("PartnerCodeService", "üî• Code unique trouv√© apr√®s $attempts tentatives")

            // Cr√©er le code avec expiration 24h
            val expirationDate = Date(System.currentTimeMillis() + 86400000)
            db.collection("partnerCodes").document(code).set(
                hashMapOf(
                    "userId" to currentUser.uid,
                    "createdAt" to FieldValue.serverTimestamp(),
                    "expiresAt" to Timestamp(expirationDate),
                    "isActive" to true,
                    "connectedPartnerId" to null,
                    "rotationReason" to "apple_compliance"
                )
            ).await()

            Log.d("PartnerCodeService", "‚úÖ Code cr√©√© avec succ√®s: [CODE_MASQU√â]")

            _state.value = _state.value.copy(
                generatedCode = code,
                isLoading = false
            )

            // Analytics
            analytics.logEvent("code_partenaire_genere") {
                param("method", "auto_generation")
            }

            return@withContext code

        } catch (e: Exception) {
            Log.e("PartnerCodeService", "‚ùå Erreur g√©n√©ration code", e)
            _state.value = _state.value.copy(
                errorMessage = "Erreur g√©n√©ration: ${e.message}",
                isLoading = false
            )
            return@withContext null
        }
    }

    /**
     * Connexion avec code partenaire via Cloud Function s√©curis√©e
     */
    suspend fun connectWithPartnerCode(code: String): Boolean = withContext(Dispatchers.IO) {
        try {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            Log.d("PartnerCodeService", "üîó Connexion avec code partenaire...")

            // Analytics tracking
            analytics.logEvent("partner_connect_start") {
                param("source", "onboarding")
            }

            // Appel Cloud Function s√©curis√©
            val result = functions.getHttpsCallable("connectPartners")
                .call(hashMapOf("partnerCode" to code))
                .await()

            val data = result.data as? Map<String, Any>
                ?: throw Exception("R√©ponse Cloud Function invalide")

            val success = data["success"] as? Boolean
                ?: throw Exception("Connexion √©chou√©e")

            if (!success) {
                val message = data["message"] as? String ?: "Connexion refus√©e"
                throw Exception(message)
            }

            val partnerName = data["partnerName"] as? String ?: "Partenaire"
            val subscriptionInherited = data["subscriptionInherited"] as? Boolean ?: false

            Log.d("PartnerCodeService", "‚úÖ Connexion r√©ussie avec $partnerName")
            Log.d("PartnerCodeService", "üì± Abonnement h√©rit√©: $subscriptionInherited")

            // Mise √† jour √©tat
            _state.value = _state.value.copy(
                isConnected = true,
                partnerInfo = PartnerInfo(
                    id = "", // L'ID sera r√©cup√©r√© plus tard si n√©cessaire
                    name = partnerName,
                    connectedAt = Date(),
                    isSubscribed = subscriptionInherited
                ),
                isLoading = false
            )

            // Analytics success
            analytics.logEvent("partenaire_connecte") {
                param("inherited_subscription", subscriptionInherited.toString())
                param("context", "onboarding")
            }

            return@withContext true

        } catch (e: Exception) {
            Log.e("PartnerCodeService", "‚ùå Erreur connexion partenaire", e)
            
            val errorMessage = when {
                e.message?.contains("not-found") == true -> "Code partenaire invalide"
                e.message?.contains("failed-precondition") == true -> "Code partenaire inactif"
                e.message?.contains("deadline-exceeded") == true -> "Code partenaire expir√© (24h max)"
                e.message?.contains("invalid-argument") == true -> "Vous ne pouvez pas utiliser votre propre code"
                e.message?.contains("already-exists") == true -> "Ce code est d√©j√† utilis√©"
                else -> e.message ?: "Erreur de connexion"
            }
            
            _state.value = _state.value.copy(
                errorMessage = errorMessage,
                isLoading = false
            )
            return@withContext false
        }
    }

    /**
     * V√©rifier s'il y a d√©j√† une connexion partenaire existante
     */
    suspend fun checkExistingConnection() = withContext(Dispatchers.IO) {
        try {
            val currentUser = auth.currentUser ?: return@withContext
            Log.d("PartnerCodeService", "üîç V√©rification connexion existante...")

            val userDoc = db.collection("users")
                .document(currentUser.uid)
                .get()
                .await()

            val userData = userDoc.data
            val partnerId = userData?.get("partnerId") as? String

            if (!partnerId.isNullOrEmpty()) {
                Log.d("PartnerCodeService", "‚úÖ Partenaire d√©j√† connect√©: [ID_MASQU√â]")
                
                try {
                    // üî• R√©cup√©ration infos partenaire via Cloud Function s√©curis√©e (comme iOS)
                    val result = functions.getHttpsCallable("getPartnerInfo")
                        .call(hashMapOf("partnerId" to partnerId))
                        .await()

                    val resultData = result.data as? Map<String, Any>
                    val success = resultData?.get("success") as? Boolean ?: false

                    if (success) {
                        val partnerData = resultData?.get("partnerInfo") as? Map<String, Any>
                        val connectedAt = userData["partnerConnectedAt"] as? Timestamp

                        if (partnerData != null && connectedAt != null) {
                            val partnerName = partnerData["name"] as? String ?: "Partenaire"
                            val isSubscribed = partnerData["isSubscribed"] as? Boolean ?: false

                            _state.value = _state.value.copy(
                                isConnected = true,
                                partnerInfo = PartnerInfo(
                                    id = partnerId,
                                    name = partnerName,
                                    connectedAt = connectedAt.toDate(),
                                    isSubscribed = isSubscribed
                                )
                            )
                            Log.d("PartnerCodeService", "‚úÖ Connexion existante restaur√©e via Cloud Function")
                        }
                    } else {
                        Log.e("PartnerCodeService", "‚ùå Cloud Function getPartnerInfo √©chec")
                    }
                } catch (e: Exception) {
                    Log.e("PartnerCodeService", "‚ùå Erreur Cloud Function getPartnerInfo", e)
                }
            } else {
                Log.d("PartnerCodeService", "‚ÑπÔ∏è Aucune connexion partenaire existante")
            }

        } catch (e: Exception) {
            Log.e("PartnerCodeService", "‚ùå Erreur v√©rification connexion", e)
        }
    }

    /**
     * Validation d'un code avant connexion (optionnel)
     */
    suspend fun validatePartnerCode(code: String): ValidationResult = withContext(Dispatchers.IO) {
        try {
            Log.d("PartnerCodeService", "üîç Validation code partenaire...")

            val result = functions.getHttpsCallable("validatePartnerCode")
                .call(hashMapOf("partnerCode" to code))
                .await()

            val data = result.data as? Map<String, Any>
                ?: return@withContext ValidationResult.error("R√©ponse invalide")

            val isValid = data["isValid"] as? Boolean ?: false
            val reason = data["reason"] as? String
            val message = data["message"] as? String

            return@withContext if (isValid) {
                ValidationResult.valid()
            } else {
                ValidationResult.invalid(reason ?: "Code invalide", message ?: "Code non valide")
            }

        } catch (e: Exception) {
            Log.e("PartnerCodeService", "‚ùå Erreur validation code", e)
            return@withContext ValidationResult.error(e.message ?: "Erreur de validation")
        }
    }

    /**
     * Partager le code partenaire via le syst√®me de partage Android
     */
    fun sharePartnerCode(context: Context, code: String) {
        try {
            val shareText = context.getString(
                com.love2loveapp.R.string.share_partner_code_message
            ).replace("{code}", code)

            val shareIntent = Intent().apply {
                action = Intent.ACTION_SEND
                putExtra(Intent.EXTRA_TEXT, shareText)
                type = "text/plain"
            }

            val chooser = Intent.createChooser(shareIntent, "Partager le code partenaire")
            context.startActivity(chooser)

            // Analytics
            analytics.logEvent("code_partenaire_partage") {
                param("method", "system_share")
            }

            Log.d("PartnerCodeService", "üì§ Code partenaire partag√©")

        } catch (e: Exception) {
            Log.e("PartnerCodeService", "‚ùå Erreur partage code", e)
        }
    }

    /**
     * D√©connecter du partenaire via Cloud Function s√©curis√©e
     */
    suspend fun disconnectPartner(): Boolean = withContext(Dispatchers.IO) {
        try {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            Log.d("PartnerCodeService", "üíî D√©but d√©connexion partenaire...")

            // Analytics tracking
            analytics.logEvent("partner_disconnect_start") {
                param("source", "partner_management")
            }

            // Appel Cloud Function s√©curis√©
            val result = functions.getHttpsCallable("disconnectPartners")
                .call(emptyMap<String, Any>())
                .await()

            val data = result.data as? Map<String, Any>
                ?: throw Exception("R√©ponse Cloud Function invalide")

            val success = data["success"] as? Boolean
                ?: throw Exception("D√©connexion √©chou√©e")

            if (!success) {
                val message = data["message"] as? String ?: "D√©connexion refus√©e"
                throw Exception(message)
            }

            Log.d("PartnerCodeService", "‚úÖ D√©connexion r√©ussie")

            // Mise √† jour √©tat local
            _state.value = _state.value.copy(
                isConnected = false,
                partnerInfo = null,
                isLoading = false,
                errorMessage = null
            )

            // Nettoyage cache local (comme iOS)
            // UserDefaults.standard.removeObject(forKey: "lastCoupleId") √©quivalent Android
            // TODO: Ajouter nettoyage SharedPreferences si n√©cessaire

            // Analytics success
            analytics.logEvent("partenaire_deconnecte") {
                param("method", "cloud_function")
            }

            return@withContext true

        } catch (e: Exception) {
            Log.e("PartnerCodeService", "‚ùå Erreur d√©connexion partenaire", e)
            
            val errorMessage = when {
                e.message?.contains("unauthenticated") == true -> "Vous devez √™tre connect√©"
                e.message?.contains("failed-precondition") == true -> "Aucun partenaire connect√©"
                e.message?.contains("permission-denied") == true -> "Permission refus√©e"
                else -> e.message ?: "Erreur de d√©connexion"
            }
            
            _state.value = _state.value.copy(
                errorMessage = errorMessage,
                isLoading = false
            )
            return@withContext false
        }
    }

    /**
     * R√©initialiser l'√©tat du service
     */
    fun resetState() {
        _state.value = PartnerCodeState()
        Log.d("PartnerCodeService", "üîÑ √âtat du service r√©initialis√©")
    }

    // R√©sultats de validation
    data class ValidationResult(
        val isValid: Boolean,
        val reason: String? = null,
        val message: String? = null
    ) {
        companion object {
            fun valid() = ValidationResult(isValid = true)
            fun invalid(reason: String, message: String) = ValidationResult(isValid = false, reason = reason, message = message)
            fun error(message: String) = ValidationResult(isValid = false, message = message)
        }
    }
}
