package com.love2loveapp.services

import android.content.Context
import android.util.Log
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

/**
 * Services simplifi√©s pour Love2Love
 */

// === Question Cache Manager ===
class QuestionCacheManager private constructor() {
    companion object {
        @JvmStatic
        val shared = QuestionCacheManager()
    }
    
    private val _isLoaded = MutableStateFlow(false)
    val isLoaded: StateFlow<Boolean> = _isLoaded.asStateFlow()
    
    fun preloadAllCategories() {
        Log.d("QuestionCacheManager", "üîÑ Pr√©chargement de toutes les cat√©gories")
        // Simulation du pr√©chargement
        _isLoaded.value = true
    }
    
    fun optimizeMemoryUsage() {
        Log.d("QuestionCacheManager", "üßπ Optimisation m√©moire")
    }
}

// === Performance Monitor ===
class PerformanceMonitor private constructor() {
    companion object {
        @JvmStatic
        val shared = PerformanceMonitor()
    }
    
    private var isMonitoring = false
    
    fun startMonitoring() {
        isMonitoring = true
        Log.d("PerformanceMonitor", "üìä D√©marrage monitoring performance")
    }
    
    fun stopMonitoring() {
        isMonitoring = false
        Log.d("PerformanceMonitor", "üìä Arr√™t monitoring performance")
    }
}

// === Favorites Service ===
class FavoritesService {
    private val _favorites = MutableStateFlow<List<String>>(emptyList())
    val favorites: StateFlow<List<String>> = _favorites.asStateFlow()
    
    fun addFavorite(questionId: String) {
        val current = _favorites.value.toMutableList()
        if (!current.contains(questionId)) {
            current.add(questionId)
            _favorites.value = current
            Log.d("FavoritesService", "‚≠ê Question ajout√©e aux favoris: $questionId")
        }
    }
    
    fun removeFavorite(questionId: String) {
        val current = _favorites.value.toMutableList()
        current.remove(questionId)
        _favorites.value = current
        Log.d("FavoritesService", "‚≠ê Question retir√©e des favoris: $questionId")
    }
}

// === Pack Progress Service Legacy (Compatibility) ===
class PackProgressServiceLegacy private constructor() {
    companion object {
        @JvmStatic
        val shared = PackProgressServiceLegacy()
    }
    
    private val _progress = MutableStateFlow<Map<String, Float>>(emptyMap())
    val progress: StateFlow<Map<String, Float>> = _progress.asStateFlow()
    
    fun updateProgress(categoryId: String, progress: Float) {
        val current = _progress.value.toMutableMap()
        current[categoryId] = progress
        _progress.value = current
        Log.d("PackProgressServiceLegacy", "üìà Progression mise √† jour pour $categoryId: ${(progress * 100).toInt()}%")
    }
}

// === Question Data Manager Legacy (Compatibility) ===
class QuestionDataManagerLegacy private constructor() {
    companion object {
        @JvmStatic
        val shared = QuestionDataManagerLegacy()
    }
    
    private val _isDataLoaded = MutableStateFlow(false)
    val isDataLoaded: StateFlow<Boolean> = _isDataLoaded.asStateFlow()
    
    suspend fun loadInitialData() {
        Log.d("QuestionDataManagerLegacy", "üìö Chargement donn√©es initiales")
        // Simulation chargement
        kotlinx.coroutines.delay(1000)
        _isDataLoaded.value = true
        Log.d("QuestionDataManagerLegacy", "‚úÖ Donn√©es initiales charg√©es")
    }
    
    fun preloadEssentialCategories() {
        Log.d("QuestionDataManagerLegacy", "‚ö° Pr√©chargement cat√©gories essentielles")
    }
}

// === Location Service ===
interface LocationService {
    fun startLocationUpdatesIfAuthorized()
    fun stopLocationUpdates()
}

class LocationServiceImpl(private val context: Context) : LocationService {
    override fun startLocationUpdatesIfAuthorized() {
        Log.d("LocationService", "üìç D√©marrage mises √† jour localisation")
    }
    
    override fun stopLocationUpdates() {
        Log.d("LocationService", "üìç Arr√™t mises √† jour localisation")
    }
}

// === Simple Freemium Manager Implementation ===
class SimpleFreemiumManager : com.love2loveapp.models.FreemiumManager {
    companion object {
        private const val TAG = "FreemiumManager"
        private const val FREE_PACKS_LIMIT = 2     // 2 packs gratuits (64 questions)
        private const val QUESTIONS_PER_PACK = 32  // 32 questions par pack
        private const val FREE_DAILY_QUESTION_DAYS = 3
        private const val FREE_DAILY_CHALLENGE_DAYS = 3  
        private const val FREE_JOURNAL_ENTRIES_LIMIT = 5
    }
    
    private val _showingSubscription = MutableStateFlow(false)
    override val showingSubscriptionFlow = _showingSubscription.asStateFlow()
    
    private val _blockedCategoryAttempt = MutableStateFlow<com.love2loveapp.models.QuestionCategory?>(null)
    val blockedCategoryAttempt: StateFlow<com.love2loveapp.models.QuestionCategory?> = _blockedCategoryAttempt.asStateFlow()
    
    override val showingSubscription: Boolean
        get() = _showingSubscription.value
    
    /**
     * G√®re le tap sur une cat√©gorie (√©quivalent iOS handleCategoryTap)
     */
    override fun handleCategoryTap(
        category: com.love2loveapp.models.QuestionCategory, 
        onSuccess: () -> Unit
    ) {
        Log.d(TAG, "üéØ Tap sur cat√©gorie: ${category.id}")
        
        // R√©cup√©rer l'√©tat d'abonnement actuel depuis AppState
        val currentUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        val isSubscribed = currentUser?.isSubscribed ?: false
        
        Log.d(TAG, "üîç √âtat abonnement: $isSubscribed (utilisateur: [USER_MASKED])")
        
        // 1. Utilisateur abonn√© ‚Üí Acc√®s illimit√©
        if (isSubscribed) {
            Log.d(TAG, "‚úÖ Utilisateur abonn√© - acc√®s accord√© √† ${category.id}")
            onSuccess()
            return
        }
        
        // 2. Cat√©gorie Premium + Non abonn√© ‚Üí Paywall
        if (category.isPremium) {
            Log.d(TAG, "üîí Cat√©gorie premium ${category.id} - affichage paywall")
            Log.d(TAG, "üîí AVANT: _blockedCategoryAttempt = ${_blockedCategoryAttempt.value?.id}")
            Log.d(TAG, "üîí AVANT: _showingSubscription = ${_showingSubscription.value}")
            
            _blockedCategoryAttempt.value = category
            _showingSubscription.value = true
            
            Log.d(TAG, "üîí APRES: _blockedCategoryAttempt = ${_blockedCategoryAttempt.value?.id}")
            Log.d(TAG, "üîí APRES: _showingSubscription = ${_showingSubscription.value}")
            Log.d(TAG, "‚úÖ StateFlow mis √† jour - paywall devrait s'afficher")
            
            // TODO: Analytics Firebase
            // Analytics.logEvent("paywall_affiche") { param("source", "freemium_limite") }
            
            return
        }
        
        // 3. Cat√©gorie gratuite ‚Üí Acc√®s autoris√© (limitation dans QuestionListView)
        Log.d(TAG, "üÜì Cat√©gorie gratuite ${category.id} - acc√®s accord√©")
        onSuccess()
    }
    
    /**
     * G√®re l'acc√®s √† une question sp√©cifique (√©quivalent iOS handleQuestionAccess)
     */
    override fun handleQuestionAccess(
        questionIndex: Int, 
        category: com.love2loveapp.models.QuestionCategory, 
        onSuccess: () -> Unit
    ) {
        Log.d(TAG, "üîç Acc√®s question ${questionIndex + 1} de ${category.id}")
        
        // R√©cup√©rer l'√©tat d'abonnement actuel depuis AppState
        val currentUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        val isSubscribed = currentUser?.isSubscribed ?: false
        
        // Utilisateur abonn√© ‚Üí Acc√®s illimit√©
        if (isSubscribed) {
            Log.d(TAG, "‚úÖ Utilisateur abonn√© - acc√®s question accord√©")
            onSuccess()
            return
        }
        
        // Cat√©gorie premium ‚Üí Paywall
        if (category.isPremium) {
            Log.d(TAG, "üîí Question premium - affichage paywall")
            _blockedCategoryAttempt.value = category
            _showingSubscription.value = true
            return
        }
        
        // Cat√©gorie gratuite - v√©rifier limite
        val maxFreeQuestions = getMaxFreeQuestions(category)
        if (questionIndex >= maxFreeQuestions) {
            Log.d(TAG, "üö´ Limite freemium atteinte (${questionIndex + 1} > $maxFreeQuestions)")
            _blockedCategoryAttempt.value = category
            _showingSubscription.value = true
            return
        }
        
        Log.d(TAG, "‚úÖ Question autoris√©e (${questionIndex + 1}/$maxFreeQuestions)")
        onSuccess()
    }
    
    /**
     * Obtient le nombre maximum de questions gratuites pour une cat√©gorie
     * √âquivalent iOS getMaxFreeQuestions(for: category)
     */
    override fun getMaxFreeQuestions(category: com.love2loveapp.models.QuestionCategory): Int {
        return when {
            category.isPremium -> 0  // Aucune question gratuite pour premium
            category.id == "en-couple" -> FREE_PACKS_LIMIT * QUESTIONS_PER_PACK  // 64 questions
            else -> Int.MAX_VALUE  // Autres cat√©gories gratuites (illimit√©es)
        }
    }
    
    override fun dismissSubscription() {
        Log.d(TAG, "üîí DISMISSAL PAYWALL:")
        Log.d(TAG, "üîí AVANT: _showingSubscription = ${_showingSubscription.value}")
        Log.d(TAG, "üîí AVANT: _blockedCategoryAttempt = ${_blockedCategoryAttempt.value?.id}")
        
        _showingSubscription.value = false
        _blockedCategoryAttempt.value = null
        
        Log.d(TAG, "üîí APRES: _showingSubscription = ${_showingSubscription.value}")
        Log.d(TAG, "üîí APRES: _blockedCategoryAttempt = ${_blockedCategoryAttempt.value?.id}")
        Log.d(TAG, "üí∞ √âcran abonnement ferm√©")
    }
    
    fun showSubscription() {
        _showingSubscription.value = true
        Log.d(TAG, "üí∞ √âcran abonnement affich√©")
    }
    
    /**
     * üìÖ V√©rification acc√®s questions quotidiennes (√©quivalent iOS canAccessDailyQuestion)
     */
    fun canAccessDailyQuestion(questionDay: Int): Boolean {
        val currentUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        val isSubscribed = currentUser?.isSubscribed ?: false
        
        if (isSubscribed) {
            return true
        }
        
        // Bloquer apr√®s le jour 3 pour les utilisateurs gratuits
        return questionDay <= 3 // FREE_DAILY_QUESTION_DAYS
    }
    
    /**
     * üéØ V√©rification acc√®s d√©fis quotidiens (√©quivalent iOS canAccessDailyChallenge)
     */
    fun canAccessDailyChallenge(challengeDay: Int): Boolean {
        val currentUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        val isSubscribed = currentUser?.isSubscribed ?: false
        
        if (isSubscribed) {
            return true
        }
        
        // üîë LOGIQUE FREEMIUM D√âFIS : Bloquer apr√®s le jour 3
        return challengeDay <= 3 // FREE_DAILY_CHALLENGE_DAYS (identique aux questions)
    }
    
    /**
     * üìù V√©rification acc√®s journal (√©quivalent iOS canAddJournalEntry)
     */
    fun canAddJournalEntry(currentEntriesCount: Int): Boolean {
        val currentUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        val isSubscribed = currentUser?.isSubscribed ?: false
        
        if (isSubscribed) {
            return true
        }
        
        return currentEntriesCount < FREE_JOURNAL_ENTRIES_LIMIT
    }
    
    /**
     * üìñ G√®re la cr√©ation d'entr√©e journal avec logique freemium (√©quivalent iOS handleJournalEntryCreation)
     */
    fun handleJournalEntryCreation(currentEntriesCount: Int, onSuccess: () -> Unit) {
        val currentUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        val isSubscribed = currentUser?.isSubscribed ?: false
        
        Log.d(TAG, "üìñ Gestion cr√©ation journal entry: entries=$currentEntriesCount, isSubscribed=$isSubscribed")
        
        if (isSubscribed) {
            Log.d(TAG, "üìñ Utilisateur premium - Cr√©ation journal autoris√©e")
            onSuccess()
            return
        }
        
        // üîë V√âRIFICATION FREEMIUM
        if (currentEntriesCount < FREE_JOURNAL_ENTRIES_LIMIT) {
            Log.d(TAG, "üìñ Journal entry ${currentEntriesCount + 1}/$FREE_JOURNAL_ENTRIES_LIMIT - Acc√®s gratuit")
            onSuccess()
        } else {
            Log.d(TAG, "üìñ Journal entry ${currentEntriesCount + 1} > limite - Paywall")
            showJournalEntryPaywall()
        }
    }
    
    private fun showJournalEntryPaywall() {
        _showingSubscription.value = true
        Log.d(TAG, "üìñ Affichage paywall pour entr√©e journal")
    }
    
    /**
     * üîç V√©rification d'acc√®s √† une question sp√©cifique (√©quivalent iOS canAccessQuestion)
     */
    fun canAccessQuestion(index: Int, category: com.love2loveapp.models.QuestionCategory): Boolean {
        val currentUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        val isSubscribed = currentUser?.isSubscribed ?: false
        
        // Si l'utilisateur est abonn√©, acc√®s illimit√©
        if (isSubscribed) {
            return true
        }
        
        // Si c'est une cat√©gorie premium, aucun acc√®s
        if (category.isPremium) {
            return false
        }
        
        // Pour la cat√©gorie "En couple" gratuite, limiter √† 2 packs (64 questions)
        if (category.id == "en-couple") {
            val maxFreeQuestions = FREE_PACKS_LIMIT * QUESTIONS_PER_PACK // 64
            return index < maxFreeQuestions
        }
        
        // Autres cat√©gories gratuites
        return true
    }
}
