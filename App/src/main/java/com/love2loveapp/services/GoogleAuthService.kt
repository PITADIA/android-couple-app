package com.love2loveapp.services

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.util.Log
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.State
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInAccount
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.ApiException
import com.google.android.gms.tasks.Task
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.GoogleAuthProvider
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await

/**
 * Service d'authentification Google pour remplacer Apple Sign-In
 * Adapt√© pour Android avec Firebase Auth et Google Sign-In
 */
class GoogleAuthService private constructor() {
    
    private val auth: FirebaseAuth = Firebase.auth
    private var googleSignInClient: GoogleSignInClient? = null
    
    // √âtats observables par Compose
    private val _isProcessingAuth = MutableStateFlow(false)
    val isProcessingAuth: StateFlow<Boolean> = _isProcessingAuth.asStateFlow()
    
    private val _isAuthenticated = MutableStateFlow(auth.currentUser != null)
    val isAuthenticated: StateFlow<Boolean> = _isAuthenticated.asStateFlow()
    
    private val _authError = MutableStateFlow<String?>(null)
    val authError: StateFlow<String?> = _authError.asStateFlow()
    
    private val _currentUser = MutableStateFlow(auth.currentUser)
    val currentUser = _currentUser.asStateFlow()
    
    companion object {
        val instance: GoogleAuthService by lazy { GoogleAuthService() }
        
        // Web Client ID g√©n√©r√© automatiquement par google-services.json
        // private const val WEB_CLIENT_ID = "YOUR_WEB_CLIENT_ID_FROM_FIREBASE_CONSOLE" // Remplac√© par getString
    }
    
    init {
        // Observer les changements d'√©tat d'authentification Firebase
        auth.addAuthStateListener { firebaseAuth ->
            val user = firebaseAuth.currentUser
            _isAuthenticated.value = user != null
            _currentUser.value = user
            Log.d("GoogleAuthService", "√âtat d'auth chang√©: ${if (user != null) "connect√©" else "d√©connect√©"}")
        }
    }
    
    /**
     * Initialise le client Google Sign-In
     * √Ä appeler depuis onCreate() de votre Activity
     */
    fun initialize(context: Context) {
        // R√©cup√©ration automatique du Web Client ID depuis google-services.json
        val resId = context.resources.getIdentifier("default_web_client_id", "string", context.packageName)
        if (resId == 0) {
            Log.w("GoogleAuthService", "‚ö†Ô∏è default_web_client_id introuvable, utilisation du fallback")
            val fallback = "200633504634-lac9rcnr96r84p100ndj16vlq7deubm9.apps.googleusercontent.com"
            initializeClient(context, fallback)
            return
        }
        val webClientId = context.getString(resId)
        
        Log.d("GoogleAuthService", "üîë Web Client ID: $webClientId")
        
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestIdToken(webClientId)
            .requestEmail()
            .requestProfile()
            .build()
            
        googleSignInClient = GoogleSignIn.getClient(context, gso)
        Log.d("GoogleAuthService", "Google Sign-In client initialis√©")
    }

    /** Helper utilis√© pour le fallback */
    private fun initializeClient(context: Context, clientId: String) {
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestIdToken(clientId)
            .requestEmail()
            .requestProfile()
            .build()

        googleSignInClient = GoogleSignIn.getClient(context, gso)
        Log.d("GoogleAuthService", "Google Sign-In client initialis√© (fallback)")
    }
    
    /**
     * Lance le processus de connexion Google
     * Retourne l'Intent pour startActivityForResult
     */
    fun getSignInIntent(): Intent? {
        val client = googleSignInClient
        if (client == null) {
            Log.e("GoogleAuthService", "Client Google Sign-In non initialis√©")
            _authError.value = "Service non initialis√©"
            return null
        }
        
        _isProcessingAuth.value = true
        _authError.value = null
        Log.d("GoogleAuthService", "üîê Lancement Google Sign-In")
        
        return client.signInIntent
    }
    
    /**
     * Traite le r√©sultat de l'activit√© Google Sign-In
     * √Ä appeler depuis onActivityResult
     */
    suspend fun handleSignInResult(data: Intent?): Boolean {
        return try {
            val task = GoogleSignIn.getSignedInAccountFromIntent(data)
            val account = task.getResult(ApiException::class.java)
            
            if (account != null) {
                firebaseAuthWithGoogle(account)
            } else {
                _isProcessingAuth.value = false
                _authError.value = "√âchec de la connexion Google"
                false
            }
        } catch (e: ApiException) {
            _isProcessingAuth.value = false
            Log.e("GoogleAuthService", "Erreur Google Sign-In: ${e.statusCode}", e)
            _authError.value = "Erreur de connexion: ${e.localizedMessage}"
            false
        }
    }
    
    /**
     * Authentifie avec Firebase en utilisant le compte Google
     */
    private suspend fun firebaseAuthWithGoogle(account: GoogleSignInAccount): Boolean {
        return try {
            Log.d("GoogleAuthService", "üî• Authentification Firebase avec Google")
            
            val credential = GoogleAuthProvider.getCredential(account.idToken, null)
            val result = auth.signInWithCredential(credential).await()
            
            _isProcessingAuth.value = false
            
            if (result.user != null) {
                Log.d("GoogleAuthService", "‚úÖ Authentification r√©ussie: [USER_MASKED]")
                // üõ°Ô∏è Activer imm√©diatement la protection anti-d√©connexion (avant tout acc√®s Firestore)
                com.love2loveapp.AppDelegate.userDataIntegrationService?.suppressAccountDeletionDetectionTemporarily()
                _authError.value = null
                
                // G√©rer nouveaux utilisateurs ET utilisateurs sans document Firestore
                if (result.additionalUserInfo?.isNewUser == true) {
                    Log.d("GoogleAuthService", "üìù Nouvel utilisateur d√©tect√©")
                    createPartialUserDocument(result.user!!)
                } else {
                    Log.d("GoogleAuthService", "üîÑ Utilisateur existant - v√©rification document Firestore")
                    verifyAndCreateDocumentIfNeeded(result.user!!)
                }
                
                true
            } else {
                Log.e("GoogleAuthService", "‚ùå Authentification Firebase √©chou√©e")
                _authError.value = "√âchec de l'authentification"
                false
            }
        } catch (e: Exception) {
            _isProcessingAuth.value = false
            Log.e("GoogleAuthService", "‚ùå Erreur Firebase Auth", e)
            _authError.value = "Erreur d'authentification: ${e.localizedMessage}"
            false
        }
    }
    
    /**
     * Cr√©e un document utilisateur partiel pour les nouveaux utilisateurs
     */
    private fun createPartialUserDocument(firebaseUser: com.google.firebase.auth.FirebaseUser) {
        Log.d("GoogleAuthService", "üî• Cr√©ation profil utilisateur vide (√©quivalent iOS)")
        
        // üõ°Ô∏è PROTECTION - D√©sactiver d√©tection suppression temporairement (selon rapport iOS)
        com.love2loveapp.AppDelegate.userDataIntegrationService?.suppressAccountDeletionDetectionTemporarily()
        
        // Donn√©es minimales pour nouvel utilisateur (selon document iOS)
        val userData = mapOf(
            "id" to java.util.UUID.randomUUID().toString(),
            "googleUserID" to firebaseUser.uid,
            "email" to (firebaseUser.email ?: ""),
            "name" to (firebaseUser.displayName ?: ""),
            "profileImageURL" to (firebaseUser.photoUrl?.toString() ?: ""),
            "createdAt" to com.google.firebase.firestore.FieldValue.serverTimestamp(),
            "lastLoginDate" to com.google.firebase.firestore.FieldValue.serverTimestamp(),
            "onboardingInProgress" to true,
            "isSubscribed" to false,
            "partnerCode" to "",
            "partnerId" to "",
            "relationshipGoals" to emptyList<String>(),
            "relationshipDuration" to "notInRelationship"
        )
        
        // Sauvegarde Firestore avec merge (√©quivalent iOS)
        com.google.firebase.firestore.FirebaseFirestore.getInstance()
            .collection("users")
            .document(firebaseUser.uid)
            .set(userData, com.google.firebase.firestore.SetOptions.merge())
            .addOnSuccessListener {
                Log.d("GoogleAuthService", "‚úÖ Profil utilisateur vide cr√©√© avec succ√®s")
            }
            .addOnFailureListener { error ->
                Log.e("GoogleAuthService", "‚ùå Erreur cr√©ation profil: ${error.message}")
                _authError.value = "Erreur cr√©ation profil: ${error.message}"
            }
    }
    
    /**
     * V√©rifie l'existence du document Firestore et le cr√©e si n√©cessaire
     * √âquivalent iOS: loadUserData() avec fallback vers createEmptyUserProfile()
     */
    private fun verifyAndCreateDocumentIfNeeded(firebaseUser: com.google.firebase.auth.FirebaseUser) {
        Log.d("GoogleAuthService", "üîç V√©rification existence document utilisateur: [USER_MASKED]")
        
        com.google.firebase.firestore.FirebaseFirestore.getInstance()
            .collection("users")
            .document(firebaseUser.uid)
            .get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    Log.d("GoogleAuthService", "‚úÖ Document utilisateur existant trouv√©")
                } else {
                    Log.w("GoogleAuthService", "‚ö†Ô∏è Document utilisateur inexistant - cr√©ation n√©cessaire")
                    Log.w("GoogleAuthService", "üö® Sc√©nario: Auth connect√© mais Firestore vide = Compte possiblement supprim√©")
                    
                    // üõ°Ô∏è PROTECTION - D√©sactiver d√©tection suppression avant cr√©ation (selon rapport iOS)
                    com.love2loveapp.AppDelegate.userDataIntegrationService?.suppressAccountDeletionDetectionTemporarily()
                    
                    createPartialUserDocument(firebaseUser)
                }
            }
            .addOnFailureListener { error ->
                Log.e("GoogleAuthService", "‚ùå Erreur v√©rification document: ${error.message}")
                Log.w("GoogleAuthService", "üîÑ Cr√©ation document par s√©curit√©")
                createPartialUserDocument(firebaseUser)
            }
    }
    
    /**
     * D√©connecte l'utilisateur
     */
    suspend fun signOut() {
        try {
            // D√©connexion Firebase
            auth.signOut()
            
            // D√©connexion Google Sign-In
            googleSignInClient?.signOut()?.await()
            
            Log.d("GoogleAuthService", "üö™ D√©connexion r√©ussie")
        } catch (e: Exception) {
            Log.e("GoogleAuthService", "Erreur lors de la d√©connexion", e)
        }
    }
    
    /**
     * V√©rifie si l'utilisateur est d√©j√† connect√©
     */
    fun checkExistingSignIn(context: Context): GoogleSignInAccount? {
        return GoogleSignIn.getLastSignedInAccount(context)
    }
    
    /**
     * Obtient le nom d'affichage de l'utilisateur Google (√©quivalent √† appleUserDisplayName)
     */
    fun getGoogleUserDisplayName(): String? {
        return auth.currentUser?.displayName
    }
    
    /**
     * Obtient l'email de l'utilisateur Google
     */
    fun getGoogleUserEmail(): String? {
        return auth.currentUser?.email
    }
    
    /**
     * Obtient l'URL de la photo de profil Google
     */
    fun getGoogleUserPhotoUrl(): String? {
        return auth.currentUser?.photoUrl?.toString()
    }
    
    /**
     * üë§ Authentification anonyme (compte invit√©)
     * Permet aux utilisateurs de cr√©er un compte temporaire sans Google Sign-In
     */
    suspend fun signInAnonymously(): Boolean {
        return try {
            Log.d("GoogleAuthService", "üë§ D√©but authentification anonyme")
            _isProcessingAuth.value = true
            _authError.value = null
            
            val result = auth.signInAnonymously().await()
            _isProcessingAuth.value = false
            
            if (result.user != null) {
                Log.d("GoogleAuthService", "‚úÖ Authentification anonyme r√©ussie: [USER_MASKED]")
                
                // üõ°Ô∏è Activer imm√©diatement la protection anti-d√©connexion
                com.love2loveapp.AppDelegate.userDataIntegrationService?.suppressAccountDeletionDetectionTemporarily()
                
                // Cr√©er un document utilisateur minimal pour les comptes anonymes
                createAnonymousUserDocument(result.user!!)
                
                true
            } else {
                Log.e("GoogleAuthService", "‚ùå Authentification anonyme √©chou√©e")
                _authError.value = "√âchec de la cr√©ation du compte invit√©"
                false
            }
        } catch (e: Exception) {
            _isProcessingAuth.value = false
            Log.e("GoogleAuthService", "‚ùå Erreur authentification anonyme", e)
            _authError.value = "Erreur cr√©ation compte invit√©: ${e.localizedMessage}"
            false
        }
    }
    
    /**
     * Cr√©e un document utilisateur minimal pour les comptes anonymes
     */
    private fun createAnonymousUserDocument(firebaseUser: com.google.firebase.auth.FirebaseUser) {
        Log.d("GoogleAuthService", "üë§ Cr√©ation profil utilisateur invit√©")
        
        // üõ°Ô∏è PROTECTION - D√©sactiver d√©tection suppression temporairement
        com.love2loveapp.AppDelegate.userDataIntegrationService?.suppressAccountDeletionDetectionTemporarily()
        
        // Donn√©es minimales pour utilisateur invit√©
        val userData = mapOf(
            "id" to java.util.UUID.randomUUID().toString(),
            "googleUserID" to firebaseUser.uid,
            "email" to "",  // Pas d'email pour les comptes anonymes
            "name" to "",  // üî• Nom vide pour utiliser le m√™me m√©canisme que Google Sign In
            "profileImageURL" to "",
            "createdAt" to com.google.firebase.firestore.FieldValue.serverTimestamp(),
            "lastLoginDate" to com.google.firebase.firestore.FieldValue.serverTimestamp(),
            "onboardingInProgress" to true,
            "isSubscribed" to false,
            "partnerCode" to "",
            "partnerId" to "",
            "relationshipGoals" to emptyList<String>(),
            "relationshipDuration" to "notInRelationship",
            "isAnonymous" to true  // üî• Marquer comme compte anonyme
        )
        
        // Sauvegarde Firestore avec merge
        com.google.firebase.firestore.FirebaseFirestore.getInstance()
            .collection("users")
            .document(firebaseUser.uid)
            .set(userData, com.google.firebase.firestore.SetOptions.merge())
            .addOnSuccessListener {
                Log.d("GoogleAuthService", "‚úÖ Profil utilisateur invit√© cr√©√© avec succ√®s")
            }
            .addOnFailureListener { error ->
                Log.e("GoogleAuthService", "‚ùå Erreur cr√©ation profil invit√©: ${error.message}")
                _authError.value = "Erreur cr√©ation profil invit√©: ${error.message}"
            }
    }
    
    /**
     * üîó Lie un compte anonyme existant avec Google Sign-In
     * Permet √† un utilisateur invit√© de sauvegarder son compte sans perdre ses donn√©es
     */
    suspend fun linkAnonymousWithGoogle(): Boolean {
        return try {
            val currentUser = auth.currentUser
            if (currentUser?.isAnonymous != true) {
                Log.w("GoogleAuthService", "‚ö†Ô∏è Tentative de liaison sur compte non-anonyme")
                return false
            }
            
            Log.d("GoogleAuthService", "üîó D√©but liaison compte anonyme avec Google")
            _isProcessingAuth.value = true
            _authError.value = null
            
            // Obtenir le token Google via le flow standard
            val googleSignInClient = this.googleSignInClient ?: return false
            val signInTask = googleSignInClient.silentSignIn()
            
            val account = if (signInTask.isSuccessful) {
                signInTask.result
            } else {
                // Si silent sign-in √©choue, il faut un flow interactif
                Log.w("GoogleAuthService", "‚ö†Ô∏è Liaison n√©cessite un flow interactif Google")
                _isProcessingAuth.value = false
                return false
            }
            
            // Cr√©er les credentials Google
            val credential = GoogleAuthProvider.getCredential(account.idToken, null)
            
            // Lier le compte anonyme avec Google
            val result = currentUser.linkWithCredential(credential).await()
            _isProcessingAuth.value = false
            
            if (result.user != null) {
                Log.d("GoogleAuthService", "‚úÖ Liaison r√©ussie - Compte anonyme ‚Üí Google")
                Log.d("GoogleAuthService", "üéØ UID conserv√©: [USER_MASKED]")
                Log.d("GoogleAuthService", "üìß Email ajout√©: [EMAIL_MASKED]")
                
                // Mettre √† jour le document Firestore pour marquer comme non-anonyme
                updateUserDocumentAfterLinking(result.user!!)
                
                true
            } else {
                Log.e("GoogleAuthService", "‚ùå Liaison √©chou√©e")
                _authError.value = "√âchec de la liaison avec Google"
                false
            }
            
        } catch (e: Exception) {
            _isProcessingAuth.value = false
            Log.e("GoogleAuthService", "‚ùå Erreur liaison compte anonyme", e)
            _authError.value = "Erreur liaison Google: ${e.localizedMessage}"
            false
        }
    }
    
    /**
     * Met √† jour le document Firestore apr√®s liaison pour marquer comme non-anonyme
     */
    private fun updateUserDocumentAfterLinking(firebaseUser: com.google.firebase.auth.FirebaseUser) {
        val updates = mapOf(
            "isAnonymous" to false,
            "email" to (firebaseUser.email ?: ""),
            "name" to (firebaseUser.displayName ?: "Utilisateur Invit√©"),
            "profileImageURL" to (firebaseUser.photoUrl?.toString() ?: ""),
            "lastLoginDate" to com.google.firebase.firestore.FieldValue.serverTimestamp()
        )
        
        com.google.firebase.firestore.FirebaseFirestore.getInstance()
            .collection("users")
            .document(firebaseUser.uid)
            .update(updates)
            .addOnSuccessListener {
                Log.d("GoogleAuthService", "‚úÖ Document utilisateur mis √† jour apr√®s liaison")
            }
            .addOnFailureListener { error ->
                Log.e("GoogleAuthService", "‚ùå Erreur mise √† jour apr√®s liaison: ${error.message}")
            }
    }
    
    /**
     * Efface les erreurs d'authentification
     */
    fun clearError() {
        _authError.value = null
    }
    
    /**
     * R√©authentifie l'utilisateur actuel pour les op√©rations sensibles
     * Requis pour la suppression de compte selon Firebase
     */
    suspend fun reauthenticate(): Boolean {
        return try {
            val currentUser = auth.currentUser ?: return false
            
            Log.d("GoogleAuthService", "üîÑ R√©authentification pour op√©ration sensible")
            
            // Obtenir le dernier compte Google connect√©
            val lastSignedInAccount = GoogleSignIn.getLastSignedInAccount(
                googleSignInClient?.applicationContext ?: return false
            )
            
            if (lastSignedInAccount?.idToken != null) {
                // Cr√©er les credentials avec le token existant
                val credential = GoogleAuthProvider.getCredential(lastSignedInAccount.idToken, null)
                
                // R√©authentifier avec Firebase
                currentUser.reauthenticate(credential).await()
                
                Log.d("GoogleAuthService", "‚úÖ R√©authentification r√©ussie")
                true
            } else {
                Log.w("GoogleAuthService", "‚ö†Ô∏è Token Google non disponible pour r√©authentification")
                false
            }
        } catch (e: Exception) {
            Log.e("GoogleAuthService", "‚ùå Erreur r√©authentification", e)
            _authError.value = "R√©authentification requise: ${e.localizedMessage}"
            false
        }
    }
}

/**
 * Extension pour faciliter l'utilisation dans les Composables
 */
@androidx.compose.runtime.Composable
fun rememberGoogleAuthService(): GoogleAuthService {
    return GoogleAuthService.instance
}
