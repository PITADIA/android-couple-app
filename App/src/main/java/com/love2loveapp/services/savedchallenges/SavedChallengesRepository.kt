package com.love2loveapp.services.savedchallenges

import android.content.Context
import android.util.Log
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import com.google.firebase.firestore.Query
import com.google.firebase.functions.FirebaseFunctions
import com.love2loveapp.models.DailyChallenge
import com.love2loveapp.models.SavedChallenge
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import java.util.*

/**
 * üîñ SavedChallengesRepository - Gestion D√©fis Sauvegard√©s
 * √âquivalent iOS SavedChallengesService
 * 
 * G√®re la sauvegarde locale et Firebase des d√©fis pr√©f√©r√©s.
 * Permet aux couples de cr√©er une collection partag√©e de d√©fis.
 */
class SavedChallengesRepository private constructor(
    private val context: Context
) {
    
    companion object {
        private const val TAG = "SavedChallengesRepo"
        private const val COLLECTION_SAVED_CHALLENGES = "savedChallenges"
        
        @Volatile
        private var INSTANCE: SavedChallengesRepository? = null
        
        fun getInstance(context: Context): SavedChallengesRepository {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: SavedChallengesRepository(context.applicationContext).also { INSTANCE = it }
            }
        }
    }
    
    private val firestore = FirebaseFirestore.getInstance()
    private val functions = FirebaseFunctions.getInstance()
    private val auth = FirebaseAuth.getInstance()
    
    private val repositoryScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)
    
    // üìä √âTATS OBSERVABLES
    private val _savedChallenges = MutableStateFlow<List<SavedChallenge>>(emptyList())
    val savedChallenges: StateFlow<List<SavedChallenge>> = _savedChallenges.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()
    
    // üîÑ LISTENERS FIRESTORE
    private var savedChallengesListener: ListenerRegistration? = null
    
    /**
     * üöÄ Initialisation pour un utilisateur
     */
    fun initializeForUser(userId: String) {
        Log.d(TAG, "üöÄ Initialisation SavedChallengesRepository pour utilisateur: $userId")
        
        repositoryScope.launch {
            try {
                _isLoading.value = true
                _errorMessage.value = null
                
                setupRealtimeListener(userId)
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur initialisation SavedChallengesRepository: ${e.message}")
                _errorMessage.value = "Erreur lors du chargement des d√©fis sauvegard√©s"
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    /**
     * üëÇ Configuration listener temps r√©el Firestore
     */
    private fun setupRealtimeListener(userId: String) {
        Log.d(TAG, "üëÇ Configuration listener d√©fis sauvegard√©s pour: $userId")
        
        // Stopper l'ancien listener
        savedChallengesListener?.remove()
        
        // üîë REQU√äTE PERSONNELLE comme iOS - D√©fis sauvegard√©s ne sont PAS partag√©s !
        savedChallengesListener = firestore.collection(COLLECTION_SAVED_CHALLENGES)
            .whereEqualTo("userId", userId)
            .orderBy("savedAt", Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener d√©fis sauvegard√©s: ${error.message}")
                    _errorMessage.value = "Erreur synchronisation d√©fis sauvegard√©s"
                    return@addSnapshotListener
                }
                
                if (snapshot != null) {
                    if (snapshot.documents.isNotEmpty()) {
                        Log.d(TAG, "üì• ${snapshot.documents.size} d√©fis sauvegard√©s synchronis√©s")
                    }
                    
                    val challenges = snapshot.documents.mapNotNull { doc ->
                        try {
                            val data = doc.data ?: return@mapNotNull null
                            
                            SavedChallenge(
                                id = doc.id,
                                challengeKey = data["challengeKey"] as? String ?: "",
                                challengeDay = (data["challengeDay"] as? Number)?.toInt() ?: 0,
                                challengeText = data["challengeText"] as? String ?: "",
                                emoji = data["emoji"] as? String ?: "",
                                userId = data["userId"] as? String ?: "",
                                userName = data["userName"] as? String ?: "",
                                savedAt = data["savedAt"] as? Timestamp ?: Timestamp.now()
                            )
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå Erreur parsing d√©fi sauvegard√© ${doc.id}: ${e.message}")
                            null
                        }
                    }
                    
                    _savedChallenges.value = challenges
                    _errorMessage.value = null
                }
            }
    }
    
    /**
     * üíæ Sauvegarder un d√©fi (syst√®me bookmark local)
     */
    suspend fun saveChallenge(
        challenge: DailyChallenge,
        challengeText: String,
        userId: String,
        userName: String
    ): Result<Unit> {
        return try {
            Log.d(TAG, "üíæ Sauvegarde d√©fi: ${challenge.challengeKey}")
            
            // V√©rifier si d√©j√† sauvegard√©
            if (isChallengeAlreadySaved(challenge.challengeKey, userId)) {
                Log.w(TAG, "‚ö†Ô∏è D√©fi ${challenge.challengeKey} d√©j√† sauvegard√© par $userId")
                return Result.failure(Exception("Ce d√©fi est d√©j√† dans vos favoris"))
            }
            
            // üîë CR√âER DONN√âES PERSONNELLES (comme iOS) - Juste userId, pas partnerIds !
            val challengeData = mapOf(
                "challengeKey" to challenge.challengeKey,
                "challengeDay" to challenge.challengeDay,
                "challengeText" to challengeText,
                "emoji" to getChallengeEmoji(challenge.challengeDay),
                "userId" to userId,
                "userName" to userName,
                "savedAt" to Timestamp.now(),
                "createdAt" to Timestamp.now(),
                "updatedAt" to Timestamp.now()
            )
            
            // Sauvegarder dans Firestore avec structure iOS
            val documentRef = firestore.collection(COLLECTION_SAVED_CHALLENGES).document()
            documentRef.set(challengeData).await()
            
            Log.d(TAG, "‚úÖ D√©fi sauvegard√© avec succ√®s: ${documentRef.id}")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur sauvegarde d√©fi: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * üóëÔ∏è Supprimer un d√©fi sauvegard√©
     */
    suspend fun removeSavedChallenge(challengeId: String, userId: String): Result<Unit> {
        return try {
            Log.d(TAG, "üóëÔ∏è Suppression d√©fi sauvegard√©: $challengeId par $userId")
            
            // Trouver le document √† supprimer
            val challenge = _savedChallenges.value.find { it.id == challengeId }
            if (challenge == null) {
                return Result.failure(Exception("D√©fi sauvegard√© introuvable"))
            }
            
            // V√©rifier les permissions (syst√®me personnel)
            if (challenge.userId != userId) {
                return Result.failure(Exception("Vous ne pouvez supprimer que vos propres d√©fis sauvegard√©s"))
            }
            
            // Supprimer de Firestore
            firestore.collection(COLLECTION_SAVED_CHALLENGES)
                .document(challengeId)
                .delete()
                .await()
            
            Log.d(TAG, "‚úÖ D√©fi sauvegard√© supprim√© avec succ√®s")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur suppression d√©fi sauvegard√©: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * üîç V√©rifier si un d√©fi est d√©j√† sauvegard√© (syst√®me personnel iOS)
     */
    fun isChallengeAlreadySaved(challengeKey: String, userId: String): Boolean {
        return _savedChallenges.value.any { 
            it.challengeKey == challengeKey && it.userId == userId
        }
    }
    
    /**
     * üîÑ Synchronisation optionnelle (les d√©fis sauvegard√©s sont principalement locaux)
     * Identique iOS : pas de synchronisation automatique, juste bookmarks personnels
     */
    suspend fun syncPartnerSavedChallenges(): Result<Unit> {
        return try {
            Log.d(TAG, "üîÑ Les d√©fis sauvegard√©s sont des bookmarks locaux")
            Log.d(TAG, "‚úÖ Pas de synchronisation n√©cessaire (comme iOS)")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * üìä Obtenir le nombre total de d√©fis sauvegard√©s
     */
    fun getSavedChallengesCount(): Int {
        return _savedChallenges.value.size
    }
    
    /**
     * üé® Emoji selon le jour du d√©fi
     */
    private fun getChallengeEmoji(challengeDay: Int): String {
        return when (challengeDay % 10) {
            1 -> "üíå" // Messages, communication
            2 -> "üç≥" // Cuisine, activit√©s domestiques
            3 -> "üéÅ" // Surprises, sorties
            4 -> "üíï" // Amour, affection
            5 -> "üåü" // Exp√©riences, d√©couvertes
            6 -> "üéØ" // Objectifs, d√©fis
            7 -> "üè°" // Maison, cocooning
            8 -> "üåà" // Cr√©ativit√©, couleurs
            9 -> "‚≠ê" // Excellence, r√©ussite
            0 -> "üé™" // Fun, divertissement
            else -> "üéØ" // Default
        }
    }
    
    /**
     * üîß Nettoyage ressources
     */
    fun cleanup() {
        Log.d(TAG, "üîß Nettoyage SavedChallengesRepository")
        
        savedChallengesListener?.remove()
        savedChallengesListener = null
        
        _savedChallenges.value = emptyList()
        _errorMessage.value = null
        _isLoading.value = false
    }
    
    /**
     * üêõ Debug - Afficher informations d√©fis sauvegard√©s
     */
    fun debugSavedChallenges() {
        val challenges = _savedChallenges.value
        Log.d(TAG, "üìä DEBUG - ${challenges.size} d√©fis sauvegard√©s:")
        challenges.forEach { challenge ->
            Log.d(TAG, "  - ${challenge.challengeKey} (Jour ${challenge.challengeDay}) par ${challenge.userName}")
        }
    }
}
