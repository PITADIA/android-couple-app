package com.love2loveapp.services.location

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.location.Location
import android.os.Looper
import android.util.Log
import androidx.core.app.ActivityCompat
import com.google.android.gms.location.*
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.love2loveapp.models.UserLocation
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

/**
 * üìç LocationSyncService - Synchronisation localisation utilisateur avec Firebase
 * 
 * Fonctionnalit√©s:
 * - R√©cup√©ration localisation GPS via FusedLocationProvider
 * - Sauvegarde automatique dans Firestore
 * - Gestion permissions et erreurs
 * - Cache intelligent anti-spam
 */
class LocationSyncService private constructor(private val context: Context) {
    
    companion object {
        private const val TAG = "LocationSyncService"
        private const val USERS_COLLECTION = "users"
        private const val MIN_UPDATE_INTERVAL_MS = 30_000L // 30 secondes minimum entre updates
        private const val MIN_DISTANCE_METERS = 50f // 50 m√®tres minimum
        
        @Volatile
        private var instance: LocationSyncService? = null
        
        fun getInstance(context: Context): LocationSyncService {
            return instance ?: synchronized(this) {
                instance ?: LocationSyncService(context.applicationContext).also { instance = it }
            }
        }
    }
    
    // Services
    private val auth = FirebaseAuth.getInstance()
    private val db = FirebaseFirestore.getInstance()
    private val fusedLocationClient = LocationServices.getFusedLocationProviderClient(context)
    private val serviceScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
    
    // √âtat
    private val _currentLocation = MutableStateFlow<UserLocation?>(null)
    val currentLocation: StateFlow<UserLocation?> = _currentLocation.asStateFlow()
    
    private val _isLocationEnabled = MutableStateFlow(false)
    val isLocationEnabled: StateFlow<Boolean> = _isLocationEnabled.asStateFlow()
    
    // Location callback
    private var locationCallback: LocationCallback? = null
    private var lastUpdateTime = 0L
    private var lastSavedLocation: Location? = null
    
    /**
     * üöÄ D√©marre la synchronisation localisation
     */
    fun startLocationSync() {
        Log.d(TAG, "üîÑ TENTATIVE d√©marrage LocationSync...")
        Log.d(TAG, "  - Auth √©tat: ${if (auth.currentUser != null) "CONNECT√â" else "NON CONNECT√â"}")
        Log.d(TAG, "  - Permission: ${if (hasLocationPermission()) "ACCORD√âE" else "REFUS√âE"}")
        
        val currentUserId = auth.currentUser?.uid
        if (currentUserId == null) {
            Log.w(TAG, "‚ö†Ô∏è PROBL√àME: Utilisateur non connect√©, tentative avec listener Auth...")
            
            // üÜï SOLUTION: √âcouter l'authentification Firebase
            startAuthListener()
            return
        }
        
        if (!hasLocationPermission()) {
            Log.w(TAG, "‚ö†Ô∏è Permission localisation non accord√©e")
            _isLocationEnabled.value = false
            return
        }
        
        // Utilisateur connect√© et permissions OK - d√©marrer imm√©diatement
        Log.d(TAG, "‚úÖ Utilisateur D√âJ√Ä connect√© - d√©marrage imm√©diat")
        startLocationSyncWithAuth(currentUserId)
    }
    
    /**
     * üìç Traite une nouvelle localisation
     */
    private fun handleLocationUpdate(location: Location, userId: String) {
        val now = System.currentTimeMillis()
        
        Log.d(TAG, "üÜï NOUVELLE LOCALISATION RE√áUE:")
        Log.d(TAG, "  - userId: $userId")
        Log.d(TAG, "  - latitude: ${location.latitude}")
        Log.d(TAG, "  - longitude: ${location.longitude}")
        Log.d(TAG, "  - pr√©cision: ${location.accuracy}m")
        
        // √âviter le spam d'updates
        if (shouldSkipLocationUpdate(location, now)) {
            Log.d(TAG, "  ‚è≠Ô∏è Update ignor√©e (rate limiting ou distance insuffisante)")
            return
        }
        
        val userLocation = UserLocation(
            latitude = location.latitude,
            longitude = location.longitude,
            address = null, // TODO: Geocoding si n√©cessaire
            city = null,
            country = null,
            lastUpdated = now
        )
        
        Log.d(TAG, "  ‚úÖ UserLocation cr√©√©: ${userLocation.displayName}")
        
        // Mettre √† jour le StateFlow local
        _currentLocation.value = userLocation
        lastUpdateTime = now
        lastSavedLocation = location
        
        Log.d(TAG, "üìç Nouvelle localisation: ${location.latitude}, ${location.longitude}")
        
        // Sauvegarder dans Firestore
        saveLocationToFirestore(userLocation, userId)
    }
    
    /**
     * üíæ Sauvegarde la localisation dans Firestore
     */
    private fun saveLocationToFirestore(userLocation: UserLocation, userId: String) {
        Log.d(TAG, "üíæ SAUVEGARDE FIRESTORE:")
        Log.d(TAG, "  - userId: $userId")
        Log.d(TAG, "  - userLocation: ${userLocation.displayName}")
        
        serviceScope.launch {
            try {
                val locationData = mapOf(
                    "latitude" to userLocation.latitude,
                    "longitude" to userLocation.longitude,
                    "address" to userLocation.address,
                    "city" to userLocation.city,
                    "country" to userLocation.country,
                    "lastUpdated" to userLocation.lastUpdated
                )
                
                Log.d(TAG, "  üì§ Envoi vers Firestore en cours...")
                
                db.collection(USERS_COLLECTION)
                    .document(userId)
                    .update("currentLocation", locationData)
                    .addOnSuccessListener {
                        Log.d(TAG, "‚úÖ Localisation sauvegard√©e dans Firestore")
                    }
                    .addOnFailureListener { e ->
                        Log.e(TAG, "‚ùå Erreur sauvegarde localisation: ${e.message}")
                    }
                    
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Exception sauvegarde localisation: ${e.message}", e)
            }
        }
    }
    
    /**
     * ‚ö° D√©termine si on doit ignorer cette update de localisation
     */
    private fun shouldSkipLocationUpdate(location: Location, now: Long): Boolean {
        // Temps minimum √©coul√©
        if (now - lastUpdateTime < MIN_UPDATE_INTERVAL_MS) {
            return true
        }
        
        // Distance minimum parcourue
        lastSavedLocation?.let { lastLoc ->
            val distance = location.distanceTo(lastLoc)
            if (distance < MIN_DISTANCE_METERS) {
                return true
            }
        }
        
        return false
    }
    
    /**
     * üîê V√©rifie les permissions localisation
     */
    private fun hasLocationPermission(): Boolean {
        return ActivityCompat.checkSelfPermission(
            context,
            Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(
            context,
            Manifest.permission.ACCESS_COARSE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED
    }
    
    /**
     * ‚èπÔ∏è Arr√™te la synchronisation localisation
     */
    fun stopLocationSync() {
        Log.d(TAG, "‚èπÔ∏è Arr√™t synchronisation localisation")
        
        locationCallback?.let { callback ->
            fusedLocationClient.removeLocationUpdates(callback)
        }
        locationCallback = null
        _isLocationEnabled.value = false
    }
    
    /**
     * üìç Force une update localisation imm√©diate
     */
    fun requestImmediateLocationUpdate() {
        if (!hasLocationPermission()) {
            Log.w(TAG, "‚ö†Ô∏è Permission localisation n√©cessaire")
            return
        }
        
        val currentUserId = auth.currentUser?.uid ?: return
        
        try {
            if (ActivityCompat.checkSelfPermission(
                    context,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                    context,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                return
            }
            
            fusedLocationClient.lastLocation.addOnSuccessListener { location ->
                location?.let { 
                    handleLocationUpdate(it, currentUserId)
                }
            }
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå Erreur r√©cup√©ration localisation imm√©diate: ${e.message}")
        }
    }
    
    // Listener Firebase Auth pour d√©marrer le service quand l'utilisateur se connecte
    private var authListener: com.google.firebase.auth.FirebaseAuth.AuthStateListener? = null
    
    /**
     * üîê D√©marre l'√©coute de l'authentification Firebase
     */
    private fun startAuthListener() {
        Log.d(TAG, "üîê D√âMARRAGE listener Firebase Auth...")
        
        if (authListener == null) {
            authListener = com.google.firebase.auth.FirebaseAuth.AuthStateListener { firebaseAuth ->
                val user = firebaseAuth.currentUser
                
                if (user != null) {
                    Log.d(TAG, "‚úÖ AUTH LISTENER: Utilisateur connect√© d√©tect√©: ${user.uid}")
                    Log.d(TAG, "üöÄ RELANCE LocationSync maintenant que l'auth est OK...")
                    
                    // Arr√™ter le listener et relancer le service
                    stopAuthListener()
                    
                    // Petite attente pour √™tre s√ªr que l'auth est stable
                    serviceScope.launch {
                        kotlinx.coroutines.delay(500) // 500ms de s√©curit√©
                        startLocationSyncWithAuth(user.uid)
                    }
                } else {
                    Log.d(TAG, "‚ùå AUTH LISTENER: Aucun utilisateur connect√©")
                }
            }
            
            auth.addAuthStateListener(authListener!!)
            Log.d(TAG, "üëÇ Firebase Auth listener ajout√©")
        }
    }
    
    /**
     * üõë Arr√™te l'√©coute de l'authentification Firebase
     */
    private fun stopAuthListener() {
        authListener?.let { listener ->
            auth.removeAuthStateListener(listener)
            authListener = null
            Log.d(TAG, "üõë Firebase Auth listener supprim√©")
        }
    }
    
    /**
     * üöÄ D√©marre la synchronisation avec utilisateur authentifi√©
     */
    private fun startLocationSyncWithAuth(userId: String) {
        Log.d(TAG, "üöÄ D√âMARRAGE AVEC AUTH: $userId")
        
        if (!hasLocationPermission()) {
            Log.w(TAG, "‚ö†Ô∏è Permission localisation toujours non accord√©e")
            _isLocationEnabled.value = false
            return
        }
        
        Log.d(TAG, "‚úÖ Permissions OK - D√©marrage effectif de la sync localisation")
        
        val locationRequest = LocationRequest.create().apply {
            interval = 60000 // 1 minute
            fastestInterval = MIN_UPDATE_INTERVAL_MS
            smallestDisplacement = MIN_DISTANCE_METERS
            priority = LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY
        }
        
        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                locationResult.lastLocation?.let { location ->
                    handleLocationUpdate(location, userId)
                }
            }
            
            override fun onLocationAvailability(locationAvailability: LocationAvailability) {
                _isLocationEnabled.value = locationAvailability.isLocationAvailable
                Log.d(TAG, "üìç Disponibilit√© localisation: ${locationAvailability.isLocationAvailable}")
            }
        }
        
        try {
            if (ActivityCompat.checkSelfPermission(
                    context,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                    context,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                Log.e(TAG, "‚ùå Permissions localisation manquantes au final")
                return
            }
            
            fusedLocationClient.requestLocationUpdates(
                locationRequest,
                locationCallback!!,
                Looper.getMainLooper()
            )
            
            // R√©cup√©rer localisation actuelle imm√©diatement
            fusedLocationClient.lastLocation.addOnSuccessListener { location ->
                location?.let { 
                    handleLocationUpdate(it, userId)
                }
            }
            
            _isLocationEnabled.value = true
            Log.d(TAG, "‚úÖ Synchronisation localisation EFFECTIVEMENT d√©marr√©e!")
            
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå Erreur permissions localisation: ${e.message}")
            _isLocationEnabled.value = false
        }
    }
    
    /**
     * üßπ Nettoyage des ressources
     */
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage LocationSyncService")
        stopAuthListener() // ‚Üê üÜï Arr√™ter le listener auth aussi
        stopLocationSync()
        serviceScope.cancel()
    }
}
