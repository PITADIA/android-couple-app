package com.love2loveapp.services.dailychallenge

import android.content.Context
import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import com.google.firebase.firestore.Query
import com.google.firebase.functions.FirebaseFunctions
import com.love2loveapp.models.DailyChallenge
import com.love2loveapp.models.DailyChallengeSettings
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import java.text.SimpleDateFormat
import java.util.*

/**
 * üéØ DailyChallengeRepository - Service Principal D√©fis du Jour Android
 * √âquivalent iOS DailyChallengeService.swift
 * 
 * Fonctionnalit√©s principales :
 * - G√©n√©ration d√©fis quotidiens via Cloud Functions
 * - Syst√®me completion temps r√©el avec Firestore
 * - Gestion freemium (3 jours gratuits)
 * - Compatibilit√© iOS ‚Üî Android
 * - Cache et performance optimis√©s
 */
class DailyChallengeRepository private constructor(
    private val context: Context,
    private val firestore: FirebaseFirestore,
    private val functions: FirebaseFunctions,
    private val auth: FirebaseAuth
) {

    companion object {
        private const val TAG = "DailyChallengeRepository"
        private const val COLLECTION_DAILY_CHALLENGES = "dailyChallenges"
        private const val COLLECTION_SETTINGS = "dailyChallengeSettings"

        @Volatile
        private var INSTANCE: DailyChallengeRepository? = null

        fun getInstance(context: Context): DailyChallengeRepository {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: DailyChallengeRepository(
                    context = context.applicationContext,
                    firestore = FirebaseFirestore.getInstance(),
                    functions = FirebaseFunctions.getInstance(),
                    auth = FirebaseAuth.getInstance()
                ).also { INSTANCE = it }
            }
        }
    }

    // üî• √âTAT GLOBAL DU SERVICE
    private val _currentChallenge = MutableStateFlow<DailyChallenge?>(null)
    val currentChallenge: StateFlow<DailyChallenge?> = _currentChallenge.asStateFlow()

    private val _challengeHistory = MutableStateFlow<List<DailyChallenge>>(emptyList())
    val challengeHistory: StateFlow<List<DailyChallenge>> = _challengeHistory.asStateFlow()

    private val _currentSettings = MutableStateFlow<DailyChallengeSettings?>(null)
    val currentSettings: StateFlow<DailyChallengeSettings?> = _currentSettings.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()

    private val _hasSeenIntro = MutableStateFlow(false)
    val hasSeenIntro: StateFlow<Boolean> = _hasSeenIntro.asStateFlow()

    // üîß GESTION LISTENERS FIRESTORE
    private var challengeListener: ListenerRegistration? = null
    private var settingsListener: ListenerRegistration? = null

    // üìä DONN√âES CACHED
    private var currentCoupleId: String? = null
    private var currentUserId: String? = null

    // MARK: - Initialisation et Configuration

    /**
     * üöÄ Initialisation pour un couple donn√©
     * Point d'entr√©e principal du service
     * 
     * ‚úÖ STRAT√âGIE CACHE-FIRST (comme DailyQuestionRepository) :
     * 1. Afficher imm√©diatement les donn√©es disponibles
     * 2. Configurer listeners temps r√©el 
     * 3. G√©n√©rer d√©fi en arri√®re-plan sans bloquer l'UI
     */
    suspend fun initializeForCouple(coupleId: String) {
        Log.d(TAG, "üöÄ Initialisation d√©fis pour couple: $coupleId")
        
        try {
            _errorMessage.value = null

            this.currentCoupleId = coupleId
            this.currentUserId = auth.currentUser?.uid

            if (currentUserId == null) {
                throw Exception("Utilisateur non authentifi√©")
            }

            // ‚úÖ AFFICHAGE IMM√âDIAT - Pas de loading qui bloque
            Log.d(TAG, "‚ö° Cache-first: Configuration listeners sans bloquer UI")

            // üîë 1. CONFIGURER LISTENERS TEMPS R√âEL
            setupRealtimeListeners(coupleId)

            // ‚úÖ ARR√äT LOADING APR√àS LISTENERS (CACHE-FIRST STRATEGY)
            _isLoading.value = false
            Log.d(TAG, "‚ö° Loading arr√™t√© - Pr√™t pour affichage imm√©diat !")

            // üîë 2. TRAITEMENT ARRI√àRE-PLAN (non bloquant)
            
            // üîë 3. CHARGER STATUS INTRO
            loadIntroStatus()

            // üîë 4. CHARGER/CR√âER SETTINGS EN ARRI√àRE-PLAN
            loadOrCreateSettings(coupleId)

            // üîë 5. G√âN√âRER D√âFI D'AUJOURD'HUI EN ARRI√àRE-PLAN
            generateTodayChallengeIfNeeded(coupleId)

            Log.d(TAG, "‚úÖ Initialisation d√©fis termin√©e pour couple: $coupleId")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur initialisation d√©fis: ${e.message}")
            _errorMessage.value = "Erreur lors de l'initialisation: ${e.message}"
            _isLoading.value = false
        }
    }

    // MARK: - Real-time Listeners

    /**
     * üî• Configuration des listeners Firestore temps r√©el
     * Compatible avec l'architecture iOS existante
     */
    private fun setupRealtimeListeners(coupleId: String) {
        Log.d(TAG, "üî• Configuration listeners temps r√©el d√©fis pour couple: $coupleId")

        // Nettoyer anciens listeners
        cleanup()

        // üîë LISTENER D√âFIS
        challengeListener = firestore.collection(COLLECTION_DAILY_CHALLENGES)
            .whereEqualTo("coupleId", coupleId)
            .orderBy("challengeDay", Query.Direction.ASCENDING)
            .limit(20)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener d√©fis: ${error.message}")
                    _errorMessage.value = "Erreur de synchronisation: ${error.message}"
                    return@addSnapshotListener
                }

                Log.d(TAG, "üì• Mise √† jour d√©fis: ${snapshot?.documents?.size} documents")

                val challenges = snapshot?.documents?.mapNotNull { doc ->
                    try {
                        DailyChallenge.fromFirestore(doc)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur parsing d√©fi: ${e.message}")
                        null
                    }
                } ?: emptyList()

                // üîç Trouver d√©fi d'aujourd'hui
                val today = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
                val todayChallenge = challenges.find { challenge ->
                    val challengeDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(challenge.scheduledDate.toDate())
                    challengeDate == today
                }

                _currentChallenge.value = todayChallenge
                _challengeHistory.value = challenges

                // ‚úÖ ARR√äT LOADING - DONN√âES PR√äTES POUR AFFICHAGE
                if (_isLoading.value) {
                    _isLoading.value = false
                    Log.d(TAG, "‚ö° Loading arr√™t√© apr√®s mise √† jour d√©fis - Pr√™t pour affichage")
                }

                Log.d(TAG, "‚úÖ D√©fi actuel: ${todayChallenge?.challengeKey ?: "Aucun"}")
            }

        // üîë LISTENER SETTINGS
        settingsListener = firestore.collection(COLLECTION_SETTINGS)
            .document(coupleId)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener settings d√©fis: ${error.message}")
                    return@addSnapshotListener
                }

                if (snapshot?.exists() == true) {
                    val settings = DailyChallengeSettings.fromFirestore(snapshot)
                    _currentSettings.value = settings
                    Log.d(TAG, "‚úÖ Settings d√©fis mis √† jour: jour ${settings?.currentDay}")
                }
            }
    }

    // MARK: - G√©n√©ration de D√©fis

    /**
     * üìÖ G√©n√©ration du d√©fi d'aujourd'hui si n√©cessaire
     * Utilise la Cloud Function Firebase existante
     * ‚úÖ VERSION CACHE-FIRST : Ne bloque plus l'UI
     */
    private suspend fun generateTodayChallengeIfNeeded(coupleId: String) {
        try {
            // üîç V√©rifier si d√©fi existe d√©j√† pour aujourd'hui
            val existingChallenge = _currentChallenge.value
            if (existingChallenge?.isToday() == true) {
                Log.d(TAG, "‚ÑπÔ∏è D√©fi d'aujourd'hui d√©j√† existant")
                return
            }

            val settings = _currentSettings.value
            val expectedDay = if (settings != null) {
                settings.calculateExpectedDay()
            } else {
                // üî• Si pas de settings, commencer au jour 1 (Cloud Function les cr√©era)
                Log.w(TAG, "‚ö†Ô∏è Settings non disponibles - d√©marrage jour 1")
                1
            }
            
            val today = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())

            Log.d(TAG, "üîÑ G√©n√©ration d√©fi jour $expectedDay...")

            // üîë APPEL CLOUD FUNCTION
            val data = hashMapOf(
                "coupleId" to coupleId,
                "userId" to currentUserId,
                "challengeDay" to expectedDay,
                "timezone" to TimeZone.getDefault().id
            )

            val result = functions.getHttpsCallable("generateDailyChallenge")
                .call(data)
                .await()

            @Suppress("UNCHECKED_CAST")
            val resultData = result.data as? Map<String, Any>
            val success = resultData?.get("success") as? Boolean ?: false
            val message = resultData?.get("message") as? String ?: ""

            if (success) {
                Log.d(TAG, "‚úÖ D√©fi g√©n√©r√© avec succ√®s: $message")
                
                // üìä Analytics optionnel
                // analyticsService.logEvent("daily_challenge_generated")
            } else {
                Log.e(TAG, "‚ùå Erreur g√©n√©ration d√©fi: $message")
                _errorMessage.value = "Erreur g√©n√©ration: $message"
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur g√©n√©ration d√©fi: ${e.message}")
            _errorMessage.value = "Erreur lors de la g√©n√©ration: ${e.message}"
        }
    }

    /**
     * üîÑ Force la reg√©n√©ration d'un d√©fi (retry)
     */
    suspend fun regenerateCurrentChallenge(): Result<Unit> {
        return try {
            val coupleId = this.currentCoupleId
                ?: return Result.failure(Exception("Couple ID manquant"))

            _isLoading.value = true
            _errorMessage.value = null

            generateTodayChallengeIfNeeded(coupleId)
            
            Result.success(Unit)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur reg√©n√©ration d√©fi: ${e.message}")
            Result.failure(e)
        } finally {
            _isLoading.value = false
        }
    }

    // MARK: - Challenge Completion

    /**
     * ‚úÖ Marquer un d√©fi comme compl√©t√©
     * Sauvegarde dans Firestore avec gestion optimiste
     */
    suspend fun markChallengeAsCompleted(challengeId: String): Result<Unit> {
        return try {
            val currentUser = auth.currentUser
                ?: return Result.failure(Exception("Utilisateur non connect√©"))

            Log.d(TAG, "‚úÖ Marquage d√©fi comme compl√©t√©: $challengeId")

            // üîë METTRE √Ä JOUR FIRESTORE
            firestore.collection(COLLECTION_DAILY_CHALLENGES)
                .document(challengeId)
                .update(
                    mapOf(
                        "isCompleted" to true,
                        "completedAt" to com.google.firebase.Timestamp.now(),
                        "updatedAt" to com.google.firebase.Timestamp.now()
                    )
                )
                .await()

            // üìä Analytics
            // analyticsService.logEvent("daily_challenge_completed", challengeId)

            Log.d(TAG, "‚úÖ D√©fi marqu√© comme compl√©t√©: $challengeId")
            Result.success(Unit)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur completion d√©fi: ${e.message}")
            Result.failure(e)
        }
    }

    /**
     * ‚ùå Marquer un d√©fi comme non compl√©t√©
     */
    suspend fun markChallengeAsNotCompleted(challengeId: String): Result<Unit> {
        return try {
            Log.d(TAG, "‚ùå Annulation completion d√©fi: $challengeId")

            firestore.collection(COLLECTION_DAILY_CHALLENGES)
                .document(challengeId)
                .update(
                    mapOf(
                        "isCompleted" to false,
                        "completedAt" to null,
                        "updatedAt" to com.google.firebase.Timestamp.now()
                    )
                )
                .await()

            Log.d(TAG, "‚úÖ D√©fi marqu√© comme non compl√©t√©: $challengeId")
            Result.success(Unit)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur unmark completion: ${e.message}")
            Result.failure(e)
        }
    }

    /**
     * üîÑ Toggle completion d'un d√©fi
     */
    suspend fun toggleChallengeCompletion(challengeId: String): Result<Unit> {
        val currentChallenge = _currentChallenge.value
            ?: return Result.failure(Exception("D√©fi actuel introuvable"))

        return if (currentChallenge.isCompleted) {
            markChallengeAsNotCompleted(challengeId)
        } else {
            markChallengeAsCompleted(challengeId)
        }
    }

    // MARK: - Settings et Pr√©f√©rences

    /**
     * üîß Chargement/cr√©ation des settings couple
     */
    private suspend fun loadOrCreateSettings(coupleId: String) {
        try {
            val settingsDoc = firestore.collection(COLLECTION_SETTINGS)
                .document(coupleId)
                .get()
                .await()

            if (settingsDoc.exists()) {
                val settings = DailyChallengeSettings.fromFirestore(settingsDoc)
                _currentSettings.value = settings
                Log.d(TAG, "‚úÖ Settings d√©fis existants charg√©s")
            } else {
                // Settings seront cr√©√©s par la Cloud Function lors de la premi√®re g√©n√©ration
                Log.d(TAG, "‚ÑπÔ∏è Pas de settings d√©fis existants - seront cr√©√©s automatiquement")
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur chargement settings d√©fis: ${e.message}")
        }
    }

    /**
     * üìñ Marquer l'intro comme vue
     */
    fun markIntroAsSeen() {
        val userId = currentUserId ?: return
        val key = "daily_challenge_intro_seen_$userId"
        
        // Sauvegarder dans SharedPreferences
        val sharedPrefs = context.getSharedPreferences("daily_challenge_prefs", Context.MODE_PRIVATE)
        sharedPrefs.edit().putBoolean(key, true).apply()
        
        _hasSeenIntro.value = true
        Log.d(TAG, "‚úÖ Intro d√©fis marqu√©e comme vue")
    }

    /**
     * üìñ Chargement status intro
     */
    private fun loadIntroStatus() {
        val userId = currentUserId ?: return
        val key = "daily_challenge_intro_seen_$userId"
        
        val sharedPrefs = context.getSharedPreferences("daily_challenge_prefs", Context.MODE_PRIVATE)
        val hasSeenIntro = sharedPrefs.getBoolean(key, false)
        
        _hasSeenIntro.value = hasSeenIntro
        Log.d(TAG, "üìñ Status intro d√©fis charg√©: $hasSeenIntro")
    }

    /**
     * üîÑ Reset des erreurs
     */
    fun clearError() {
        _errorMessage.value = null
    }

    /**
     * üìä Informations de debug
     */
    fun getDebugInfo(): String {
        return """
            üìä DEBUG DailyChallengeRepository:
            - Couple ID: ${currentCoupleId ?: "Non d√©fini"}
            - User ID: ${currentUserId ?: "Non d√©fini"} 
            - D√©fi actuel: ${_currentChallenge.value?.challengeKey ?: "Aucun"}
            - Historique: ${_challengeHistory.value.size} d√©fis
            - Settings: ${_currentSettings.value?.currentDay ?: "Non charg√©"}
            - A vu intro: ${_hasSeenIntro.value}
            - En chargement: ${_isLoading.value}
            - Erreur: ${_errorMessage.value ?: "Aucune"}
        """.trimIndent()
    }

    /**
     * üßπ Nettoyage des ressources
     */
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage DailyChallengeRepository")
        
        challengeListener?.remove()
        settingsListener?.remove()
        
        challengeListener = null
        settingsListener = null
    }
}
