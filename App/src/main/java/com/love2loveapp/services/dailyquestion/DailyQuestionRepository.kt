package com.love2loveapp.services.dailyquestion

import android.content.Context
import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.ListenerRegistration
import com.google.firebase.firestore.Query
import com.google.firebase.functions.FirebaseFunctions
import com.love2loveapp.models.DailyQuestion
import com.love2loveapp.models.QuestionResponse
import com.love2loveapp.models.DailyQuestionSettings
import com.love2loveapp.models.ResponseStatus
import com.love2loveapp.models.DailyContentRoute
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import java.text.SimpleDateFormat
import java.util.*

/**
 * üî• DailyQuestionRepository - Service Principal Questions du Jour Android
 * √âquivalent iOS DailyQuestionService.swift
 * 
 * Fonctionnalit√©s principales :
 * - G√©n√©ration questions quotidiennes via Cloud Functions
 * - Chat temps r√©el avec Firestore listeners  
 * - Gestion freemium (3 jours gratuits)
 * - Compatibilit√© iOS ‚Üî Android
 * - Notifications push int√©gr√©es
 */
class DailyQuestionRepository private constructor(
    private val context: Context,
    private val firestore: FirebaseFirestore,
    private val functions: FirebaseFunctions,
    private val auth: FirebaseAuth
) {
    
    // üîî Service de notifications
    private val notificationService: DailyQuestionNotificationService by lazy {
        DailyQuestionNotificationService.getInstance(context)
    }

    companion object {
        private const val TAG = "DailyQuestionRepository"
        private const val COLLECTION_DAILY_QUESTIONS = "dailyQuestions"
        private const val COLLECTION_SETTINGS = "dailyQuestionSettings"
        private const val COLLECTION_RESPONSES = "responses"

        @Volatile
        private var INSTANCE: DailyQuestionRepository? = null

        fun getInstance(context: Context): DailyQuestionRepository {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: DailyQuestionRepository(
                    context = context.applicationContext,
                    firestore = FirebaseFirestore.getInstance(),
                    functions = FirebaseFunctions.getInstance(),
                    auth = FirebaseAuth.getInstance()
                ).also { INSTANCE = it }
            }
        }
    }

    // üî• √âTAT GLOBAL DU SERVICE
    private val _currentQuestion = MutableStateFlow<DailyQuestion?>(null)
    val currentQuestion: StateFlow<DailyQuestion?> = _currentQuestion.asStateFlow()

    private val _responses = MutableStateFlow<List<QuestionResponse>>(emptyList())
    val responses: StateFlow<List<QuestionResponse>> = _responses.asStateFlow()

    private val _currentSettings = MutableStateFlow<DailyQuestionSettings?>(null)
    val currentSettings: StateFlow<DailyQuestionSettings?> = _currentSettings.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()

    private val _hasSeenIntro = MutableStateFlow(false)
    val hasSeenIntro: StateFlow<Boolean> = _hasSeenIntro.asStateFlow()

    // üîß GESTION LISTENERS FIRESTORE
    private var questionListener: ListenerRegistration? = null
    private var responsesListener: ListenerRegistration? = null
    private var settingsListener: ListenerRegistration? = null

    // üìä DONN√âES CACHED
    private var currentCoupleId: String? = null
    private var currentUserId: String? = null

    // MARK: - Initialisation et Configuration

    /**
     * üöÄ Initialisation pour un couple donn√©
     * Point d'entr√©e principal du service
     */
    suspend fun initializeForCouple(coupleId: String) {
        Log.d(TAG, "üöÄ Initialisation pour couple: $coupleId")
        
        this.currentCoupleId = coupleId
        
        // üîë GESTION MODE INVIT√â: Utiliser AppState si Firebase Auth null
        val firebaseUser = auth.currentUser
        val appStateUser = com.love2loveapp.AppDelegate.appState.currentUser.value
        
        this.currentUserId = firebaseUser?.uid ?: appStateUser?.id
        
        if (currentUserId == null) {
            _errorMessage.value = "Aucun utilisateur disponible (ni Firebase Auth ni mode invit√©)"
            return
        }
        
        Log.d(TAG, "üë§ Utilisateur initialis√©: ${if (firebaseUser != null) "Firebase Auth" else "Mode invit√©"} (${currentUserId?.take(8)}...)")

        try {
            // üîë 1. CACHE-FIRST : Chercher donn√©es existantes dans le cache AVANT tout
            val cachedQuestion = getCachedQuestionForToday(coupleId)
            if (cachedQuestion != null) {
                Log.d(TAG, "üì¶ Question trouv√©e en cache - Affichage imm√©diat")
                _currentQuestion.value = cachedQuestion
                _isLoading.value = false  // üîë Pas de loading si cache trouv√©
                Log.d(TAG, "üèÅ Loading arr√™t√© imm√©diatement (cache hit)")
            } else {
                Log.d(TAG, "üì≠ Pas de cache - D√©marrage loading")
                _isLoading.value = true
                Log.d(TAG, "üîÑ Loading d√©marr√© (cache miss)")
            }

            _errorMessage.value = null

            // üîë 2. CONFIGURER LISTENERS TEMPS R√âEL (en arri√®re-plan)
            setupRealtimeListeners(coupleId)

            // üîë 3. CHARGER/CR√âER SETTINGS (en arri√®re-plan)  
            loadOrCreateSettings(coupleId)

            // üîë 4. G√âN√âRER QUESTION D'AUJOURD'HUI SI N√âCESSAIRE (en arri√®re-plan)
            generateTodayQuestionIfNeeded(coupleId)

            // üîë 5. CHARGER STATUS INTRO
            loadIntroStatus()

            Log.d(TAG, "‚úÖ Initialisation termin√©e pour couple: $coupleId")
            
            // üîë IMPORTANT : Toujours arr√™ter le loading √† la fin de l'initialisation !
            _isLoading.value = false
            Log.d(TAG, "üèÅ Loading arr√™t√© - Pr√™t pour affichage")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur initialisation: ${e.message}")
            _errorMessage.value = "Erreur lors de l'initialisation: ${e.message}"
            _isLoading.value = false
            Log.d(TAG, "üèÅ Loading arr√™t√© apr√®s erreur")
        }
    }

    /**
     * üì¶ R√©cup√©rer question du jour depuis le cache
     * Impl√©mentation cache-first comme iOS
     */
    private fun getCachedQuestionForToday(coupleId: String): DailyQuestion? {
        val cachedQuestion = _currentQuestion.value
        
        if (cachedQuestion != null) {
            // üîç V√©rifier que la question est bien pour aujourd'hui (pas obsol√®te)
            val today = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
            if (cachedQuestion.scheduledDate == today && cachedQuestion.coupleId == coupleId) {
                Log.d(TAG, "üì¶ Cache valide trouv√©: ${cachedQuestion.questionKey} pour $today")
                return cachedQuestion
            } else {
                Log.d(TAG, "üì¶ Cache obsol√®te: ${cachedQuestion.scheduledDate} vs $today")
                // Cache obsol√®te - le vider
                _currentQuestion.value = null
            }
        }
        
        Log.d(TAG, "üì≠ Aucun cache valide disponible")
        return null
    }

    // MARK: - Real-time Listeners

    /**
     * üî• Configuration des listeners Firestore temps r√©el
     * Compatible avec l'architecture iOS existante
     */
    private fun setupRealtimeListeners(coupleId: String) {
        Log.d(TAG, "üî• Configuration listeners temps r√©el pour couple: $coupleId")

        // Nettoyer anciens listeners
        cleanup()

        // üîë LISTENER QUESTIONS
        questionListener = firestore.collection(COLLECTION_DAILY_QUESTIONS)
            .whereEqualTo("coupleId", coupleId)
            .orderBy("scheduledDateTime", Query.Direction.DESCENDING)
            .limit(10)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener questions: ${error.message}")
                    _errorMessage.value = "Erreur de synchronisation: ${error.message}"
                    return@addSnapshotListener
                }

                Log.d(TAG, "üì• Mise √† jour questions: ${snapshot?.documents?.size} documents")

                val questions = snapshot?.documents?.mapNotNull { doc ->
                    try {
                        DailyQuestion.fromFirestore(doc)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur parsing question: ${e.message}")
                        null
                    }
                } ?: emptyList()

                // üîç Trouver question d'aujourd'hui
                val today = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
                val todayQuestion = questions.find { it.scheduledDate == today }

                _currentQuestion.value = todayQuestion

                // üî• CONFIGURER LISTENER R√âPONSES pour la question actuelle
                todayQuestion?.let { question ->
                    setupResponsesListener(question.id)
                }

                Log.d(TAG, "‚úÖ Question actuelle: ${todayQuestion?.questionKey ?: "Aucune"}")
            }

        // üîë LISTENER SETTINGS
        settingsListener = firestore.collection(COLLECTION_SETTINGS)
            .document(coupleId)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener settings: ${error.message}")
                    return@addSnapshotListener
                }

                if (snapshot?.exists() == true) {
                    val settings = DailyQuestionSettings.fromFirestore(snapshot)
                    _currentSettings.value = settings
                    Log.d(TAG, "‚úÖ Settings mis √† jour: jour ${settings?.currentDay}")
                }
            }
    }

    /**
     * üí¨ Listener sp√©cifique pour les r√©ponses chat d'une question
     */
    private fun setupResponsesListener(questionId: String) {
        Log.d(TAG, "üí¨ Configuration listener r√©ponses pour question: $questionId")

        // Nettoyer ancien listener
        responsesListener?.remove()

        responsesListener = firestore.collection(COLLECTION_DAILY_QUESTIONS)
            .document(questionId)
            .collection(COLLECTION_RESPONSES)
            .orderBy("respondedAt", Query.Direction.ASCENDING) // ‚úÖ M√äME TRI QUE iOS
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener r√©ponses: ${error.message}")
                    return@addSnapshotListener
                }

                val responses = snapshot?.documents?.mapNotNull { doc ->
                    try {
                val response = QuestionResponse.fromFirestore(doc)
                if (response == null) {
                    Log.w(TAG, "‚ö†Ô∏è fromFirestore retourn√© null pour doc: ${doc.id}")
                }
                        response
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur parsing r√©ponse doc ${doc.id}: ${e.message}", e)
                        null
                    }
                } ?: emptyList()

                _responses.value = responses
                Log.d(TAG, "üí¨ ${responses.size} r√©ponses mises √† jour")

                // üîî NOTIFICATION NOUVEAU MESSAGE (seulement si pas de nous)
                handleNewMessageNotification(responses)
            }
    }

    /**
     * üßπ FONCTION DE NETTOYAGE - Corriger les messages avec mauvais userId
     * √Ä utiliser en cas de donn√©es corrompues
     */
    suspend fun fixCorruptedMessages(): Result<Unit> {
        return try {
            Log.d(TAG, "üßπ D√âBUT: Nettoyage des messages corrompus")
            
            val question = _currentQuestion.value
                ?: return Result.failure(Exception("Aucune question active"))
            
            Log.d(TAG, "üßπ Analyse des messages pour question: ${question.id}")
            
            // R√©cup√©rer tous les messages
            val messagesSnapshot = firestore.collection(COLLECTION_DAILY_QUESTIONS)
                .document(question.id)
                .collection(COLLECTION_RESPONSES)
                .get()
                .await()
            
            // üîë GESTION MODE INVIT√â
            val firebaseUser = auth.currentUser
            val appStateUser = com.love2loveapp.AppDelegate.appState.currentUser.value
            val currentUserId = firebaseUser?.uid ?: appStateUser?.id
            
            Log.d(TAG, "üßπ Utilisateur actuel: [MASKED] (${if (firebaseUser != null) "Firebase" else "Invit√©"})")
            Log.d(TAG, "üßπ Nombre de messages trouv√©s: ${messagesSnapshot.documents.size}")
            
            // Analyser chaque message
            messagesSnapshot.documents.forEach { doc ->
                val data = doc.data ?: return@forEach
                val messageUserId = data["userId"] as? String
                val messageText = data["text"] as? String
                
                Log.d(TAG, "üßπ Message analys√©")
                // Log.d(TAG, "üßπ   userId: [MASKED]")
                // Log.d(TAG, "üßπ   text: [MASKED]")
                // Log.d(TAG, "üßπ   isCurrentUser: [MASKED]")
            }
            
            Log.d(TAG, "‚úÖ TERMIN√â: Analyse des messages (aucune correction automatique pour s√©curit√©)")
            Log.d(TAG, "üí° CONSEIL: V√©rifiez les logs pour identifier les messages avec le mauvais userId")
            
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage messages: ${e.message}")
            Result.failure(e)
        }
    }

    // MARK: - G√©n√©ration de Questions

    /**
     * üìÖ G√©n√©ration de la question d'aujourd'hui si n√©cessaire
     * Utilise la Cloud Function Firebase existante
     */
    private suspend fun generateTodayQuestionIfNeeded(coupleId: String) {
        try {
            val settings = _currentSettings.value
            if (settings == null) {
                Log.w(TAG, "‚ö†Ô∏è Settings non disponibles pour g√©n√©ration question")
                return
            }

            val expectedDay = settings.calculateExpectedDay()
            val today = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())

            // V√©rifier si question existe d√©j√† pour aujourd'hui
            val existingQuestion = _currentQuestion.value
            if (existingQuestion?.scheduledDate == today) {
                Log.d(TAG, "‚ÑπÔ∏è Question d'aujourd'hui d√©j√† existante")
                return
            }

            Log.d(TAG, "üîÑ G√©n√©ration question jour $expectedDay...")

            // üîë APPEL CLOUD FUNCTION
            val data = hashMapOf(
                "coupleId" to coupleId,
                "userId" to currentUserId,
                "questionDay" to expectedDay,
                "timezone" to TimeZone.getDefault().id
            )

            val result = functions.getHttpsCallable("generateDailyQuestion")
                .call(data)
                .await()

            @Suppress("UNCHECKED_CAST")
            val resultData = result.data as? Map<String, Any>
            val success = resultData?.get("success") as? Boolean ?: false
            val message = resultData?.get("message") as? String ?: ""

            if (success) {
                Log.d(TAG, "‚úÖ Question g√©n√©r√©e avec succ√®s: $message")
                
                // üîî NOTIFICATION NOUVELLE QUESTION
                val question = _currentQuestion.value
                question?.let { q ->
                    val questionText = q.getLocalizedText(context)
                    notificationService.showNewQuestionNotification(
                        questionText = questionText,
                        questionDay = expectedDay
                    )
                }
            } else {
                Log.e(TAG, "‚ùå Erreur g√©n√©ration question: $message")
                _errorMessage.value = "Erreur g√©n√©ration: $message"
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur g√©n√©ration question: ${e.message}")
            _errorMessage.value = "Erreur lors de la g√©n√©ration: ${e.message}"
        }
    }

    /**
     * üîÑ Force la reg√©n√©ration d'une question (retry)
     */
    suspend fun regenerateCurrentQuestion(): Result<Unit> {
        return try {
            val coupleId = this.currentCoupleId
                ?: return Result.failure(Exception("Couple ID manquant"))

            _isLoading.value = true
            _errorMessage.value = null

            generateTodayQuestionIfNeeded(coupleId)
            
            Result.success(Unit)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur reg√©n√©ration: ${e.message}")
            Result.failure(e)
        } finally {
            _isLoading.value = false
        }
    }

    // MARK: - Gestion des R√©ponses

    /**
     * üìù Soumission d'une r√©ponse dans le chat
     * Compatible avec l'architecture iOS (m√™me structure Firestore)
     */
    suspend fun submitResponse(text: String): Result<Unit> {
        return try {
            // üîë GESTION MODE INVIT√â: Utiliser AppState si Firebase Auth null
            val firebaseUser = auth.currentUser
            val appStateUser = com.love2loveapp.AppDelegate.appState.currentUser.value
            
            val userId: String
            val userName: String
            
            if (firebaseUser != null) {
                // Mode connect√© (Google, etc.)
                userId = firebaseUser.uid
                userName = firebaseUser.displayName?.takeIf { it.isNotBlank() }
                    ?: appStateUser?.name?.takeIf { it.isNotBlank() }
                    ?: "Utilisateur Firebase"
                Log.d(TAG, "üî• Mode Firebase Auth: [USER_MASKED]")
            } else if (appStateUser != null) {
                // Mode invit√©
                userId = appStateUser.id
                userName = appStateUser.name
                Log.d(TAG, "üë§ Mode invit√©: [USER_MASKED]")
            } else {
                return Result.failure(Exception("Aucun utilisateur disponible"))
            }

            val question = _currentQuestion.value
                ?: return Result.failure(Exception("Aucune question active"))

            Log.d(TAG, "üìù Soumission r√©ponse: [CONTENT_MASKED]")
            
            // üîê VALIDATION DONN√âES OBLIGATOIRES
            if (question.id.isBlank() || text.trim().isBlank() || userName.isBlank() || userId.isBlank()) {
                val errorMsg = "Donn√©es manquantes: questionId=[MASKED], text=[MASKED], userName=[MASKED], userId=[MASKED]"
                Log.e(TAG, "‚ùå $errorMsg")
                return Result.failure(Exception("Donn√©es manquantes"))
            }

            // üîë UTILISER LA M√äME CLOUD FUNCTION QUE iOS POUR COMPATIBILIT√â CROSS-PLATFORM            
            val data = hashMapOf(
                "questionId" to question.id,
                "responseText" to text.trim(),
                "userName" to userName,
                "userId" to userId  // Ajouter userId explicitement pour compatibilit√© mode invit√©
            )
            
            Log.d(TAG, "üì§ Donn√©es envoy√©es √† Cloud Function: [DATA_MASKED]")
            
            val result = functions.getHttpsCallable("submitDailyQuestionResponse")
                .call(data)
                .await()
                
            // V√©rifier le succ√®s
            val cloudResponse = result.data as? Map<*, *>
            if (cloudResponse?.get("success") != true) {
                throw Exception("Cloud Function √©chec: $cloudResponse")
            }

            Log.d(TAG, "‚úÖ R√©ponse soumise avec succ√®s")
            
            // üìä Analytics optionnel
            // analyticsService.logEvent("daily_question_response_submitted")

            Result.success(Unit)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur soumission r√©ponse: ${e.message}")
            Result.failure(e)
        }
    }

    /**
     * üîî Gestion notifications nouveaux messages
     */
    private fun handleNewMessageNotification(responses: List<QuestionResponse>) {
        val currentUserId = this.currentUserId ?: return
        
        // Trouver le dernier message qui n'est pas de nous
        val lastResponse = responses.lastOrNull { it.userId != currentUserId }
        
        if (lastResponse != null) { // üîë REMOVED isRecent() restriction
            // TODO: Impl√©menter syst√®me anti-spam plus intelligent
            Log.d(TAG, "üîî Nouveau message de ${lastResponse.userName}: ${lastResponse.preview}")
            
            // üî• NOTIFICATION PUSH
            val currentQuestion = _currentQuestion.value
            val questionText = currentQuestion?.getLocalizedText(context)
            
            notificationService.showNewMessageNotification(
                response = lastResponse,
                partnerName = lastResponse.userName,
                questionText = questionText
            )
        }
    }

    // MARK: - Settings et Pr√©f√©rences

    /**
     * üîß Chargement/cr√©ation des settings couple
     * Compatible avec l'architecture iOS - cr√©e les settings automatiquement
     */
    private suspend fun loadOrCreateSettings(coupleId: String) {
        try {
            val settingsDoc = firestore.collection(COLLECTION_SETTINGS)
                .document(coupleId)
                .get()
                .await()

            if (settingsDoc.exists()) {
                val settings = DailyQuestionSettings.fromFirestore(settingsDoc)
                _currentSettings.value = settings
                Log.d(TAG, "‚úÖ Settings existants charg√©s")
            } else {
                Log.d(TAG, "üîß Cr√©ation nouveaux settings pour couple: $coupleId")
                
                // üîë CR√âER NOUVEAUX SETTINGS (comme dans la version iOS)
                val now = Date()
                val calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"))
                calendar.time = now
                calendar.set(java.util.Calendar.HOUR_OF_DAY, 0)
                calendar.set(java.util.Calendar.MINUTE, 0)
                calendar.set(java.util.Calendar.SECOND, 0)
                calendar.set(java.util.Calendar.MILLISECOND, 0)
                val startDate = calendar.time
                
                val newSettings = mapOf(
                    "coupleId" to coupleId,
                    "startDate" to com.google.firebase.Timestamp(startDate),
                    "currentDay" to 1,
                    "timezone" to java.util.TimeZone.getDefault().id,
                    "createdAt" to FieldValue.serverTimestamp(),
                    "updatedAt" to FieldValue.serverTimestamp(),
                    "isActive" to true
                )
                
                // Sauvegarder dans Firestore
                firestore.collection(COLLECTION_SETTINGS)
                    .document(coupleId)
                    .set(newSettings)
                    .await()
                
                // Cr√©er l'objet settings local
                val settings = DailyQuestionSettings(
                    coupleId = coupleId,
                    startDate = com.google.firebase.Timestamp(startDate),
                    currentDay = 1,
                    timezone = java.util.TimeZone.getDefault().id,
                    createdAt = com.google.firebase.Timestamp(now),
                    updatedAt = com.google.firebase.Timestamp(now),
                    isActive = true
                )
                
                _currentSettings.value = settings
                Log.d(TAG, "‚úÖ Nouveaux settings cr√©√©s et charg√©s")
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur chargement/cr√©ation settings: ${e.message}")
            _errorMessage.value = "Erreur lors de l'initialisation: ${e.message}"
        }
    }

    /**
     * üìñ Marquer l'intro comme vue
     */
    fun markIntroAsSeen() {
        val userId = currentUserId ?: return
        val key = "daily_question_intro_seen_$userId"
        
        // Sauvegarder dans SharedPreferences
        val sharedPrefs = context.getSharedPreferences("daily_question_prefs", Context.MODE_PRIVATE)
        sharedPrefs.edit().putBoolean(key, true).apply()
        
        _hasSeenIntro.value = true
        Log.d(TAG, "‚úÖ Intro marqu√©e comme vue")
    }

    /**
     * üìñ Chargement status intro
     */
    private fun loadIntroStatus() {
        val userId = currentUserId ?: return
        val key = "daily_question_intro_seen_$userId"
        
        val sharedPrefs = context.getSharedPreferences("daily_question_prefs", Context.MODE_PRIVATE)
        val hasSeenIntro = sharedPrefs.getBoolean(key, false)
        
        _hasSeenIntro.value = hasSeenIntro
        Log.d(TAG, "üìñ Status intro charg√©: $hasSeenIntro")
    }

    /**
     * üîÑ Reset des erreurs
     */
    fun clearError() {
        _errorMessage.value = null
    }

    /**
     * üìä Informations de debug
     */
    fun getDebugInfo(): String {
        return """
            üìä DEBUG DailyQuestionRepository:
            - Couple ID: ${currentCoupleId ?: "Non d√©fini"}
            - User ID: ${currentUserId ?: "Non d√©fini"} 
            - Question actuelle: ${_currentQuestion.value?.questionKey ?: "Aucune"}
            - R√©ponses: ${_responses.value.size}
            - Settings: ${_currentSettings.value?.currentDay ?: "Non charg√©"}
            - A vu intro: ${_hasSeenIntro.value}
            - En chargement: ${_isLoading.value}
            - Erreur: ${_errorMessage.value ?: "Aucune"}
        """.trimIndent()
    }

    /**
     * üßπ Nettoyage des ressources
     */
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage DailyQuestionRepository")
        
        questionListener?.remove()
        responsesListener?.remove() 
        settingsListener?.remove()
        
        questionListener = null
        responsesListener = null
        settingsListener = null
        
        // üîî Nettoyer notifications
        notificationService.cancelAllNotifications()
    }
}
