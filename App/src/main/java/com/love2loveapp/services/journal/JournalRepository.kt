package com.love2loveapp.services.journal

import android.content.Context
import android.net.Uri
import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import com.google.firebase.firestore.Query
import com.google.firebase.storage.FirebaseStorage
import com.love2loveapp.AppDelegate
import com.love2loveapp.models.JournalEntry
import com.love2loveapp.models.JournalLocation
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import java.util.*

/**
 * üìî JournalRepository - Service Central Journal
 * √âquivalent iOS JournalService
 * 
 * G√®re les op√©rations CRUD sur les √©v√©nements journal avec :
 * - Real-time synchronisation Firebase
 * - Upload/suppression images Firebase Storage
 * - Partage automatique entre partenaires
 * - V√©rification des autorisations (seul auteur peut modifier/supprimer)
 */
class JournalRepository private constructor(
    private val context: Context
) {
    
    companion object {
        private const val TAG = "JournalRepository"
        private const val COLLECTION_JOURNAL = "journalEntries"
        private const val STORAGE_PATH_JOURNAL = "journal_images" // ‚úÖ Identique iOS
        
        @Volatile
        private var INSTANCE: JournalRepository? = null
        
        fun getInstance(context: Context): JournalRepository {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: JournalRepository(context.applicationContext).also { INSTANCE = it }
            }
        }
    }
    
    private val firestore = FirebaseFirestore.getInstance()
    private val storage = FirebaseStorage.getInstance()
    private val auth = FirebaseAuth.getInstance()
    
    private val repositoryScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)
    
    // üìä √âTATS OBSERVABLES
    private val _entries = MutableStateFlow<List<JournalEntry>>(emptyList())
    val entries: StateFlow<List<JournalEntry>> = _entries.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()
    
    // üîÑ LISTENERS FIRESTORE
    private var entriesListener: ListenerRegistration? = null
    
    /**
     * üöÄ Initialisation pour un utilisateur (√©quivalent iOS setupListener)
     */
    fun initializeForUser(userId: String) {
        Log.d(TAG, "üöÄ Initialisation JournalRepository pour utilisateur: $userId")
        
        repositoryScope.launch {
            try {
                _isLoading.value = true
                _errorMessage.value = null
                
                setupRealtimeListener(userId)
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur initialisation JournalRepository: ${e.message}")
                _errorMessage.value = "Erreur lors du chargement du journal"
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    /**
     * üëÇ Configuration listener temps r√©el Firestore (√©quivalent iOS setupListener)
     */
    private fun setupRealtimeListener(userId: String) {
        Log.d(TAG, "üëÇ Configuration listener journal pour: $userId")
        
        // Stopper l'ancien listener
        entriesListener?.remove()
        
        // üîë LISTENER TEMPS R√âEL AVEC FILTRE PARTENAIRE (identique iOS)
        entriesListener = firestore.collection(COLLECTION_JOURNAL)
            .whereArrayContains("partnerIds", userId)
            .orderBy("eventDate", Query.Direction.DESCENDING) // Trier par date √©v√©nement d√©croissante
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener journal: ${error.message}")
                    _errorMessage.value = "Erreur synchronisation journal"
                    return@addSnapshotListener
                }
                
                if (snapshot != null) {
                    val entries = snapshot.documents.mapNotNull { doc ->
                        JournalEntry.fromFirestore(doc)
                    }
                    
                    Log.d(TAG, "üì• Re√ßu ${entries.size} entr√©es journal depuis Firestore")
                    
                    // üîë REMPLACER ET TRIER PAR DATE √âV√âNEMENT (identique iOS)
                    _entries.value = entries.sortedByDescending { it.eventDate }
                    _errorMessage.value = null
                }
            }
    }
    
    /**
     * ‚ûï Cr√©er une nouvelle entr√©e journal (√©quivalent iOS createEntry)
     */
    suspend fun createEntry(
        title: String,
        description: String,
        eventDate: Date,
        imageUri: Uri? = null,
        location: JournalLocation? = null
    ): Result<Unit> {
        return try {
            Log.d(TAG, "‚ûï Cr√©ation entr√©e journal: $title")
            
            val currentUser = auth.currentUser
            if (currentUser == null) {
                return Result.failure(Exception("Utilisateur non connect√©"))
            }
            
            val appUser = AppDelegate.appState.currentUser.value
            if (appUser == null) {
                return Result.failure(Exception("Donn√©es utilisateur non disponibles"))
            }
            
            _isLoading.value = true
            _errorMessage.value = null
            
            var imageURL: String? = null
            
            // üîë UPLOAD IMAGE SI PR√âSENTE (identique iOS)
            if (imageUri != null) {
                imageURL = uploadImage(imageUri).getOrThrow()
                Log.d(TAG, "üì∑ Image upload√©e: $imageURL")
            }
            
            // üîë D√âTERMINER PARTENAIRES POUR PARTAGE (identique iOS)
            val partnerIds = mutableListOf(currentUser.uid) // Toujours inclure l'auteur
            appUser.partnerId?.let { partnerId ->
                partnerIds.add(partnerId)
                Log.d(TAG, "üë• Partage avec partenaire: [PARTNER_ID_MASKED]")
            }
            
            val entry = JournalEntry(
                title = title.trim(),
                description = description.trim(),
                eventDate = eventDate,
                authorId = currentUser.uid,
                authorName = appUser.name,
                imageURL = imageURL,
                partnerIds = partnerIds,      // üîë PARTAGE AUTOMATIQUE
                location = location           // üîë GPS OPTIONAL
            )
            
            // üîë SAUVEGARDER FIRESTORE (identique iOS)
            firestore.collection(COLLECTION_JOURNAL)
                .document(entry.id)
                .set(entry.toFirestore())
                .await()
            
            Log.d(TAG, "‚úÖ Entr√©e journal cr√©√©e avec succ√®s: ${entry.id}")
            
            _isLoading.value = false
            Result.success(Unit)
            
        } catch (e: Exception) {
            _isLoading.value = false
            Log.e(TAG, "‚ùå Erreur cr√©ation entr√©e journal: ${e.message}")
            _errorMessage.value = "Erreur lors de la cr√©ation de l'entr√©e"
            Result.failure(e)
        }
    }
    
    /**
     * ‚úèÔ∏è Mettre √† jour une entr√©e journal (√©quivalent iOS updateEntry)
     */
    suspend fun updateEntry(entry: JournalEntry): Result<Unit> {
        return try {
            Log.d(TAG, "‚úèÔ∏è Mise √† jour entr√©e journal: ${entry.id}")
            
            val currentUser = auth.currentUser
            if (currentUser == null) {
                return Result.failure(Exception("Utilisateur non connect√©"))
            }
            
            // üîë V√âRIFICATION AUTORISATION (SEUL AUTEUR PEUT MODIFIER) - identique iOS
            if (currentUser.uid != entry.authorId) {
                return Result.failure(Exception("Seul l'auteur peut modifier cette entr√©e"))
            }
            
            val updatedEntry = entry.withUpdatedTimestamp()
            
            firestore.collection(COLLECTION_JOURNAL)
                .document(entry.id)
                .set(updatedEntry.toFirestore())
                .await()
            
            Log.d(TAG, "‚úÖ Entr√©e journal mise √† jour avec succ√®s")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur mise √† jour entr√©e: ${e.message}")
            _errorMessage.value = "Erreur lors de la mise √† jour"
            Result.failure(e)
        }
    }
    
    /**
     * üóëÔ∏è Supprimer une entr√©e journal (√©quivalent iOS deleteEntry)
     */
    suspend fun deleteEntry(entry: JournalEntry): Result<Unit> {
        return try {
            Log.d(TAG, "üóëÔ∏è === D√âBUT SUPPRESSION ENTR√âE ===")
            Log.d(TAG, "üóëÔ∏è Suppression entr√©e journal: ${entry.id}")
            
            val currentUser = auth.currentUser
            if (currentUser == null) {
                return Result.failure(Exception("Utilisateur non connect√©"))
            }
            
            // üîë SEUL L'AUTEUR PEUT SUPPRIMER (identique iOS)
            if (currentUser.uid != entry.authorId) {
                return Result.failure(Exception("Seul l'auteur peut supprimer cette entr√©e"))
            }
            
            // üîë SUPPRIMER IMAGE DU STORAGE SI PR√âSENTE (identique iOS)
            if (entry.imageURL?.isNotEmpty() == true) {
                try {
                    deleteImage(entry.imageURL!!).getOrThrow()
                    Log.d(TAG, "‚úÖ Image supprim√©e avec succ√®s")
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è Erreur suppression image (continuons): ${e.message}")
                    // On continue m√™me si l'image ne peut pas √™tre supprim√©e
                }
            }
            
            // üîë SUPPRIMER ENTR√âE FIRESTORE (identique iOS)
            firestore.collection(COLLECTION_JOURNAL)
                .document(entry.id)
                .delete()
                .await()
            
            Log.d(TAG, "‚úÖ Entr√©e Firestore supprim√©e avec succ√®s")
            Log.d(TAG, "üóëÔ∏è === FIN SUPPRESSION ENTR√âE (SUCC√àS) ===")
            
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur suppression entr√©e: ${e.message}")
            Log.e(TAG, "üóëÔ∏è === FIN SUPPRESSION ENTR√âE (√âCHEC) ===")
            _errorMessage.value = "Erreur lors de la suppression"
            Result.failure(e)
        }
    }
    
    /**
     * üì∑ Upload image vers Firebase Storage (identique iOS)
     */
    private suspend fun uploadImage(imageUri: Uri): Result<String> {
        return try {
            val currentUser = auth.currentUser
            if (currentUser == null) {
                return Result.failure(Exception("Utilisateur non connect√©"))
            }
            
            // ‚úÖ Chemin structur√© identique iOS: journal_images/{userId}/{fileName}
            val fileName = "${UUID.randomUUID()}.jpg"
            val imagePath = "$STORAGE_PATH_JOURNAL/${currentUser.uid}/$fileName"
            val imageRef = storage.reference.child(imagePath)
            
            Log.d(TAG, "üì∑ Upload image vers: $imagePath")
            
            // ‚úÖ M√©tadonn√©es comme iOS
            val metadata = com.google.firebase.storage.StorageMetadata.Builder()
                .setContentType("image/jpeg")
                .build()
            
            val uploadTask = imageRef.putFile(imageUri, metadata).await()
            val downloadUrl = imageRef.downloadUrl.await()
            
            Log.d(TAG, "‚úÖ Image upload√©e avec succ√®s: $downloadUrl")
            Result.success(downloadUrl.toString())
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur upload image: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * üóëÔ∏è Supprimer image de Firebase Storage
     */
    private suspend fun deleteImage(imageURL: String): Result<Unit> {
        return try {
            val imageRef = storage.getReferenceFromUrl(imageURL)
            imageRef.delete().await()
            
            Log.d(TAG, "‚úÖ Image supprim√©e du Storage: $imageURL")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur suppression image: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * üìä Obtenir le nombre d'entr√©es de l'utilisateur (pour freemium)
     */
    fun getUserEntriesCount(userId: String): Int {
        return _entries.value.count { it.authorId == userId }
    }
    
    /**
     * üìç Obtenir les entr√©es avec localisation (pour carte)
     */
    fun getEntriesWithLocation(): List<JournalEntry> {
        return _entries.value.filter { it.hasLocation }
    }
    
    /**
     * üîß Nettoyage ressources
     */
    fun cleanup() {
        Log.d(TAG, "üîß Nettoyage JournalRepository")
        
        entriesListener?.remove()
        entriesListener = null
        
        _entries.value = emptyList()
        _errorMessage.value = null
        _isLoading.value = false
    }
    
    /**
     * üêõ Debug - Afficher informations journal
     */
    fun debugJournalEntries() {
        val entries = _entries.value
        Log.d(TAG, "üìä DEBUG - ${entries.size} entr√©es journal:")
        entries.forEach { entry ->
            Log.d(TAG, "  - ${entry.title} par ${entry.authorName} le ${entry.formattedEventDate}")
        }
    }
}
