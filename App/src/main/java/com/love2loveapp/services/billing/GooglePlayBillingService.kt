package com.love2loveapp.services.billing

import android.app.Activity
import android.content.Context
import android.util.Log
import com.android.billingclient.api.*
import com.android.billingclient.api.BillingClient.BillingResponseCode
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.functions.FirebaseFunctions
import com.love2loveapp.models.AppConstants
import com.love2loveapp.services.subscription.SubscriptionNotificationService
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.suspendCancellableCoroutine
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.launch
import kotlinx.coroutines.cancel
import kotlin.coroutines.resume

/**
 * Service Google Play Billing - √âquivalent AppleReceiptService iOS
 * 
 * Architecture similaire √† iOS :
 * - Gestion des √©tats avec StateFlow (√©quivalent @Published)
 * - Validation Firebase c√¥t√© serveur
 * - Support des plans hebdomadaire et mensuel
 * - Gestion des erreurs et retry automatique
 */
class GooglePlayBillingService private constructor(private val context: Context) : PurchasesUpdatedListener {
    
    companion object {
        private const val TAG = "GooglePlayBillingService"
        
        @Volatile
        private var INSTANCE: GooglePlayBillingService? = null
        
        fun getInstance(context: Context): GooglePlayBillingService {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: GooglePlayBillingService(context.applicationContext).also { INSTANCE = it }
            }
        }
    }
    
    // === Types d'abonnement (√©quivalent enum iOS) ===
    enum class SubscriptionPlanType(val productId: String) {
        WEEKLY(AppConstants.AndroidProducts.WEEKLY_SUBSCRIPTION),
        MONTHLY(AppConstants.AndroidProducts.MONTHLY_SUBSCRIPTION)
    }
    
    // === √âtats de connexion ===
    enum class BillingConnectionState {
        DISCONNECTED,
        CONNECTING,
        CONNECTED,
        ERROR
    }
    
    // === Client de billing ===
    private var billingClient: BillingClient? = null
    private val functions = FirebaseFunctions.getInstance()
    private val auth = FirebaseAuth.getInstance()
    private val firestore = FirebaseFirestore.getInstance()
    
    // Service de notifications
    private val notificationService by lazy { SubscriptionNotificationService.getInstance(context) }
    
    // === √âtats observables (√©quivalent @Published iOS) ===
    private val _isSubscribed = MutableStateFlow(false)
    val isSubscribed: StateFlow<Boolean> = _isSubscribed.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()
    
    private val _selectedPlan = MutableStateFlow(SubscriptionPlanType.MONTHLY)
    val selectedPlan: StateFlow<SubscriptionPlanType> = _selectedPlan.asStateFlow()
    
    // Structure pour stocker prix + devise de fa√ßon pr√©cise
    data class ProductPricing(
        val formattedPrice: String,        // Prix format√© par Google (ex: "5,99 ‚Ç¨")
        val priceAmountMicros: Long,       // Prix en micros (ex: 5990000 pour 5,99)
        val priceCurrencyCode: String      // Code devise (ex: "EUR", "USD")
    )
    
    private val _productDetails = MutableStateFlow<Map<SubscriptionPlanType, String>>(emptyMap())
    val productDetails: StateFlow<Map<SubscriptionPlanType, String>> = _productDetails.asStateFlow()
    
    private val _productPricing = MutableStateFlow<Map<SubscriptionPlanType, ProductPricing>>(emptyMap())
    val productPricing: StateFlow<Map<SubscriptionPlanType, ProductPricing>> = _productPricing.asStateFlow()
    
    private val _billingConnectionState = MutableStateFlow(BillingConnectionState.DISCONNECTED)
    val billingConnectionState: StateFlow<BillingConnectionState> = _billingConnectionState.asStateFlow()
    
    // CoroutineScope pour les op√©rations en arri√®re-plan
    private val serviceScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
    
    init {
        try {
            Log.d(TAG, "üè† D√©but initialisation GooglePlayBillingService...")
            Log.d(TAG, "üì± Context type: ${context.javaClass.simpleName}")
            Log.d(TAG, "üîå Thread: ${Thread.currentThread().name}")
            Log.d(TAG, "üîå Process ID: ${android.os.Process.myPid()}")
            
            // V√©rifier que Google Play Services est disponible
            checkGooglePlayServicesAvailability()
            
            // Initialiser avec d√©lai pour √©viter les crashs
            initializeBillingClientSafely()
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERREUR CRITIQUE dans init GooglePlayBillingService", e)
            Log.e(TAG, "‚ùå Exception type: ${e.javaClass.simpleName}")
            Log.e(TAG, "‚ùå Message: ${e.message}")
            Log.e(TAG, "‚ùå Cause: ${e.cause}")
            e.printStackTrace()
        }
    }
    
    // === Initialisation s√©curis√©e ===
    private fun checkGooglePlayServicesAvailability() {
        try {
            Log.d(TAG, "üîç V√©rification disponibilit√© Google Play Services...")
            val packageInfo = context.packageManager.getPackageInfo("com.android.vending", 0)
            Log.d(TAG, "‚úÖ Google Play Store d√©tect√© version: ${packageInfo.versionName}")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Google Play Store non d√©tect√©", e)
        }
    }
    
    private fun initializeBillingClientSafely() {
        Log.d(TAG, "üèóÔ∏è Initialisation s√©curis√©e du client Google Play Billing")
        
        try {
            Log.d(TAG, "üî® Cr√©ation BillingClient.Builder...")
            
            val builder = BillingClient.newBuilder(context)
            Log.d(TAG, "‚úÖ BillingClient.Builder cr√©√©")
            
            Log.d(TAG, "üîä Configuration du listener...")
            builder.setListener(this)
            Log.d(TAG, "‚úÖ Listener configur√©")
            
            Log.d(TAG, "üìã Activation des achats en attente...")
            builder.enablePendingPurchases()
            Log.d(TAG, "‚úÖ Achats en attente activ√©s")
            
            Log.d(TAG, "üè† Construction du BillingClient...")
            billingClient = builder.build()
            Log.d(TAG, "‚úÖ BillingClient construit avec succ√®s")
            
            // Attendre un peu avant de se connecter pour √©viter les crashes
            serviceScope.launch {
                kotlinx.coroutines.delay(1000) // 1 seconde de d√©lai
                Log.d(TAG, "üîå D√©marrage connexion au service avec d√©lai...")
                connectToBillingServiceSafely()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERREUR lors de l'initialisation du BillingClient", e)
            Log.e(TAG, "‚ùå D√©tails: ${e.message}")
            e.printStackTrace()
        }
    }
    
    // === Initialisation legacy (backup) ===
    private fun initializeBillingClient() {
        Log.d(TAG, "üèóÔ∏è Initialisation du client Google Play Billing")
        
        billingClient = BillingClient.newBuilder(context)
            .setListener(this)
            .enablePendingPurchases()
            .build()
            
        connectToBillingService()
    }
    
    private fun connectToBillingServiceSafely() {
        try {
            Log.d(TAG, "üîí Connexion s√©curis√©e au service Google Play Billing...")
            
            billingClient?.let { client ->
                Log.d(TAG, "üîç V√©rification √©tat du client...")
                
                if (client.isReady) {
                    Log.d(TAG, "‚úÖ Client d√©j√† connect√©")
                    _billingConnectionState.value = BillingConnectionState.CONNECTED
                    loadProductDetails()
                    return
                }
                
                Log.d(TAG, "üîå D√©marrage connexion au service Google Play Billing...")
                _billingConnectionState.value = BillingConnectionState.CONNECTING
                
                client.startConnection(object : BillingClientStateListener {
                    override fun onBillingSetupFinished(billingResult: BillingResult) {
                        try {
                            Log.d(TAG, "üìù R√©sultat connexion: code=${billingResult.responseCode}, debug=${billingResult.debugMessage}")
                            
                            if (billingResult.responseCode == BillingResponseCode.OK) {
                                Log.d(TAG, "‚úÖ Connexion √©tablie avec Google Play Billing")
                                _billingConnectionState.value = BillingConnectionState.CONNECTED
                                loadProductDetails()
                                checkExistingPurchases()
                            } else {
                                Log.e(TAG, "‚ùå Erreur de connexion: code=${billingResult.responseCode}, debug=${billingResult.debugMessage}")
                                _billingConnectionState.value = BillingConnectionState.ERROR
                                _errorMessage.value = "Erreur de connexion au service de paiement (code: ${billingResult.responseCode})"
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå ERREUR dans onBillingSetupFinished", e)
                        }
                    }
                    
                    override fun onBillingServiceDisconnected() {
                        try {
                            Log.w(TAG, "‚ö†Ô∏è Service Google Play Billing d√©connect√©")
                            _billingConnectionState.value = BillingConnectionState.DISCONNECTED
                            
                            // Retry de connexion apr√®s d√©lai
                            serviceScope.launch {
                                kotlinx.coroutines.delay(3000) // Attendre 3 secondes
                                Log.d(TAG, "üîÑ Tentative de reconnexion...")
                                connectToBillingServiceSafely()
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ùå ERREUR dans onBillingServiceDisconnected", e)
                        }
                    }
                })
            } ?: run {
                Log.e(TAG, "‚ùå BillingClient est null!")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERREUR lors de la connexion au service", e)
            e.printStackTrace()
        }
    }
    
    private fun connectToBillingService() {
        billingClient?.let { client ->
            if (client.isReady) {
                Log.d(TAG, "‚úÖ Client d√©j√† connect√©")
                _billingConnectionState.value = BillingConnectionState.CONNECTED
                loadProductDetails()
                return
            }
            
            Log.d(TAG, "üîå Connexion au service Google Play Billing...")
            _billingConnectionState.value = BillingConnectionState.CONNECTING
            
            client.startConnection(object : BillingClientStateListener {
                override fun onBillingSetupFinished(billingResult: BillingResult) {
                    if (billingResult.responseCode == BillingResponseCode.OK) {
                        Log.d(TAG, "‚úÖ Connexion √©tablie avec Google Play Billing")
                        _billingConnectionState.value = BillingConnectionState.CONNECTED
                        loadProductDetails()
                        checkExistingPurchases()
                    } else {
                        Log.e(TAG, "‚ùå Erreur de connexion: ${billingResult.debugMessage}")
                        _billingConnectionState.value = BillingConnectionState.ERROR
                        _errorMessage.value = "Erreur de connexion au service de paiement"
                    }
                }
                
                override fun onBillingServiceDisconnected() {
                    Log.w(TAG, "‚ö†Ô∏è Service Google Play Billing d√©connect√©")
                    _billingConnectionState.value = BillingConnectionState.DISCONNECTED
                }
            })
        }
    }
    
    // === Chargement des d√©tails produits ===
    private fun loadProductDetails() {
        Log.d(TAG, "üì¶ Chargement des d√©tails produits...")
        
        val productList = SubscriptionPlanType.values().map { plan ->
            QueryProductDetailsParams.Product.newBuilder()
                .setProductId(plan.productId)
                .setProductType(BillingClient.ProductType.SUBS)
                .build()
        }
        
        val params = QueryProductDetailsParams.newBuilder()
            .setProductList(productList)
            .build()
            
        billingClient?.queryProductDetailsAsync(params) { billingResult, productDetailsList ->
            if (billingResult.responseCode == BillingResponseCode.OK) {
                Log.d(TAG, "‚úÖ D√©tails produits charg√©s: ${productDetailsList.size} produits")
                
                val detailsMap = mutableMapOf<SubscriptionPlanType, String>()
                val pricingMap = mutableMapOf<SubscriptionPlanType, ProductPricing>()
                
                productDetailsList.forEach { productDetails ->
                    val planType = SubscriptionPlanType.values().find { it.productId == productDetails.productId }
                    planType?.let { plan ->
                        val pricingPhase = productDetails.subscriptionOfferDetails?.firstOrNull()?.pricingPhases?.pricingPhaseList?.firstOrNull()
                        val price = pricingPhase?.formattedPrice ?: "N/A"
                        detailsMap[plan] = price
                        
                        if (pricingPhase != null) {
                            pricingMap[plan] = ProductPricing(
                                formattedPrice = price,
                                priceAmountMicros = pricingPhase.priceAmountMicros,
                                priceCurrencyCode = pricingPhase.priceCurrencyCode
                            )
                            Log.d(TAG, "üí∞ ${plan.name}: $price (${pricingPhase.priceAmountMicros} micros, ${pricingPhase.priceCurrencyCode})")
                        } else {
                            Log.d(TAG, "üí∞ ${plan.name}: $price")
                        }
                    }
                }
                
                _productDetails.value = detailsMap
                _productPricing.value = pricingMap
            } else {
                Log.e(TAG, "‚ùå Erreur chargement produits: ${billingResult.debugMessage}")
                _errorMessage.value = "Impossible de charger les informations d'abonnement"
            }
        }
    }
    
    // === V√©rification des achats existants ===
    private fun checkExistingPurchases() {
        Log.d(TAG, "üîç V√©rification des achats existants...")
        
        val params = QueryPurchasesParams.newBuilder()
            .setProductType(BillingClient.ProductType.SUBS)
            .build()
            
        billingClient?.queryPurchasesAsync(params) { billingResult, purchases ->
            if (billingResult.responseCode == BillingResponseCode.OK) {
                Log.d(TAG, "‚úÖ Achats trouv√©s: ${purchases.size}")
                
                // Trouver un abonnement Google Play actif
                val activePurchase = purchases.find { purchase ->
                    purchase.purchaseState == Purchase.PurchaseState.PURCHASED &&
                    SubscriptionPlanType.values().any { it.productId in purchase.products }
                }
                
                if (activePurchase != null) {
                    Log.d(TAG, "üîç Abonnement Google Play trouv√© - Validation serveur...")
                    
                    // üî• CRITIQUE: Mettre imm√©diatement √† jour l'AppState pour √©viter de garder les cat√©gories verrouill√©es
                    _isSubscribed.value = true
                    try {
                        com.love2loveapp.AppDelegate.appState.updateUserSubscriptionStatus(true)
                        Log.d(TAG, "‚úÖ AppState mis √† jour pour abonnement existant")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur mise √† jour AppState pour abonnement existant", e)
                    }
                    
                    validateSubscriptionWithServer(activePurchase)
                } else {
                    Log.d(TAG, "‚ùå Aucun abonnement Google Play actif")
                    _isSubscribed.value = false
                    try {
                        com.love2loveapp.AppDelegate.appState.updateUserSubscriptionStatus(false)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur mise √† jour AppState pour aucun abonnement", e)
                    }
                }
            } else {
                Log.e(TAG, "‚ùå Erreur v√©rification achats: ${billingResult.debugMessage}")
                _isSubscribed.value = false
            }
        }
    }
    
    /**
     * Valide un abonnement avec le serveur Firebase
     * V√©rifie que le compte Firebase existe et que l'abonnement est toujours valide
     */
    private fun validateSubscriptionWithServer(purchase: Purchase) {
        serviceScope.launch {
            try {
                Log.d(TAG, "üîç Validation serveur de l'abonnement...")
                
                // V√©rifier si l'utilisateur Firebase existe et a un abonnement valide
                val currentUser = auth.currentUser
                if (currentUser == null) {
                    Log.d(TAG, "‚ùå Utilisateur Firebase non connect√© - abonnement non valide")
                    _isSubscribed.value = false
                    return@launch
                }
                
                // V√©rifier le document utilisateur dans Firestore
                val userDoc = firestore.collection("users").document(currentUser.uid)
                    .get()
                    .await()
                
                if (!userDoc.exists()) {
                    Log.d(TAG, "‚ùå Document utilisateur inexistant - compte supprim√©")
                    _isSubscribed.value = false
                    return@launch
                }
                
                // V√©rifier l'√©tat d'abonnement c√¥t√© serveur
                val userData = userDoc.data
                val isSubscribedOnServer = userData?.get("isSubscribed") as? Boolean ?: false
                
                if (isSubscribedOnServer) {
                    Log.d(TAG, "‚úÖ Abonnement valid√© c√¥t√© serveur")
                    _isSubscribed.value = true
                } else {
                    Log.d(TAG, "‚ö†Ô∏è Abonnement Google Play actif mais non valid√© c√¥t√© serveur")
                    // Tenter de synchroniser avec Firebase Cloud Functions
                    validatePurchaseWithCloudFunction(purchase)
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur validation serveur: ${e.message}", e)
                // En cas d'erreur, √™tre conservateur et ne pas activer l'abonnement
                _isSubscribed.value = false
            }
        }
    }
    
    /**
     * Valide l'abonnement via Firebase Cloud Functions
     */
    private fun validatePurchaseWithCloudFunction(purchase: Purchase) {
        serviceScope.launch {
            try {
                Log.d(TAG, "‚òÅÔ∏è Validation via Cloud Functions...")
                
                val productId = purchase.products.first()
                val data = hashMapOf(
                    "purchaseToken" to purchase.purchaseToken,
                    "productId" to productId
                )
                
                val result = functions
                    .getHttpsCallable("validateGooglePlaySubscription")
                    .call(data)
                    .await()
                
                val resultData = result.data as? Map<*, *>
                val isValid = resultData?.get("isValid") as? Boolean ?: false
                
                if (isValid) {
                    Log.d(TAG, "‚úÖ Abonnement valid√© par Cloud Functions")
                    _isSubscribed.value = true
                } else {
                    Log.d(TAG, "‚ùå Abonnement rejet√© par Cloud Functions")
                    _isSubscribed.value = false
                }
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur validation Cloud Functions: ${e.message}", e)
                _isSubscribed.value = false
            }
        }
    }
    
    // === M√©thodes publiques (√©quivalent aux m√©thodes iOS) ===
    
    fun selectPlan(plan: SubscriptionPlanType) {
        Log.d(TAG, "üìã Plan s√©lectionn√©: ${plan.name}")
        _selectedPlan.value = plan
    }
    
    /**
     * Calcule le prix par utilisateur avec la devise correcte
     */
    fun calculatePricePerUser(planType: SubscriptionPlanType): String {
        val pricing = _productPricing.value[planType] ?: return "N/A"
        
        // Divise le prix en micros par 2 pour avoir le prix par utilisateur
        val pricePerUserMicros = pricing.priceAmountMicros / 2
        
        // Convertit les micros en unit√© mon√©taire (1 000 000 micros = 1 unit√©)
        val pricePerUserAmount = pricePerUserMicros / 1_000_000.0
        
        // Formate avec la devise correcte selon la locale du syst√®me
        return try {
            val currency = java.util.Currency.getInstance(pricing.priceCurrencyCode)
            val formatter = java.text.NumberFormat.getCurrencyInstance()
            formatter.currency = currency
            formatter.format(pricePerUserAmount)
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è Erreur formatage devise ${pricing.priceCurrencyCode}: ${e.message}")
            // Fallback : utilise le formatage simple avec le code devise
            String.format("%.2f %s", pricePerUserAmount, pricing.priceCurrencyCode)
        }
    }
    
    suspend fun purchaseSubscription(activity: Activity): Boolean {
        Log.d(TAG, "üí≥ D√©marrage de l'achat pour ${_selectedPlan.value.name}")
        _isLoading.value = true
        _errorMessage.value = null
        
        return try {
            val success = launchBillingFlow(activity, _selectedPlan.value)
            if (!success) {
                _errorMessage.value = "Impossible de d√©marrer le processus d'achat"
            }
            success
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de l'achat", e)
            _errorMessage.value = "Erreur lors de l'achat: ${e.message}"
            false
        } finally {
            _isLoading.value = false
        }
    }
    
    private suspend fun launchBillingFlow(activity: Activity, plan: SubscriptionPlanType): Boolean {
        return suspendCancellableCoroutine { continuation ->
            Log.d(TAG, "üöÄ Lancement du flow de billing pour ${plan.name}")
            
            try {
                // V√©rifier que le client est connect√©
                val client = billingClient
                if (client == null || !client.isReady) {
                    Log.e(TAG, "‚ùå Client billing non connect√©")
                    continuation.resume(false)
                    return@suspendCancellableCoroutine
                }

                // R√©cup√©rer les d√©tails du produit depuis le cache
                val productList = listOf(
                    QueryProductDetailsParams.Product.newBuilder()
                        .setProductId(plan.productId)
                        .setProductType(BillingClient.ProductType.SUBS)
                        .build()
                )

                val params = QueryProductDetailsParams.newBuilder()
                    .setProductList(productList)
                    .build()

                client.queryProductDetailsAsync(params) { billingResult, productDetailsList ->
                    if (billingResult.responseCode == BillingResponseCode.OK && productDetailsList.isNotEmpty()) {
                        val productDetails = productDetailsList.first()
                        val offerToken = productDetails.subscriptionOfferDetails?.firstOrNull()?.offerToken

                        if (offerToken != null) {
                            // Cr√©er les param√®tres de billing flow
                            val productDetailsParamsList = listOf(
                                BillingFlowParams.ProductDetailsParams.newBuilder()
                                    .setProductDetails(productDetails)
                                    .setOfferToken(offerToken)
                                    .build()
                            )

                            val billingFlowParams = BillingFlowParams.newBuilder()
                                .setProductDetailsParamsList(productDetailsParamsList)
                                .build()

                            // Lancer le flow de billing
                            val result = client.launchBillingFlow(activity, billingFlowParams)
                            val success = result.responseCode == BillingResponseCode.OK
                            
                            Log.d(TAG, if (success) "‚úÖ Flow de billing lanc√© avec succ√®s" else "‚ùå Erreur lancement flow: ${result.debugMessage}")
                            continuation.resume(success)
                        } else {
                            Log.e(TAG, "‚ùå Offer token non trouv√©")
                            continuation.resume(false)
                        }
                    } else {
                        Log.e(TAG, "‚ùå Erreur r√©cup√©ration d√©tails produit: ${billingResult.debugMessage}")
                        continuation.resume(false)
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Exception lors du lancement du flow", e)
                continuation.resume(false)
            }
        }
    }
    
    suspend fun restorePurchases(): Boolean {
        Log.d(TAG, "üîÑ Restauration des achats...")
        _isLoading.value = true
        _errorMessage.value = null
        
        return try {
            checkExistingPurchases()
            true
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur restauration", e)
            _errorMessage.value = "Erreur lors de la restauration: ${e.message}"
            false
        } finally {
            _isLoading.value = false
        }
    }
    
    fun clearError() {
        _errorMessage.value = null
    }
    
    // === Validation Firebase (√©quivalent iOS) ===
    private suspend fun validatePurchaseWithFirebase(purchase: Purchase): Boolean {
        return try {
            Log.d(TAG, "üî• Validation Firebase pour ${purchase.products}")
            
            val data = hashMapOf(
                "productId" to purchase.products.first(),
                "purchaseToken" to purchase.purchaseToken
            )
            
            val result = functions
                .getHttpsCallable("validateGooglePurchase")
                .call(data)
                .await()
                
            val isValid = result.data as? Boolean ?: false
            Log.d(TAG, if (isValid) "‚úÖ Achat valid√© par Firebase" else "‚ùå Achat rejet√© par Firebase")
            isValid
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur validation Firebase", e)
            
            // üî• FALLBACK: Si la validation Firebase √©choue, on met √† jour Firestore localement
            // pour √©viter de perdre l'abonnement au red√©marrage
            try {
                Log.w(TAG, "üîÑ Fallback: Mise √† jour Firestore locale pour √©viter la perte d'abonnement")
                val userId = auth.currentUser?.uid
                if (userId != null) {
                    firestore.collection("users").document(userId)
                        .set(mapOf("isSubscribed" to true), com.google.firebase.firestore.SetOptions.merge())
                        .addOnSuccessListener { 
                            Log.d(TAG, "‚úÖ Fallback Firestore r√©ussi")
                        }
                        .addOnFailureListener { error ->
                            Log.e(TAG, "‚ùå Fallback Firestore √©chou√©", error)
                        }
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Impossible de faire le fallback - utilisateur non connect√©")
                }
            } catch (fallbackError: Exception) {
                Log.e(TAG, "‚ùå Erreur fallback Firestore", fallbackError)
            }
            
            false
        }
    }
    
    // === Helper pour les codes de r√©ponse ===
    private fun getResponseCodeName(responseCode: Int): String {
        return when (responseCode) {
            BillingResponseCode.OK -> "OK"
            BillingResponseCode.USER_CANCELED -> "USER_CANCELED"
            BillingResponseCode.SERVICE_UNAVAILABLE -> "SERVICE_UNAVAILABLE"
            BillingResponseCode.BILLING_UNAVAILABLE -> "BILLING_UNAVAILABLE"
            BillingResponseCode.ITEM_UNAVAILABLE -> "ITEM_UNAVAILABLE"
            BillingResponseCode.DEVELOPER_ERROR -> "DEVELOPER_ERROR"
            BillingResponseCode.ERROR -> "ERROR"
            BillingResponseCode.ITEM_ALREADY_OWNED -> "ITEM_ALREADY_OWNED"
            BillingResponseCode.ITEM_NOT_OWNED -> "ITEM_NOT_OWNED"
            else -> "UNKNOWN_$responseCode"
        }
    }
    
    // === Callback des achats ===
    override fun onPurchasesUpdated(billingResult: BillingResult, purchases: MutableList<Purchase>?) {
        try {
            Log.d(TAG, "üì¶ CALLBACK onPurchasesUpdated re√ßu")
            Log.d(TAG, "üìä Code: ${billingResult.responseCode} (${getResponseCodeName(billingResult.responseCode)})")
            Log.d(TAG, "üìù Debug: ${billingResult.debugMessage}")
            Log.d(TAG, "üõí Achats: ${purchases?.size ?: "null"}")
            Log.d(TAG, "üîå Thread: ${Thread.currentThread().name}")
            
            // Analyser en d√©tail le response code
            when (billingResult.responseCode) {
                BillingResponseCode.OK -> Log.d(TAG, "‚úÖ Response: OK")
                BillingResponseCode.USER_CANCELED -> Log.d(TAG, "‚ùå Response: USER_CANCELED")
                BillingResponseCode.SERVICE_UNAVAILABLE -> Log.d(TAG, "‚ùå Response: SERVICE_UNAVAILABLE") 
                BillingResponseCode.BILLING_UNAVAILABLE -> Log.d(TAG, "‚ùå Response: BILLING_UNAVAILABLE")
                BillingResponseCode.ITEM_UNAVAILABLE -> Log.d(TAG, "‚ùå Response: ITEM_UNAVAILABLE")
                BillingResponseCode.DEVELOPER_ERROR -> Log.d(TAG, "‚ùå Response: DEVELOPER_ERROR")
                BillingResponseCode.ERROR -> Log.d(TAG, "‚ùå Response: ERROR (probl√®me Google Play)")
                BillingResponseCode.ITEM_ALREADY_OWNED -> Log.d(TAG, "‚ö†Ô∏è Response: ITEM_ALREADY_OWNED")
                BillingResponseCode.ITEM_NOT_OWNED -> Log.d(TAG, "‚ö†Ô∏è Response: ITEM_NOT_OWNED")
                else -> Log.d(TAG, "‚ùì Response: CODE INCONNU ${billingResult.responseCode}")
            }
            
            // G√©rer sp√©cifiquement le code 6 (ERROR) qui cause le crash
            if (billingResult.responseCode == BillingResponseCode.ERROR) {
                Log.w(TAG, "‚ö†Ô∏è Code erreur 6 re√ßu - Gestion sp√©ciale pour √©viter le crash")
                Log.w(TAG, "üìã D√©tail erreur: ${billingResult.debugMessage}")
                _errorMessage.value = "Probl√®me temporaire avec Google Play. Veuillez r√©essayer."
                _isLoading.value = false
                return
            }
            
            if (billingResult.responseCode == BillingResponseCode.OK && purchases != null) {
                Log.d(TAG, "‚úÖ Achat mis √† jour: ${purchases.size} achats")
                
                purchases.forEach { purchase ->
                    when (purchase.purchaseState) {
                        Purchase.PurchaseState.PURCHASED -> {
                            Log.d(TAG, "üéâ Achat r√©ussi: [PRODUCT_MASKED]")
                            handleSuccessfulPurchase(purchase)
                        }
                        Purchase.PurchaseState.PENDING -> {
                            Log.d(TAG, "‚è≥ Achat en attente: ${purchase.products}")
                            _errorMessage.value = "Achat en cours de traitement..."
                        }
                        else -> {
                            Log.w(TAG, "‚ö†Ô∏è √âtat d'achat inattendu: ${purchase.purchaseState}")
                        }
                    }
                }
            } else {
                Log.e(TAG, "‚ùå Erreur achat code=${billingResult.responseCode}: ${billingResult.debugMessage}")
                handlePurchaseError(billingResult.responseCode, billingResult.debugMessage)
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Exception dans onPurchasesUpdated", e)
            _errorMessage.value = "Erreur inattendue lors de l'achat"
        } finally {
            _isLoading.value = false
        }
    }
    
    private fun handleSuccessfulPurchase(purchase: Purchase) {
        try {
            // üë§ Identifier le type de compte pour les logs
            val currentUser = auth.currentUser
            val accountType = if (currentUser?.isAnonymous == true) "Compte invit√©" else "Compte Google"
            Log.d(TAG, "üéØ Traitement achat pour $accountType - UID: [MASKED]")
            
            // Marquer imm√©diatement comme abonn√© pour √©viter les √©tats incoh√©rents
            _isSubscribed.value = true
            
            // üî• CRITIQUE: Mettre √† jour imm√©diatement l'AppState pour d√©bloquer les cat√©gories premium
            try {
                com.love2loveapp.AppDelegate.appState.updateUserSubscriptionStatus(true)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur mise √† jour AppState apr√®s achat", e)
            }
            
            // üéâ Afficher notification de succ√®s d'achat
            notificationService.showSubscriptionPurchaseSuccessNotification()
            Log.d(TAG, "üéâ Notification succ√®s d'achat affich√©e")
            
            // Validation Firebase en arri√®re-plan (sans bloquer l'UI)
            // Dans une coroutine pour √©viter de bloquer le thread principal
            serviceScope.launch {
                try {
                    val isValid = validatePurchaseWithFirebase(purchase)
                    if (!isValid) {
                        Log.w(TAG, "‚ö†Ô∏è Validation Firebase √©chou√©e mais achat accept√© localement")
                        // En cas d'√©chec de validation, on garde l'abonnement actif 
                        // pour √©viter de frustrer l'utilisateur
                    }
                    
                    // Acknowledger l'achat si n√©cessaire
                    if (!purchase.isAcknowledged) {
                        acknowledgePurchase(purchase)
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erreur post-achat", e)
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur traitement achat r√©ussi", e)
        }
    }
    
    private fun handlePurchaseError(responseCode: Int, debugMessage: String?) {
        _errorMessage.value = when (responseCode) {
            BillingResponseCode.USER_CANCELED -> {
                // Ne pas afficher de message d'erreur pour les annulations
                // L'utilisateur revient simplement au paywall
                Log.d(TAG, "üëã Utilisateur a annul√© l'achat - retour au paywall")
                null
            }
            BillingResponseCode.ITEM_ALREADY_OWNED -> {
                // Si l'utilisateur poss√®de d√©j√† l'item, mettre √† jour l'√©tat
                _isSubscribed.value = true
                
                // üî• CRITIQUE: Mettre √† jour aussi l'AppState pour d√©bloquer les cat√©gories premium
                try {
                    com.love2loveapp.AppDelegate.appState.updateUserSubscriptionStatus(true)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erreur mise √† jour AppState pour abonnement existant", e)
                }
                
                "Vous √™tes d√©j√† abonn√©"
            }
            BillingResponseCode.SERVICE_UNAVAILABLE -> "Service indisponible, r√©essayez plus tard"
            BillingResponseCode.BILLING_UNAVAILABLE -> "Facturation non disponible sur cet appareil"
            BillingResponseCode.DEVELOPER_ERROR -> "Erreur de configuration (ID produit invalide)"
            BillingResponseCode.ERROR -> "Erreur de connexion, v√©rifiez votre connexion"
            BillingResponseCode.SERVICE_DISCONNECTED -> {
                // Reconnecter automatiquement
                connectToBillingService()
                "Connexion perdue, reconnexion en cours..."
            }
            else -> "Erreur lors de l'achat: $debugMessage"
        }
    }
    
    private suspend fun acknowledgePurchase(purchase: Purchase) {
        try {
            billingClient?.let { client ->
                val params = AcknowledgePurchaseParams.newBuilder()
                    .setPurchaseToken(purchase.purchaseToken)
                    .build()
                    
                val result = withContext(Dispatchers.IO) {
                    suspendCancellableCoroutine<BillingResult> { continuation ->
                        client.acknowledgePurchase(params) { billingResult ->
                            continuation.resume(billingResult)
                        }
                    }
                }
                
                if (result.responseCode == BillingResponseCode.OK) {
                    Log.d(TAG, "‚úÖ Achat acknowledg√© avec succ√®s")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è √âchec acknowledgement: ${result.debugMessage}")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur acknowledgement", e)
        }
    }
    
    // === Nettoyage ===
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage du service billing")
        try {
            serviceScope.coroutineContext.cancel()
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è Erreur annulation des coroutines", e)
        }
        billingClient?.endConnection()
        billingClient = null
    }
}