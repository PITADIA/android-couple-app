package com.love2loveapp.services.firebase

import android.util.Log
import com.google.firebase.functions.FirebaseFunctions
import kotlinx.coroutines.tasks.await
import com.love2loveapp.models.UserLocation

/**
 * üî• FirebaseProfileService - Client Android pour Cloud Functions photos/localisation
 * 
 * Int√©gration avec les Cloud Functions existantes dans index.js:
 * - getPartnerInfo() - Informations partenaire + profileImageURL
 * - getPartnerProfileImage() - URL sign√©e temporaire (1h)
 * - getPartnerLocation() - Coordonn√©es GPS partenaire
 * - getSignedImageURL() - URLs sign√©es g√©n√©riques
 */
class FirebaseProfileService {
    
    companion object {
        private const val TAG = "FirebaseProfileService"
        
        @Volatile
        private var instance: FirebaseProfileService? = null
        
        fun getInstance(): FirebaseProfileService {
            return instance ?: synchronized(this) {
                instance ?: FirebaseProfileService().also { instance = it }
            }
        }
    }
    
    private val functions = FirebaseFunctions.getInstance()
    
    /**
     * üë• R√©cup√®re les informations du partenaire (nom, abonnement, URL photo)
     * √âquivalent Cloud Function: getPartnerInfo
     */
    suspend fun getPartnerInfo(partnerId: String): Result<PartnerInfo> {
        return try {
            Log.d(TAG, "üë• R√©cup√©ration info partenaire: $partnerId")
            
            val data = hashMapOf("partnerId" to partnerId)
            val result = functions
                .getHttpsCallable("getPartnerInfo")
                .call(data)
                .await()
            
            val response = result.data as Map<String, Any>
            if (response["success"] == true) {
                val partnerInfo = response["partnerInfo"] as Map<String, Any>
                val info = PartnerInfo(
                    name = partnerInfo["name"] as? String ?: "Partenaire",
                    isSubscribed = partnerInfo["isSubscribed"] as? Boolean ?: false,
                    profileImageURL = partnerInfo["profileImageURL"] as? String
                )
                
                Log.d(TAG, "‚úÖ Info partenaire r√©cup√©r√©es: ${info.name}, photo: ${info.profileImageURL != null}")
                Result.success(info)
            } else {
                Log.w(TAG, "‚ö†Ô∏è √âchec r√©cup√©ration info partenaire")
                Result.failure(Exception("√âchec r√©cup√©ration info partenaire"))
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur getPartnerInfo: ${e.message}", e)
            Result.failure(e)
        }
    }
    
    /**
     * üìç R√©cup√®re la localisation du partenaire
     * √âquivalent Cloud Function: getPartnerLocation
     */
    suspend fun getPartnerLocation(partnerId: String): Result<UserLocation?> {
        return try {
            Log.d(TAG, "üìç R√©cup√©ration localisation partenaire: $partnerId")
            
            val data = hashMapOf("partnerId" to partnerId)
            val result = functions
                .getHttpsCallable("getPartnerLocation")
                .call(data)
                .await()
            
            val response = result.data as Map<String, Any>
            if (response["success"] == true) {
                val location = response["location"] as Map<String, Any>
                val userLocation = UserLocation(
                    latitude = location["latitude"] as Double,
                    longitude = location["longitude"] as Double,
                    address = location["address"] as? String,
                    city = location["city"] as? String,
                    country = location["country"] as? String,
                    lastUpdated = (location["lastUpdated"] as? Number)?.toLong() ?: System.currentTimeMillis()
                )
                
                Log.d(TAG, "‚úÖ Localisation partenaire trouv√©e: ${userLocation.city}")
                Result.success(userLocation)
            } else {
                val reason = response["reason"] as? String
                Log.d(TAG, "‚ÑπÔ∏è Pas de localisation partenaire: $reason")
                Result.success(null) // Pas de localisation disponible
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur getPartnerLocation: ${e.message}", e)
            Result.failure(e)
        }
    }
    
    /**
     * üñºÔ∏è R√©cup√®re une URL sign√©e temporaire pour la photo du partenaire
     * √âquivalent Cloud Function: getPartnerProfileImage
     */
    suspend fun getPartnerProfileImage(partnerId: String): Result<String?> {
        return try {
            Log.d(TAG, "üñºÔ∏è R√©cup√©ration URL photo partenaire: $partnerId")
            
            val data = hashMapOf("partnerId" to partnerId)
            val result = functions
                .getHttpsCallable("getPartnerProfileImage")
                .call(data)
                .await()
            
            val response = result.data as Map<String, Any>
            if (response["success"] == true) {
                val imageUrl = response["imageUrl"] as String
                val expiresIn = response["expiresIn"] as? Number ?: 3600
                
                Log.d(TAG, "‚úÖ URL sign√©e photo partenaire (expire dans ${expiresIn}s)")
                Result.success(imageUrl)
            } else {
                val reason = response["reason"] as? String
                Log.d(TAG, "‚ÑπÔ∏è Pas de photo partenaire: $reason")
                Result.success(null) // Pas d'image disponible
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur getPartnerProfileImage: ${e.message}", e)
            Result.failure(e)
        }
    }
    
    /**
     * üîí G√©n√®re une URL sign√©e pour n'importe quelle image
     * √âquivalent Cloud Function: getSignedImageURL
     */
    suspend fun getSignedImageURL(filePath: String): Result<String?> {
        return try {
            Log.d(TAG, "üîí G√©n√©ration URL sign√©e: $filePath")
            
            val data = hashMapOf("filePath" to filePath)
            val result = functions
                .getHttpsCallable("getSignedImageURL")
                .call(data)
                .await()
            
            val response = result.data as Map<String, Any>
            if (response["success"] == true) {
                val signedUrl = response["signedUrl"] as String
                val expiresIn = response["expiresIn"] as? Number ?: 3600
                
                Log.d(TAG, "‚úÖ URL sign√©e g√©n√©r√©e (expire dans ${expiresIn}s)")
                Result.success(signedUrl)
            } else {
                Log.w(TAG, "‚ö†Ô∏è √âchec g√©n√©ration URL sign√©e")
                Result.failure(Exception("√âchec g√©n√©ration URL sign√©e"))
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur getSignedImageURL: ${e.message}", e)
            Result.failure(e)
        }
    }
}

/**
 * üìä Mod√®le des informations partenaire
 */
data class PartnerInfo(
    val name: String,
    val isSubscribed: Boolean,
    val profileImageURL: String?
)
