package com.love2loveapp.services.cache

import android.content.Context
import android.util.Log
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

/**
 * üèóÔ∏è CacheManager Android - Orchestrateur Central Cache Sophistiqu√©
 * 
 * Architecture √©quivalente √† l'ensemble des services cache iOS:
 * - UserCacheManager ‚Üí UserCacheManager iOS
 * - ImageCacheService ‚Üí ImageCacheService iOS
 * - QuestionCacheManager ‚Üí QuestionCacheManager (Realm) iOS
 * - FavoritesService ‚Üí FavoritesService iOS
 * - JournalService ‚Üí JournalService iOS
 * - PartnerLocationService ‚Üí PartnerLocationService iOS
 * - WidgetCacheService ‚Üí WidgetService iOS
 * - NetworkCacheConfig ‚Üí URLCache iOS
 * 
 * Point d'entr√©e unique pour tout le syst√®me de cache
 * Coordination et orchestration de tous les caches
 * √âquivalent de l'architecture cache compl√®te iOS
 */
class CacheManager private constructor(private val context: Context) {
    
    companion object {
        private const val TAG = "CacheManager"
        
        @Volatile
        private var instance: CacheManager? = null
        
        fun getInstance(context: Context): CacheManager {
            return instance ?: synchronized(this) {
                instance ?: CacheManager(context.applicationContext).also { instance = it }
            }
        }
    }
    
    // =======================
    // COMPOSANTS CACHE (√©quivalent iOS)
    // =======================
    
    // Cache utilisateur (√©quivalent UserCacheManager iOS)
    val userCache: UserCacheManager by lazy {
        UserCacheManager.getInstance(context)
    }
    
    // Cache images (√©quivalent ImageCacheService iOS)
    val imageCache: ImageCacheService by lazy {
        ImageCacheService.getInstance(context)
    }
    
    // Cache questions/d√©fis (√©quivalent Realm iOS)
    val questionCache: QuestionCacheManager by lazy {
        QuestionCacheManager.getInstance(context)
    }
    
    // Cache favoris (√©quivalent FavoritesService iOS)
    val favoritesCache: FavoritesService by lazy {
        FavoritesService.getInstance(context)
    }
    
    // Cache journal (√©quivalent JournalService iOS)
    val journalCache: JournalService by lazy {
        JournalService.getInstance(context)
    }
    
    // Cache localisation partenaire (√©quivalent PartnerLocationService iOS)
    val partnerLocationCache: PartnerLocationService by lazy {
        PartnerLocationService.getInstance(context)
    }
    
    // Cache widgets (√©quivalent WidgetService iOS)
    val widgetCache: WidgetCacheService by lazy {
        WidgetCacheService.getInstance(context)
    }
    
    // √âtats globaux cache (√©quivalent @Published iOS)
    private val _isCacheInitialized = MutableStateFlow(false)
    val isCacheInitialized: StateFlow<Boolean> = _isCacheInitialized.asStateFlow()
    
    private val _cacheHealthStatus = MutableStateFlow(CacheHealthInfo(CacheHealthStatus.UNKNOWN))
    val cacheHealthStatus: StateFlow<CacheHealthInfo> = _cacheHealthStatus.asStateFlow()
    
    // Scope pour op√©rations cache
    private val cacheScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    
    init {
        Log.d(TAG, "‚úÖ CacheManager initialis√© - Orchestrateur central")
        
        // Initialiser syst√®me cache
        cacheScope.launch {
            initializeCacheSystem()
        }
    }
    
    // =======================
    // INITIALISATION SYST√àME (√©quivalent iOS)
    // =======================
    
    /**
     * Initialise tout le syst√®me de cache
     * √âquivalent de l'initialisation compl√®te iOS
     */
    private suspend fun initializeCacheSystem() {
        try {
            Log.d(TAG, "üöÄ Initialisation syst√®me cache sophistiqu√©...")
            
            // 1. V√©rifier sant√© des caches
            checkCacheHealth()
            
            // 2. Pr√©chargement intelligent
            performIntelligentPreloading()
            
            // 3. Configuration r√©seau
            configureNetworkCache()
            
            // 4. Nettoyage automatique
            scheduleAutomaticCleanup()
            
            _isCacheInitialized.value = true
            Log.d(TAG, "‚úÖ Syst√®me cache sophistiqu√© initialis√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur initialisation syst√®me cache: ${e.message}", e)
            _cacheHealthStatus.value = CacheHealthInfo(CacheHealthStatus.ERROR, e.message ?: "Erreur inconnue")
        }
    }
    
    /**
     * V√©rifie la sant√© de tous les caches
     * √âquivalent des v√©rifications sant√© iOS
     */
    private suspend fun checkCacheHealth() {
        try {
            Log.d(TAG, "üè• V√©rification sant√© syst√®me cache...")
            
            coroutineScope {
                val healthChecks = listOf(
                    async { checkUserCacheHealth() },
                    async { checkImageCacheHealth() },
                    async { checkQuestionCacheHealth() },
                    async { checkDatabaseHealth() }
                )
                
                val results = healthChecks.awaitAll()
                val allHealthy = results.all { it }
                
                _cacheHealthStatus.value = if (allHealthy) {
                    CacheHealthInfo(CacheHealthStatus.HEALTHY)
                } else {
                    CacheHealthInfo(CacheHealthStatus.WARNING, "Certains caches ont des probl√®mes")
                }
            }
            
            Log.d(TAG, "üè• Sant√© cache: ${_cacheHealthStatus.value}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur v√©rification sant√©: ${e.message}")
            _cacheHealthStatus.value = CacheHealthInfo(CacheHealthStatus.ERROR, e.message ?: "Erreur sant√©")
        }
    }
    
    private fun checkUserCacheHealth(): Boolean {
        return try {
            // V√©rifier si UserCacheManager fonctionne
            userCache.hasCachedUser() // Test basique
            true
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è UserCache probl√®me: ${e.message}")
            false
        }
    }
    
    private fun checkImageCacheHealth(): Boolean {
        return try {
            // V√©rifier si ImageCacheService fonctionne
            val metrics = imageCache.getCacheSize()
            metrics.memoryMaxMB > 0
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è ImageCache probl√®me: ${e.message}")
            false
        }
    }
    
    private suspend fun checkQuestionCacheHealth(): Boolean {
        return try {
            // V√©rifier si QuestionCacheManager fonctionne
            questionCache.isDatabaseAvailable.value
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è QuestionCache probl√®me: ${e.message}")
            false
        }
    }
    
    private fun checkDatabaseHealth(): Boolean {
        return try {
            // V√©rifier base de donn√©es Room
            val database = CacheDatabase.getDatabase(context)
            database.isOpen
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è Database probl√®me: ${e.message}")
            false
        }
    }
    
    /**
     * Pr√©chargement intelligent
     * √âquivalent de preloadEssentialCategories() iOS
     */
    private suspend fun performIntelligentPreloading() {
        try {
            Log.d(TAG, "‚ö° Pr√©chargement intelligent...")
            
            // Pr√©charger cat√©gories essentielles
            questionCache.preloadEssentialCategories()
            
            // Optimiser m√©moire
            imageCache.cleanupExpiredCache()
            
            Log.d(TAG, "‚úÖ Pr√©chargement termin√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur pr√©chargement: ${e.message}")
        }
    }
    
    /**
     * Configure le cache r√©seau
     */
    private fun configureNetworkCache() {
        try {
            Log.d(TAG, "üåê Configuration cache r√©seau...")
            
            // Configuration automatique via NetworkCacheConfig
            val metrics = NetworkCacheConfig.getCacheMetrics(context)
            Log.d(TAG, "üìä Cache r√©seau: ${metrics.cacheSizeMB}MB")
            
            Log.d(TAG, "‚úÖ Cache r√©seau configur√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur configuration r√©seau: ${e.message}")
        }
    }
    
    /**
     * Programme le nettoyage automatique
     * √âquivalent de scheduleAutomaticCleanup() iOS
     */
    private fun scheduleAutomaticCleanup() {
        cacheScope.launch {
            try {
                // Nettoyage p√©riodique toutes les 24h
                while (isActive) {
                    delay(24 * 60 * 60 * 1000L) // 24h
                    performAutomaticCleanup()
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur nettoyage automatique: ${e.message}")
            }
        }
    }
    
    // =======================
    // OP√âRATIONS GLOBALES CACHE (√©quivalent iOS)
    // =======================
    
    /**
     * Nettoyage automatique intelligent
     * √âquivalent shouldCompactOnLaunch iOS
     */
    private suspend fun performAutomaticCleanup() {
        try {
            Log.d(TAG, "üßπ Nettoyage automatique syst√®me cache...")
            
            // Nettoyer images expir√©es
            imageCache.cleanupExpiredCache()
            
            // Optimiser base de donn√©es
            questionCache.optimizeMemoryUsage()
            
            // Nettoyer widgets anciens
            widgetCache.cleanupOldImages()
            
            Log.d(TAG, "‚úÖ Nettoyage automatique termin√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage automatique: ${e.message}")
        }
    }
    
    /**
     * Vide TOUT le syst√®me de cache
     * √âquivalent clearCache() complet iOS
     */
    suspend fun clearAllCaches() {
        try {
            Log.d(TAG, "üóëÔ∏è NETTOYAGE COMPLET syst√®me cache...")
            
            // Nettoyer tous les caches
            coroutineScope {
                val cleanupJobs = listOf(
                    async { userCache.clearCache() },
                    async { imageCache.clearAllCache() },
                    async { questionCache.clearAllCache() },
                    async { favoritesCache.clearFavorites() },
                    async { partnerLocationCache.clearCache() },
                    async { widgetCache.clearWidgetCache() },
                    async { NetworkCacheConfig.clearNetworkCache(context) }
                )
                
                cleanupJobs.awaitAll()
            }
            
            Log.i(TAG, "üóëÔ∏è TOUT le syst√®me cache vid√©")
            
            // R√©initialiser √©tat
            _isCacheInitialized.value = false
            delay(1000)
            initializeCacheSystem()
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage complet: ${e.message}")
        }
    }
    
    /**
     * Synchronisation intelligente entre tous les caches
     * √âquivalent de la synchronisation multi-cache iOS
     */
    suspend fun syncAllCaches(
        userId: String? = null,
        coupleId: String? = null
    ) {
        try {
            Log.d(TAG, "üîÑ Synchronisation intelligente tous caches...")
            
            // Sync images ‚Üí widgets
            if (userId != null) {
                val userData = userCache.getCachedUser()
                val profileImage = userCache.getCachedProfileImage()
                val partnerImage = userCache.getCachedPartnerImage()
                
                if (userData != null) {
                    // TODO: Sync vers WidgetCache
                    Log.d(TAG, "üîÑ Sync UserCache ‚Üí Widget termin√©")
                }
            }
            
            // Sync questions ‚Üí cache local
            if (coupleId != null) {
                val todayQuestion = questionCache.getTodayQuestion(coupleId)
                if (todayQuestion != null) {
                    Log.d(TAG, "üîÑ Question du jour en cache: ${todayQuestion.questionKey}")
                }
            }
            
            Log.d(TAG, "‚úÖ Synchronisation compl√®te termin√©e")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur synchronisation: ${e.message}")
        }
    }
    
    // =======================
    // M√âTRIQUES ET DEBUG (√©quivalent iOS)
    // =======================
    
    data class CacheMetrics(
        val userCacheSize: String,
        val imageCacheSize: String,
        val questionCacheSize: String,
        val networkCacheSize: Long,
        val widgetCacheSize: Int,
        val totalCacheSize: String,
        val healthStatus: CacheHealthInfo
    )
    
    enum class CacheHealthStatus {
        UNKNOWN,
        HEALTHY,
        WARNING,
        ERROR
    }
    
    data class CacheHealthInfo(
        val status: CacheHealthStatus,
        val message: String = ""
    ) {
        override fun toString(): String = when (status) {
            CacheHealthStatus.UNKNOWN -> "Inconnu"
            CacheHealthStatus.HEALTHY -> "Sain"
            CacheHealthStatus.WARNING -> "Attention: $message"
            CacheHealthStatus.ERROR -> "Erreur: $message"
        }
    }
    
    /**
     * M√©triques compl√®tes syst√®me cache
     * √âquivalent des m√©triques debug iOS
     */
    suspend fun getCacheMetrics(): CacheMetrics {
        return try {
            val imageMetrics = imageCache.getCacheSize()
            val networkMetrics = NetworkCacheConfig.getCacheMetrics(context)
            val widgetCount = widgetCache.getActiveWidgetCount()
            
            CacheMetrics(
                userCacheSize = if (userCache.hasCachedUser()) "Utilisateur en cache" else "Vide",
                imageCacheSize = "${imageMetrics.memoryUsedMB}/${imageMetrics.memoryMaxMB}MB + ${imageMetrics.diskUsedMB}MB disque",
                questionCacheSize = if (questionCache.isDatabaseAvailable.value) "Base disponible" else "Indisponible",
                networkCacheSize = networkMetrics.cacheSizeMB,
                widgetCacheSize = widgetCount,
                totalCacheSize = "${(imageMetrics.diskUsedMB + networkMetrics.cacheSizeMB)}MB total",
                healthStatus = _cacheHealthStatus.value
            )
        } catch (e: Exception) {
            CacheMetrics(
                userCacheSize = "Erreur",
                imageCacheSize = "Erreur",
                questionCacheSize = "Erreur",
                networkCacheSize = 0L,
                widgetCacheSize = 0,
                totalCacheSize = "Erreur",
                healthStatus = CacheHealthInfo(CacheHealthStatus.ERROR, e.message ?: "Erreur metrics")
            )
        }
    }
    
    /**
     * Informations debug compl√®tes syst√®me
     * √âquivalent getDebugInfo() complet iOS
     */
    suspend fun getCompleteDebugInfo(): String {
        val metrics = getCacheMetrics()
        
        return """
            üèóÔ∏è DEBUG CacheManager - Syst√®me Cache Complet:
            
            üìä M√âTRIQUES GLOBALES:
            ${metrics}
            
            üë§ USER CACHE:
            ${userCache.getDebugInfo()}
            
            üñºÔ∏è IMAGE CACHE:
            ${imageCache.getDebugInfo()}
            
            üìù QUESTION CACHE:
            ${questionCache.getDebugInfo()}
            
            ‚≠ê FAVORITES CACHE:
            ${favoritesCache.getDebugInfo()}
            
            üìî JOURNAL CACHE:
            ${journalCache.getDebugInfo()}
            
            üó∫Ô∏è PARTNER LOCATION CACHE:
            ${partnerLocationCache.getDebugInfo()}
            
            üì± WIDGET CACHE:
            ${widgetCache.getDebugInfo()}
            
            üåê NETWORK CACHE:
            ${NetworkCacheConfig.getDebugInfo(context)}
            
            üè• SANT√â SYST√àME: ${_cacheHealthStatus.value}
            üöÄ INITIALIS√â: ${_isCacheInitialized.value}
        """.trimIndent()
    }
    
    /**
     * Nettoyage ressources (destroy app)
     */
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage CacheManager complet")
        
        try {
            // Nettoyer tous les services
            questionCache.cleanup()
            favoritesCache.cleanup()
            journalCache.cleanup()
            partnerLocationCache.cleanup()
            widgetCache.cleanup()
            
            // Annuler coroutines
            cacheScope.cancel()
            
            Log.d(TAG, "‚úÖ Nettoyage CacheManager termin√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage CacheManager: ${e.message}")
        }
    }
}
