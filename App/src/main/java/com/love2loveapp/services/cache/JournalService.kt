package com.love2loveapp.services.cache

import android.content.Context
import android.net.Uri
import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import com.google.firebase.storage.FirebaseStorage
import com.love2loveapp.models.JournalEntry
import com.love2loveapp.models.JournalLocation
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import java.util.*

/**
 * üìî JournalService Android - Cache M√©moire Temps R√©el Sophistiqu√©
 * 
 * Architecture √©quivalente iOS JournalService:
 * - StateFlow ‚Üí @Published iOS
 * - Firestore listeners ‚Üí ListenerRegistration iOS
 * - Cache m√©moire seulement ‚Üí Array @Published iOS
 * - Temps r√©el partenaire ‚Üí whereField partnerIds iOS
 * - Upload Firebase Storage ‚Üí Firebase Storage iOS
 * - Pas de cache persistant ‚Üí choix d√©lib√©r√© iOS
 * - Performance optimis√©e ‚Üí listener filtr√© iOS
 * - √âquivalent complet du JournalService iOS
 */
class JournalService private constructor(
    private val context: Context,
    private val firestore: FirebaseFirestore,
    private val auth: FirebaseAuth,
    private val storage: FirebaseStorage
) {
    
    companion object {
        private const val TAG = "JournalService"
        private const val COLLECTION_JOURNAL_ENTRIES = "journalEntries"
        private const val STORAGE_PATH_JOURNAL = "journal_images" // ‚úÖ Identique iOS
        
        @Volatile
        private var instance: JournalService? = null
        
        fun getInstance(context: Context): JournalService {
            return instance ?: synchronized(this) {
                instance ?: JournalService(
                    context.applicationContext,
                    FirebaseFirestore.getInstance(),
                    FirebaseAuth.getInstance(),
                    FirebaseStorage.getInstance()
                ).also { instance = it }
            }
        }
    }
    
    // Cache m√©moire principal (√©quivalent @Published iOS)
    private val _entries = MutableStateFlow<List<JournalEntry>>(emptyList())
    val entries: StateFlow<List<JournalEntry>> = _entries.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()
    
    // Firestore listener temps r√©el (√©quivalent ListenerRegistration iOS)
    private var firestoreListener: ListenerRegistration? = null
    
    // Cache utilisateur actuel
    private var currentUserId: String? = null
    
    init {
        Log.d(TAG, "‚úÖ JournalService initialis√© avec cache m√©moire temps r√©el")
        
        // Observer changements utilisateur
        auth.addAuthStateListener { firebaseAuth ->
            val newUserId = firebaseAuth.currentUser?.uid
            if (newUserId != currentUserId) {
                currentUserId = newUserId
                setupForUser(newUserId)
            }
        }
        
        // Setup initial si utilisateur connect√©
        currentUserId = auth.currentUser?.uid
        setupForUser(currentUserId)
    }
    
    /**
     * Configuration pour utilisateur sp√©cifique
     * √âquivalent de l'initialisation iOS avec userId
     */
    private fun setupForUser(userId: String?) {
        if (userId == null) {
            Log.d(TAG, "üîê Aucun utilisateur connect√© - arr√™t listeners")
            cleanupListener()
            _entries.value = emptyList()
            return
        }
        
        Log.d(TAG, "üî• Configuration JournalService pour utilisateur: $userId")
        setupFirestoreListener(userId)
    }
    
    // =======================
    // FIRESTORE LISTENER TEMPS R√âEL (√©quivalent iOS)
    // =======================
    
    /**
     * Configuration listener Firestore temps r√©el
     * √âquivalent de setupListener() iOS
     */
    private fun setupFirestoreListener(userId: String) {
        // Nettoyer ancien listener
        firestoreListener?.remove()
        
        Log.d(TAG, "üî• Configuration listener Journal pour user: $userId")
        
        firestoreListener = firestore.collection(COLLECTION_JOURNAL_ENTRIES)
            .whereArrayContains("partnerIds", userId)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Erreur listener Journal: ${error.message}")
                    _errorMessage.value = "Erreur de synchronisation: ${error.message}"
                    return@addSnapshotListener
                }
                
                handleFirestoreUpdate(snapshot?.documents?.mapNotNull { doc ->
                    try {
                        JournalEntry.fromFirestore(doc)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur parsing entry: ${e.message}")
                        null
                    }
                } ?: emptyList())
            }
    }
    
    /**
     * Traite mise √† jour Firestore temps r√©el
     * √âquivalent de handleSnapshotUpdate(snapshot:) iOS
     */
    private fun handleFirestoreUpdate(newEntries: List<JournalEntry>) {
        Log.d(TAG, "üì• Mise √† jour Journal Firestore: ${newEntries.size} entr√©es")
        
        // Trier par date √©v√©nement (plus r√©cent en premier)
        val sortedEntries = newEntries.sortedByDescending { it.eventDate }
        
        // Mettre √† jour cache m√©moire
        _entries.value = sortedEntries
        
        // Effacer erreurs pr√©c√©dentes
        _errorMessage.value = null
        
        Log.d(TAG, "üî• ${sortedEntries.size} entr√©es Journal charg√©es en cache m√©moire")
    }
    
    // =======================
    // CR√âATION ENTR√âES JOURNAL (√©quivalent iOS)
    // =======================
    
    /**
     * Cr√©e une nouvelle entr√©e journal
     * √âquivalent de createEntry() iOS
     */
    suspend fun createEntry(
        title: String,
        description: String,
        eventDate: Date,
        imageUri: Uri? = null,
        location: JournalLocation? = null
    ): Result<Unit> {
        val userId = currentUserId ?: return Result.failure(Exception("Utilisateur non connect√©"))
        
        return try {
            _isLoading.value = true
            _errorMessage.value = null
            
            Log.d(TAG, "üìù Cr√©ation entr√©e Journal: '$title'")
            
            // 1. Upload image si fournie
            var imageUrl: String? = null
            if (imageUri != null) {
                Log.d(TAG, "üì∑ Upload image Journal...")
                imageUrl = uploadImage(imageUri)
                Log.d(TAG, "‚úÖ Image upload√©e: [URL_MASKED]")
            }
            
            // 2. R√©cup√©rer informations utilisateur
            val currentUser = auth.currentUser
            val userName = currentUser?.displayName ?: "Utilisateur"
            
            // 3. TODO: R√©cup√©rer partnerId depuis profil utilisateur
            val partnerIds = listOf(userId) // + partnerId quand disponible
            
            // 4. Cr√©er entr√©e Journal
            val entry = JournalEntry(
                id = UUID.randomUUID().toString(),
                title = title.trim(),
                description = description.trim(),
                eventDate = eventDate,
                createdAt = Date(),
                updatedAt = Date(),
                authorId = userId,
                authorName = userName,
                imageURL = imageUrl,
                partnerIds = partnerIds,
                location = location
            )
            
            // 5. Sauvegarder dans Firestore
            Log.d(TAG, "üî• Sauvegarde Firestore...")
            firestore.collection(COLLECTION_JOURNAL_ENTRIES)
                .document(entry.id)
                .set(entry.toFirestore())
                .await()
            
            Log.d(TAG, "‚úÖ Entr√©e Journal cr√©√©e avec succ√®s: ${entry.id}")
            
            // Le listener temps r√©el mettra √† jour automatiquement _entries
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur cr√©ation entr√©e Journal: ${e.message}", e)
            _errorMessage.value = "Erreur lors de la sauvegarde: ${e.message}"
            Result.failure(e)
        } finally {
            _isLoading.value = false
        }
    }
    
    /**
     * Met √† jour une entr√©e Journal existante
     * √âquivalent de updateEntry() iOS
     */
    suspend fun updateEntry(
        entryId: String,
        title: String? = null,
        description: String? = null,
        eventDate: Date? = null,
        imageUri: Uri? = null,
        location: JournalLocation? = null
    ): Result<Unit> {
        val userId = currentUserId ?: return Result.failure(Exception("Utilisateur non connect√©"))
        
        return try {
            _isLoading.value = true
            _errorMessage.value = null
            
            Log.d(TAG, "‚úèÔ∏è Mise √† jour entr√©e Journal: $entryId")
            
            val updates = mutableMapOf<String, Any>()
            updates["updatedAt"] = com.google.firebase.Timestamp(Date())
            
            // Mettre √† jour champs fournis
            title?.let { updates["title"] = it.trim() }
            description?.let { updates["description"] = it.trim() }
            eventDate?.let { updates["eventDate"] = com.google.firebase.Timestamp(it) }
            location?.let { updates["location"] = it.toFirestore() }
            
            // Upload nouvelle image si fournie
            if (imageUri != null) {
                Log.d(TAG, "üì∑ Upload nouvelle image...")
                val imageUrl = uploadImage(imageUri)
                updates["imageURL"] = imageUrl
            }
            
            // Sauvegarder mises √† jour
            firestore.collection(COLLECTION_JOURNAL_ENTRIES)
                .document(entryId)
                .update(updates)
                .await()
            
            Log.d(TAG, "‚úÖ Entr√©e Journal mise √† jour: $entryId")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur mise √† jour entr√©e: ${e.message}", e)
            _errorMessage.value = "Erreur lors de la mise √† jour: ${e.message}"
            Result.failure(e)
        } finally {
            _isLoading.value = false
        }
    }
    
    /**
     * Supprime une entr√©e Journal
     * √âquivalent de deleteEntry() iOS
     */
    suspend fun deleteEntry(entryId: String): Result<Unit> {
        val userId = currentUserId ?: return Result.failure(Exception("Utilisateur non connect√©"))
        
        return try {
            _isLoading.value = true
            _errorMessage.value = null
            
            Log.d(TAG, "üóëÔ∏è Suppression entr√©e Journal: $entryId")
            
            // V√©rifier que l'utilisateur est l'auteur
            val entry = _entries.value.find { it.id == entryId }
            if (entry == null) {
                return Result.failure(Exception("Entr√©e non trouv√©e"))
            }
            
            if (entry.authorId != userId) {
                return Result.failure(Exception("Permission refus√©e - vous n'√™tes pas l'auteur"))
            }
            
            // Supprimer de Firestore
            firestore.collection(COLLECTION_JOURNAL_ENTRIES)
                .document(entryId)
                .delete()
                .await()
            
            // Supprimer image associ√©e si existante
            entry.imageURL?.let { imageUrl ->
                try {
                    val imageRef = storage.getReferenceFromUrl(imageUrl)
                    imageRef.delete().await()
                    Log.d(TAG, "üóëÔ∏è Image supprim√©e du storage")
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è Erreur suppression image: ${e.message}")
                    // Ne pas √©chouer pour √ßa
                }
            }
            
            Log.d(TAG, "‚úÖ Entr√©e Journal supprim√©e: $entryId")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur suppression entr√©e: ${e.message}", e)
            _errorMessage.value = "Erreur lors de la suppression: ${e.message}"
            Result.failure(e)
        } finally {
            _isLoading.value = false
        }
    }
    
    // =======================
    // UPLOAD IMAGES (√©quivalent iOS)
    // =======================
    
    /**
     * Upload image vers Firebase Storage (identique iOS)
     * √âquivalent de uploadImage() iOS
     */
    private suspend fun uploadImage(imageUri: Uri): String {
        val currentUser = auth.getCurrentUser()
        if (currentUser == null) {
            throw Exception("Utilisateur non connect√©")
        }
        
        // ‚úÖ Chemin structur√© identique iOS: journal_images/{userId}/{fileName}
        val fileName = "${UUID.randomUUID()}.jpg"
        val imagePath = "$STORAGE_PATH_JOURNAL/${currentUser.uid}/$fileName"
        val storageRef = storage.reference.child(imagePath)
        
        // ‚úÖ M√©tadonn√©es comme iOS
        val metadata = com.google.firebase.storage.StorageMetadata.Builder()
            .setContentType("image/jpeg")
            .build()
        
        storageRef.putFile(imageUri, metadata).await()
        
        // R√©cup√©rer URL de t√©l√©chargement
        return storageRef.downloadUrl.await().toString()
    }
    
    // =======================
    // M√âTHODES UTILITAIRES (√©quivalent iOS)
    // =======================
    
    /**
     * R√©cup√©ration manuelle des entr√©es (fallback)
     * √âquivalent de refreshEntries() iOS
     */
    suspend fun refreshEntries(): Result<Unit> {
        val userId = currentUserId ?: return Result.failure(Exception("Utilisateur non connect√©"))
        
        return try {
            _isLoading.value = true
            _errorMessage.value = null
            
            Log.d(TAG, "üîÑ Rafra√Æchissement manuel entr√©es Journal")
            
            val snapshot = firestore.collection(COLLECTION_JOURNAL_ENTRIES)
                .whereArrayContains("partnerIds", userId)
                .get()
                .await()
            
            val entries = snapshot.documents.mapNotNull { doc ->
                try {
                    JournalEntry.fromFirestore(doc)
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Erreur parsing entr√©e: ${e.message}")
                    null
                }
            }
            
            handleFirestoreUpdate(entries)
            
            Log.d(TAG, "‚úÖ Rafra√Æchissement termin√©: ${entries.size} entr√©es")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur rafra√Æchissement: ${e.message}", e)
            _errorMessage.value = "Erreur lors du rafra√Æchissement: ${e.message}"
            Result.failure(e)
        } finally {
            _isLoading.value = false
        }
    }
    
    /**
     * Filtre entr√©es par mois
     * √âquivalent de getEntriesForMonth() iOS
     */
    fun getEntriesForMonth(year: Int, month: Int): List<JournalEntry> {
        val calendar = Calendar.getInstance()
        calendar.set(year, month - 1, 1, 0, 0, 0) // Month is 0-based
        val startOfMonth = calendar.time
        
        calendar.add(Calendar.MONTH, 1)
        calendar.add(Calendar.MILLISECOND, -1)
        val endOfMonth = calendar.time
        
        return _entries.value.filter { entry ->
            entry.eventDate >= startOfMonth && entry.eventDate <= endOfMonth
        }
    }
    
    /**
     * Compte nombre d'entr√©es
     */
    fun getEntriesCount(): Int = _entries.value.size
    
    /**
     * R√©cup√®re entr√©e par ID
     */
    fun getEntryById(entryId: String): JournalEntry? {
        return _entries.value.find { it.id == entryId }
    }
    
    /**
     * Efface message d'erreur
     */
    fun clearError() {
        _errorMessage.value = null
    }
    
    // =======================
    // GESTION RESSOURCES (√©quivalent iOS)
    // =======================
    
    /**
     * Nettoie le listener Firestore
     */
    private fun cleanupListener() {
        firestoreListener?.remove()
        firestoreListener = null
        Log.d(TAG, "üßπ Listener Firestore nettoy√©")
    }
    
    /**
     * Informations de debug
     */
    fun getDebugInfo(): String {
        val userId = currentUserId ?: return "‚ùå Aucun utilisateur connect√©"
        val entriesCount = _entries.value.size
        val listenerActive = firestoreListener != null
        val isLoading = _isLoading.value
        val error = _errorMessage.value
        
        return """
            üìä DEBUG JournalService:
            - Utilisateur: $userId
            - Entr√©es en cache m√©moire: $entriesCount
            - Listener Firestore actif: $listenerActive
            - En chargement: $isLoading
            - Erreur: ${error ?: "Aucune"}
            - Collection: $COLLECTION_JOURNAL_ENTRIES
        """.trimIndent()
    }
    
    /**
     * Nettoyage ressources (destroy app)
     */
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage JournalService")
        cleanupListener()
        _entries.value = emptyList()
    }
}
