package com.love2loveapp.services.cache

import android.content.Context
import android.util.Log
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import androidx.lifecycle.LiveData
import androidx.lifecycle.Observer
import androidx.lifecycle.map
import com.love2loveapp.services.cache.dao.*
import com.love2loveapp.services.cache.entities.*
import com.love2loveapp.models.DailyQuestion
import com.love2loveapp.models.DailyChallenge
import kotlinx.coroutines.*
import java.text.SimpleDateFormat
import java.util.*

/**
 * üì± QuestionCacheManager Android - Cache Persistant Sophistiqu√©
 * 
 * Architecture √©quivalente Realm iOS QuestionCacheManager:
 * - Room Database ‚Üí Realm Database iOS
 * - StateFlow @Published ‚Üí @Published iOS
 * - Compactage automatique ‚Üí shouldCompactOnLaunch iOS
 * - Cache intelligent avec TTL ‚Üí logique cache iOS
 * - Performance optimis√©e ‚Üí indexation Realm iOS
 * - Observers temps r√©el ‚Üí Realm notifications iOS
 * - √âquivalent complet du QuestionCacheManager iOS
 */
class QuestionCacheManager private constructor(private val context: Context) {
    
    companion object {
        private const val TAG = "QuestionCacheManager"
        private const val MAX_CACHED_QUESTIONS = 30 // Limite comme iOS
        private const val MAX_CACHED_CHALLENGES = 30
        private const val CACHE_MAX_AGE_DAYS = 30L // 30 jours retention
        
        @Volatile
        private var instance: QuestionCacheManager? = null
        
        fun getInstance(context: Context): QuestionCacheManager {
            return instance ?: synchronized(this) {
                instance ?: QuestionCacheManager(context.applicationContext).also { instance = it }
            }
        }
    }
    
    // Base de donn√©es Room (√©quivalent Realm iOS)
    private val database: CacheDatabase = CacheDatabase.getDatabase(context)
    private val questionsDao: DailyQuestionsDao = database.dailyQuestionsDao()
    private val challengesDao: DailyChallengesDao = database.dailyChallengesDao()
    
    // √âtats observables (√©quivalent @Published iOS)
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _cacheStatus = MutableStateFlow<Map<String, Boolean>>(emptyMap())
    val cacheStatus: StateFlow<Map<String, Boolean>> = _cacheStatus.asStateFlow()
    
    private val _isDatabaseAvailable = MutableStateFlow(false)
    val isDatabaseAvailable: StateFlow<Boolean> = _isDatabaseAvailable.asStateFlow()
    
    // Scope pour coroutines (√©quivalent Task iOS)
    private val cacheScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    
    init {
        Log.d(TAG, "‚úÖ QuestionCacheManager initialis√©")
        _isDatabaseAvailable.value = true
        
        // D√©marrer nettoyage automatique (√©quivalent shouldCompactOnLaunch iOS)
        cacheScope.launch {
            scheduleAutomaticCleanup()
        }
    }
    
    // =======================
    // CACHE QUESTIONS QUOTIDIENNES (√©quivalent iOS)
    // =======================
    
    /**
     * Cache une question quotidienne  
     * √âquivalent de cacheDailyQuestion(_ question: DailyQuestion) iOS
     */
    suspend fun cacheDailyQuestion(question: DailyQuestion) {
        if (!_isDatabaseAvailable.value) {
            Log.w(TAG, "‚ö†Ô∏è Database non disponible pour cache question quotidienne")
            return
        }
        
        try {
            val entity = DailyQuestionEntity.fromDailyQuestion(question)
            questionsDao.cacheDailyQuestion(entity)
            
            Log.d(TAG, "‚úÖ Question quotidienne cach√©e: ${question.questionKey}")
            
            // Mettre √† jour status cache
            updateCacheStatus(question.coupleId, true)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur cache question quotidienne: ${e.message}", e)
        }
    }
    
    /**
     * R√©cup√®re question quotidienne depuis cache
     * √âquivalent de getCachedDailyQuestion(for:date:) iOS
     */
    suspend fun getCachedDailyQuestion(coupleId: String, date: String): DailyQuestion? {
        if (!_isDatabaseAvailable.value) return null
        
        return try {
            val entity = questionsDao.getDailyQuestion(coupleId, date)
            entity?.toDailyQuestion()?.also {
                Log.d(TAG, "üöÄ Question quotidienne trouv√©e en cache: ${it.questionKey}")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur r√©cup√©ration cache question: ${e.message}", e)
            null
        }
    }
    
    /**
     * R√©cup√®re question d'aujourd'hui depuis cache
     * √âquivalent de getTodayQuestion(coupleId:) iOS
     */
    suspend fun getTodayQuestion(coupleId: String): DailyQuestion? {
        val today = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
        return getCachedDailyQuestion(coupleId, today)
    }
    
    /**
     * R√©cup√®re toutes les questions en cache
     * √âquivalent de getCachedDailyQuestions(for:limit:) iOS
     */
    suspend fun getCachedDailyQuestions(coupleId: String, limit: Int = MAX_CACHED_QUESTIONS): List<DailyQuestion> {
        if (!_isDatabaseAvailable.value) return emptyList()
        
        return try {
            questionsDao.getCachedDailyQuestions(coupleId, limit)
                .map { it.toDailyQuestion() }
                .also {
                    Log.d(TAG, "üìö ${it.size} questions trouv√©es en cache pour couple: $coupleId")
                }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur r√©cup√©ration cache questions: ${e.message}", e)
            emptyList()
        }
    }
    
    /**
     * LiveData pour observation temps r√©el des questions
     * √âquivalent de @Published dans iOS
     */
    fun getCachedDailyQuestionsLiveData(coupleId: String, limit: Int = MAX_CACHED_QUESTIONS): LiveData<List<DailyQuestion>> {
        return questionsDao.getCachedDailyQuestionsLiveData(coupleId, limit).map { entities ->
            entities.map { it.toDailyQuestion() }
        }
    }
    
    // =======================
    // CACHE D√âFIS QUOTIDIENS (√©quivalent iOS)
    // =======================
    
    /**
     * Cache un d√©fi quotidien
     * √âquivalent de cacheDailyChallenge(_ challenge: DailyChallenge) iOS
     */
    suspend fun cacheDailyChallenge(challenge: DailyChallenge) {
        if (!_isDatabaseAvailable.value) {
            Log.w(TAG, "‚ö†Ô∏è Database non disponible pour cache d√©fi quotidien")
            return
        }
        
        try {
            val entity = DailyChallengeEntity.fromDailyChallenge(challenge)
            challengesDao.cacheDailyChallenge(entity)
            
            Log.d(TAG, "‚úÖ D√©fi quotidien cach√©: ${challenge.challengeKey}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur cache d√©fi quotidien: ${e.message}", e)
        }
    }
    
    /**
     * R√©cup√®re le d√©fi d'aujourd'hui
     * √âquivalent de getTodayChallenge(coupleId:) iOS
     */
    suspend fun getTodayChallenge(coupleId: String): DailyChallenge? {
        if (!_isDatabaseAvailable.value) return null
        
        return try {
            // Calculer d√©but/fin de journ√©e
            val calendar = Calendar.getInstance()
            calendar.set(Calendar.HOUR_OF_DAY, 0)
            calendar.set(Calendar.MINUTE, 0)
            calendar.set(Calendar.SECOND, 0)
            calendar.set(Calendar.MILLISECOND, 0)
            val startOfDay = calendar.timeInMillis
            
            calendar.add(Calendar.DAY_OF_MONTH, 1)
            val endOfDay = calendar.timeInMillis
            
            val entity = challengesDao.getDailyChallenge(coupleId, startOfDay, endOfDay)
            entity?.toDailyChallenge()?.also {
                Log.d(TAG, "üöÄ D√©fi quotidien trouv√© en cache: ${it.challengeKey}")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur r√©cup√©ration cache d√©fi: ${e.message}", e)
            null
        }
    }
    
    /**
     * Marque un d√©fi comme compl√©t√©
     * √âquivalent de markChallengeCompleted(challengeId:) iOS
     */
    suspend fun markChallengeCompleted(challengeId: String) {
        try {
            challengesDao.markChallengeCompleted(challengeId)
            Log.d(TAG, "‚úÖ D√©fi marqu√© comme compl√©t√©: $challengeId")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur marquage d√©fi compl√©t√©: ${e.message}", e)
        }
    }
    
    /**
     * R√©cup√®re tous les d√©fis en cache
     */
    suspend fun getCachedDailyChallenges(coupleId: String, limit: Int = MAX_CACHED_CHALLENGES): List<DailyChallenge> {
        if (!_isDatabaseAvailable.value) return emptyList()
        
        return try {
            challengesDao.getCachedDailyChallenges(coupleId, limit)
                .map { it.toDailyChallenge() }
                .also {
                    Log.d(TAG, "üèÜ ${it.size} d√©fis trouv√©s en cache pour couple: $coupleId")
                }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur r√©cup√©ration cache d√©fis: ${e.message}", e)
            emptyList()
        }
    }
    
    // =======================
    // GESTION CACHE ET NETTOYAGE (√©quivalent iOS)
    // =======================
    
    /**
     * Met √† jour le status du cache pour un couple
     * √âquivalent de updateCacheStatus() iOS
     */
    private fun updateCacheStatus(coupleId: String, isLoaded: Boolean) {
        val currentStatus = _cacheStatus.value.toMutableMap()
        currentStatus[coupleId] = isLoaded
        _cacheStatus.value = currentStatus
    }
    
    /**
     * V√©rifie si un couple a des donn√©es en cache
     */
    suspend fun hasCachedData(coupleId: String): Boolean {
        if (!_isDatabaseAvailable.value) return false
        
        return try {
            val questionCount = questionsDao.getQuestionCount(coupleId)
            questionCount > 0
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur v√©rification cache: ${e.message}", e)
            false
        }
    }
    
    /**
     * Supprime toutes les donn√©es cache d'un couple
     * √âquivalent de clearCacheForCouple() iOS
     */
    suspend fun clearCacheForCouple(coupleId: String) {
        if (!_isDatabaseAvailable.value) return
        
        try {
            questionsDao.clearQuestionsForCouple(coupleId)
            challengesDao.clearChallengesForCouple(coupleId)
            
            Log.d(TAG, "üóëÔ∏è Cache vid√© pour couple: $coupleId")
            updateCacheStatus(coupleId, false)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage cache couple: ${e.message}", e)
        }
    }
    
    /**
     * Nettoyage automatique programm√©  
     * √âquivalent de shouldCompactOnLaunch iOS
     */
    private suspend fun scheduleAutomaticCleanup() {
        try {
            // Nettoyer donn√©es anciennes de plus de 30 jours
            val cutoffTime = System.currentTimeMillis() - (CACHE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000)
            
            questionsDao.cleanupOldQuestions(cutoffTime)
            challengesDao.cleanupOldChallenges(cutoffTime)
            
            Log.d(TAG, "üßπ Nettoyage automatique cache termin√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage automatique: ${e.message}", e)
        }
    }
    
    /**
     * Force nettoyage complet (√©quivalent clearCache iOS)
     */
    suspend fun clearAllCache() {
        if (!_isDatabaseAvailable.value) return
        
        try {
            CacheDatabase.nukeDatabase(context)
            _cacheStatus.value = emptyMap()
            _isDatabaseAvailable.value = false
            
            // R√©initialiser database
            delay(100)
            val newDatabase = CacheDatabase.getDatabase(context)
            _isDatabaseAvailable.value = true
            
            Log.i(TAG, "üóëÔ∏è Cache complet vid√© et r√©initialis√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur nettoyage complet: ${e.message}", e)
        }
    }
    
    /**
     * Pr√©charge les cat√©gories essentielles
     * √âquivalent de preloadEssentialCategories() iOS
     */
    suspend fun preloadEssentialCategories() {
        _isLoading.value = true
        
        try {
            // Logique de pr√©chargement selon besoins app
            Log.d(TAG, "‚ö° Pr√©chargement cat√©gories essentielles")
            
            delay(500) // Simulation pr√©chargement
            
            Log.d(TAG, "‚úÖ Pr√©chargement termin√©")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur pr√©chargement: ${e.message}", e)
        } finally {
            _isLoading.value = false
        }
    }
    
    /**
     * Optimise l'utilisation m√©moire
     * √âquivalent de optimizeMemoryUsage() iOS
     */
    fun optimizeMemoryUsage() {
        cacheScope.launch {
            try {
                // D√©clencher compactage Room si n√©cessaire
                database.query("VACUUM", null)
                Log.d(TAG, "üßπ Optimisation m√©moire termin√©e")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur optimisation m√©moire: ${e.message}", e)
            }
        }
    }
    
    /**
     * Informations de debug compl√®tes
     * √âquivalent des m√©thodes debug iOS
     */
    suspend fun getDebugInfo(): String {
        if (!_isDatabaseAvailable.value) {
            return "‚ùå Database non disponible"
        }
        
        return try {
            val totalQuestions = questionsDao.getCachedDailyQuestions("", Int.MAX_VALUE).size
            val totalChallenges = challengesDao.getCachedDailyChallenges("", Int.MAX_VALUE).size
            
            """
                üìä DEBUG QuestionCacheManager:
                - Database disponible: ${_isDatabaseAvailable.value}
                - Questions en cache: $totalQuestions
                - D√©fis en cache: $totalChallenges
                - Status cache: ${_cacheStatus.value}
                - En chargement: ${_isLoading.value}
                - Path database: ${database.openHelper.readableDatabase.path}
            """.trimIndent()
        } catch (e: Exception) {
            "‚ùå Erreur r√©cup√©ration debug info: ${e.message}"
        }
    }
    
    /**
     * Nettoyage ressources (appel√© lors destroy app)
     */
    fun cleanup() {
        Log.d(TAG, "üßπ Nettoyage QuestionCacheManager")
        cacheScope.cancel()
        database.close()
    }
}
