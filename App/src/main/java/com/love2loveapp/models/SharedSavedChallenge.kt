package com.love2loveapp.models

import android.util.Log
import com.google.firebase.Timestamp
import com.google.firebase.firestore.DocumentSnapshot
import java.text.SimpleDateFormat
import java.util.*

/**
 * üîñ SharedSavedChallenge - Mod√®le D√©fi Sauvegard√© Firestore
 * √âquivalent iOS SavedChallengesService (bookmarks personnels)
 * 
 * Repr√©sente un d√©fi sauvegard√© par un utilisateur comme bookmark personnel.
 * Stock√© dans Firestore mais principalement local √† chaque utilisateur,
 * comme le syst√®me de bookmarks iOS.
 */
data class SharedSavedChallenge(
    val id: String = "",                           // ID Firestore
    val challengeId: String = "",                  // ID du d√©fi original
    val challengeKey: String = "",                 // Cl√© du d√©fi (daily_challenge_X)
    val challengeDay: Int = 0,                     // Jour du d√©fi
    val challengeText: String = "",                // Texte complet du d√©fi
    val emoji: String = "",                        // Emoji associ√© au d√©fi
    
    // üë§ CHAMPS UTILISATEUR (bookmarks personnels)
    val authorId: String = "",                     // ID de l'utilisateur qui a sauvegard√©
    val authorName: String = "",                   // Nom de l'utilisateur pour affichage
    val partnerIds: List<String> = emptyList(),    // IDs ayant acc√®s (g√©n√©ralement juste l'utilisateur)
    val isShared: Boolean = false,                 // Bookmarks locaux par d√©faut (comme iOS)
    
    // üìÖ DATES
    val dateAdded: Timestamp = Timestamp.now(),   // Date de sauvegarde
    val createdAt: Timestamp = Timestamp.now(),
    val updatedAt: Timestamp = Timestamp.now()
) {

    companion object {
        private const val TAG = "SharedSavedChallenge"

        /**
         * üì• Cr√©ation depuis document Firestore
         */
        fun fromFirestore(document: DocumentSnapshot): SharedSavedChallenge? {
            return try {
                val data = document.data ?: return null

                SharedSavedChallenge(
                    id = document.id,
                    challengeId = data["challengeId"] as? String ?: "",
                    challengeKey = data["challengeKey"] as? String ?: "",
                    challengeDay = (data["challengeDay"] as? Number)?.toInt() ?: 0,
                    challengeText = data["challengeText"] as? String ?: "",
                    emoji = data["emoji"] as? String ?: "",
                    authorId = data["authorId"] as? String ?: "",
                    authorName = data["authorName"] as? String ?: "",
                    partnerIds = (data["partnerIds"] as? List<*>)?.mapNotNull { it as? String } ?: emptyList(),
                    isShared = data["isShared"] as? Boolean ?: true,
                    dateAdded = data["dateAdded"] as? Timestamp ?: Timestamp.now(),
                    createdAt = data["createdAt"] as? Timestamp ?: Timestamp.now(),
                    updatedAt = data["updatedAt"] as? Timestamp ?: Timestamp.now()
                )
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur parsing SharedSavedChallenge: ${e.message}")
                null
            }
        }

        /**
         * üîÑ Cr√©ation depuis SavedChallenge local
         */
        fun fromLocalSavedChallenge(
            savedChallenge: SavedChallenge,
            authorId: String,
            authorName: String,
            partnerIds: List<String>
        ): SharedSavedChallenge {
            return SharedSavedChallenge(
                id = "", // Sera d√©fini par Firestore
                challengeId = savedChallenge.challengeId,
                challengeKey = savedChallenge.challengeKey,
                challengeDay = savedChallenge.challengeDay,
                challengeText = savedChallenge.challengeText,
                emoji = savedChallenge.emoji,
                authorId = authorId,
                authorName = authorName,
                partnerIds = partnerIds,
                isShared = true,
                dateAdded = savedChallenge.dateAdded,
                createdAt = Timestamp.now(),
                updatedAt = Timestamp.now()
            )
        }
    }

    /**
     * üì§ Conversion vers Firestore
     */
    fun toFirestore(): Map<String, Any> {
        return mapOf(
            "challengeId" to challengeId,
            "challengeKey" to challengeKey,
            "challengeDay" to challengeDay,
            "challengeText" to challengeText,
            "emoji" to emoji,
            "authorId" to authorId,
            "authorName" to authorName,
            "partnerIds" to partnerIds,
            "isShared" to isShared,
            "dateAdded" to dateAdded,
            "createdAt" to createdAt,
            "updatedAt" to Timestamp.now()
        )
    }

    /**
     * üîÑ Conversion vers SavedChallenge local
     */
    fun toLocalSavedChallenge(): SavedChallenge {
        return SavedChallenge(
            id = id,
            challengeId = challengeId,
            challengeKey = challengeKey,
            challengeDay = challengeDay,
            challengeText = challengeText,
            emoji = emoji,
            dateAdded = dateAdded,
            isCompleted = false, // Non pertinent pour d√©fis sauvegard√©s
            completedAt = null
        )
    }

    /**
     * üîÑ Conversion vers DailyChallenge (pour r√©utiliser l'interface)
     */
    fun toDailyChallenge(): DailyChallenge {
        return DailyChallenge(
            id = challengeId,
            coupleId = "", // N'est pas n√©cessaire pour l'affichage
            challengeKey = challengeKey,
            challengeDay = challengeDay,
            scheduledDate = dateAdded,
            isCompleted = false, // Les d√©fis sauvegard√©s ne sont pas "compl√©t√©s"
            completedAt = null,
            createdAt = createdAt,
            updatedAt = updatedAt
        )
    }

    /**
     * üìÖ Date format√©e pour affichage
     */
    val formattedDateAdded: String
        get() {
            return try {
                val dateFormat = SimpleDateFormat("dd MMM yyyy", Locale.getDefault())
                dateFormat.format(dateAdded.toDate())
            } catch (e: Exception) {
                ""
            }
        }

    /**
     * üìù Titre pour affichage (simple, sans auteur car c'est personnel)
     */
    val displayTitle: String
        get() = "Jour $challengeDay"

    /**
     * üîç Check si l'utilisateur peut supprimer ce d√©fi
     */
    fun canDelete(userId: String): Boolean {
        return authorId == userId || partnerIds.contains(userId)
    }

    /**
     * üìä Debug Info
     */
    override fun toString(): String {
        return "SharedSavedChallenge(challengeKey='$challengeKey', day=$challengeDay, author='$authorName', shared=${formattedDateAdded})"
    }
}
