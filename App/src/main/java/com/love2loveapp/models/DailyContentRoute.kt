package com.love2loveapp.models

/**
 * üó∫Ô∏è DailyContentRoute - Syst√®me de Navigation Questions du Jour
 * √âquivalent iOS DailyContentRoute.swift
 * 
 * G√®re la logique de route conditionnelle complexe :
 * 1. V√©rification connexion partenaire (OBLIGATOIRE)
 * 2. Affichage intro si premi√®re fois
 * 3. V√©rification freemium (3 jours gratuits)
 * 4. Route vers paywall apr√®s limite
 * 5. Interface chat principale
 */
abstract class DailyContentRoute {
    /**
     * üìñ √âcran d'introduction
     * @param showConnect true si connexion partenaire requise
     */
    data class Intro(val showConnect: Boolean) : DailyContentRoute()

    /**
     * üí∞ √âcran paywall freemium
     * @param day jour actuel de la question pour contexte
     */
    data class Paywall(val day: Int) : DailyContentRoute()

    /**
     * üí¨ Interface chat principale (question + r√©ponses)
     */
    object Main : DailyContentRoute()

    /**
     * ‚ùå √âcran d'erreur avec message
     */
    data class Error(val message: String) : DailyContentRoute()

    /**
     * ‚è≥ √âtat de chargement
     */
    object Loading : DailyContentRoute()
}

/**
 * üßÆ Calculateur de Route - Logique Conditionnelle
 * √âquivalent iOS DailyContentRouteCalculator.calculateRoute()
 * 
 * Impl√©mente la logique m√©tier complexe de navigation
 * bas√©e sur l'√©tat utilisateur et partenaire.
 */
object DailyContentRouteCalculator {

    /**
     * üéØ Calcul de route principal
     * 
     * @param hasConnectedPartner L'utilisateur a-t-il un partenaire connect√© ?
     * @param hasSeenIntro A-t-il vu l'intro Questions du Jour ?
     * @param shouldShowPaywall Doit-on afficher le paywall freemium ?
     * @param paywallDay Jour actuel pour contexte paywall
     * @param serviceHasError Y a-t-il une erreur service ?
     * @param serviceErrorMessage Message d'erreur si applicable
     * @param serviceIsLoading Service en cours de chargement ?
     * 
     * @return Route calcul√©e selon la logique m√©tier
     */
    fun calculateRoute(
        hasConnectedPartner: Boolean,
        hasSeenIntro: Boolean,
        shouldShowPaywall: Boolean,
        paywallDay: Int,
        serviceHasError: Boolean,
        serviceErrorMessage: String? = null,
        serviceIsLoading: Boolean = false
    ): DailyContentRoute {

        // üîë 1. CONNEXION PARTENAIRE D'ABORD (OBLIGATOIRE)
        // Sans partenaire = pas d'acc√®s aux Questions du Jour
        if (!hasConnectedPartner) {
            return DailyContentRoute.Intro(showConnect = true)
        }

        // üîë 2. INTRO AVANT TOUT LOADING/CONTENU
        // Pr√©sentation fonctionnalit√© si premi√®re utilisation
        if (!hasSeenIntro) {
            return DailyContentRoute.Intro(showConnect = false)
        }

        // üîë 3. √âTATS TECHNIQUES (erreurs avant loading)
        if (serviceHasError) {
            val errorMessage = serviceErrorMessage ?: "Une erreur est survenue"
            return DailyContentRoute.Error(errorMessage)
        }

        // üîë 4. LOADING STATE
        if (serviceIsLoading) {
            return DailyContentRoute.Loading
        }

        // üîë 5. V√âRIFIER PAYWALL FREEMIUM (3 JOURS GRATUITS)
        if (shouldShowPaywall) {
            return DailyContentRoute.Paywall(day = paywallDay)
        }

        // üîë 6. √âTAT PAR D√âFAUT - INTERFACE CHAT PRINCIPALE
        return DailyContentRoute.Main
    }
}

/**
 * üìä Configuration Settings Questions du Jour
 * √âquivalent iOS DailyQuestionSettings
 */
data class DailyQuestionSettings(
    val coupleId: String,
    val startDate: com.google.firebase.Timestamp,    // Date de d√©but du couple
    val currentDay: Int,                             // Jour actuel de question
    val timezone: String = "Europe/Paris",          // Fuseau horaire couple
    val isActive: Boolean = true,                    // Settings actifs
    val lastGeneratedDate: String? = null,          // Derni√®re g√©n√©ration "yyyy-MM-dd"
    val lastGeneratedDateTime: com.google.firebase.Timestamp? = null,
    val createdAt: com.google.firebase.Timestamp? = null,
    val updatedAt: com.google.firebase.Timestamp? = null
) {
    
    companion object {
        /**
         * üî• Parsing depuis Firestore
         */
        fun fromFirestore(document: com.google.firebase.firestore.DocumentSnapshot): DailyQuestionSettings? {
            return try {
                val data = document.data ?: return null

                DailyQuestionSettings(
                    coupleId = document.id,
                    startDate = data["startDate"] as? com.google.firebase.Timestamp 
                        ?: com.google.firebase.Timestamp.now(),
                    currentDay = (data["currentDay"] as? Number)?.toInt() ?: 1,
                    timezone = data["timezone"] as? String ?: "Europe/Paris",
                    isActive = data["isActive"] as? Boolean ?: true,
                    lastGeneratedDate = data["lastGeneratedDate"] as? String,
                    lastGeneratedDateTime = data["lastGeneratedDateTime"] as? com.google.firebase.Timestamp,
                    createdAt = data["createdAt"] as? com.google.firebase.Timestamp,
                    updatedAt = data["updatedAt"] as? com.google.firebase.Timestamp
                )
            } catch (e: Exception) {
                android.util.Log.e("DailyQuestionSettings", "‚ùå Erreur parsing: ${e.message}")
                null
            }
        }
    }

    /**
     * üìÖ Calcul du jour attendu bas√© sur la date de d√©but
     */
    fun calculateExpectedDay(): Int {
        val calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"))
        
        val startOfDay = calendar.apply {
            time = startDate.toDate()
            set(java.util.Calendar.HOUR_OF_DAY, 0)
            set(java.util.Calendar.MINUTE, 0)
            set(java.util.Calendar.SECOND, 0)
            set(java.util.Calendar.MILLISECOND, 0)
        }.time
        
        val startOfToday = calendar.apply {
            time = java.util.Date()
            set(java.util.Calendar.HOUR_OF_DAY, 0)
            set(java.util.Calendar.MINUTE, 0)
            set(java.util.Calendar.SECOND, 0)
            set(java.util.Calendar.MILLISECOND, 0)
        }.time
        
        val daysSinceStart = ((startOfToday.time - startOfDay.time) / (24 * 60 * 60 * 1000)).toInt()
        return daysSinceStart + 1
    }

    /**
     * üî• Conversion vers Firestore
     */
    fun toFirestore(): Map<String, Any> {
        return mapOf(
            "startDate" to startDate,
            "currentDay" to currentDay,
            "timezone" to timezone,
            "isActive" to isActive,
            "lastGeneratedDate" to (lastGeneratedDate ?: ""),
            "lastGeneratedDateTime" to (lastGeneratedDateTime ?: com.google.firebase.Timestamp.now()),
            "createdAt" to (createdAt ?: com.google.firebase.Timestamp.now()),
            "updatedAt" to com.google.firebase.Timestamp.now()
        )
    }
}
