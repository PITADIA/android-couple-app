package com.love2loveapp.models

import android.util.Log
import com.google.firebase.Timestamp
import com.google.firebase.firestore.DocumentSnapshot
import java.text.SimpleDateFormat
import java.util.*
import com.love2loveapp.services.QuestionDataManager
import com.love2loveapp.services.Question

/**
 * üíù FavoriteQuestion - Mod√®le Local Android
 * √âquivalent iOS FavoriteQuestion.swift:1-25
 * 
 * Repr√©sente une question favorite localement sur l'appareil
 */
data class FavoriteQuestion(
    val id: String,
    val questionId: String,
    val questionText: String,
    val categoryTitle: String,
    val emoji: String,
    val dateAdded: Date
) {
    /**
     * Convertir en Question standard pour r√©utilisation
     * Note: textResId ne peut pas √™tre r√©cup√©r√© depuis le texte, utiliser 0 par d√©faut
     */
    fun toQuestion(): Question {
        return Question(
            id = questionId,
            textResId = 0, // Non applicable depuis les favoris sauvegard√©s
            categoryId = categoryTitle
        )
    }
    
    companion object {
        /**
         * Cr√©er depuis une Question standard
         */
        fun fromQuestion(
            question: Question,
            questionText: String, // Texte d√©j√† r√©cup√©r√© avec getText(context)
            category: QuestionCategory,
            dateAdded: Date = Date()
        ): FavoriteQuestion {
            return FavoriteQuestion(
                id = UUID.randomUUID().toString(),
                questionId = question.id,
                questionText = questionText,
                categoryTitle = category.id, // Utiliser l'ID de la cat√©gorie
                emoji = category.emoji,
                dateAdded = dateAdded
            )
        }
    }
}

/**
 * üî• SharedFavoriteQuestion - Mod√®le Firestore Partag√©
 * √âquivalent iOS SharedFavoriteQuestion.swift:29-109
 * 
 * Repr√©sente une question favorite partag√©e dans Firebase
 * Utilis√© pour la synchronisation temps r√©el entre partenaires
 */
data class SharedFavoriteQuestion(
    val id: String = UUID.randomUUID().toString(),
    val questionId: String,
    val questionText: String,
    val categoryTitle: String,
    val emoji: String,
    val dateAdded: Date = Date(),
    val createdAt: Date = Date(),
    val updatedAt: Date = Date(),

    // üîë CHAMPS DE PARTAGE - √âquivalent iOS
    val authorId: String,           // Firebase UID de l'auteur
    val authorName: String,         // Nom affich√© de l'auteur
    val isShared: Boolean = true,   // Si visible par le partenaire
    val partnerIds: List<String> = emptyList() // IDs des partenaires autoris√©s
) {

    companion object {
        private const val TAG = "SharedFavoriteQuestion"
        
        /**
         * üî• Cr√©er depuis un DocumentSnapshot Firestore
         * √âquivalent iOS init?(from document: DocumentSnapshot)
         */
        fun fromFirestore(document: DocumentSnapshot): SharedFavoriteQuestion? {
            return try {
                val data = document.data ?: return null

                SharedFavoriteQuestion(
                    id = document.id,
                    questionId = data["questionId"] as? String ?: "",
                    questionText = data["questionText"] as? String ?: "",
                    categoryTitle = data["categoryTitle"] as? String ?: "",
                    emoji = data["emoji"] as? String ?: "",
                    
                    // Conversion s√©curis√©e des timestamps
                    dateAdded = (data["dateAdded"] as? Timestamp)?.toDate() ?: Date(),
                    createdAt = (data["createdAt"] as? Timestamp)?.toDate() ?: Date(),
                    updatedAt = (data["updatedAt"] as? Timestamp)?.toDate() ?: Date(),
                    
                    // Champs de partage
                    authorId = data["authorId"] as? String ?: "",
                    authorName = data["authorName"] as? String ?: "",
                    isShared = data["isShared"] as? Boolean ?: true,
                    partnerIds = (data["partnerIds"] as? List<*>)?.filterIsInstance<String>() ?: emptyList()
                )
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur parsing Firestore document ${document.id}: ${e.message}")
                null
            }
        }
    }

    /**
     * üî• Convertir en Map pour Firestore
     * √âquivalent iOS func toDictionary() -> [String: Any]
     */
    fun toFirestore(): Map<String, Any> {
        return mapOf(
            "questionId" to questionId,
            "questionText" to questionText,
            "categoryTitle" to categoryTitle,
            "emoji" to emoji,
            "dateAdded" to Timestamp(dateAdded),
            "createdAt" to Timestamp(createdAt),
            "updatedAt" to Timestamp(updatedAt),
            "authorId" to authorId,
            "authorName" to authorName,
            "isShared" to isShared,
            "partnerIds" to partnerIds
        )
    }

    /**
     * üîÑ Convertir en FavoriteQuestion local
     * √âquivalent iOS func toLocalFavorite() -> FavoriteQuestion
     */
    fun toLocalFavorite(): FavoriteQuestion {
        return FavoriteQuestion(
            id = id,
            questionId = questionId,
            questionText = questionText,
            categoryTitle = categoryTitle,
            emoji = emoji,
            dateAdded = dateAdded
        )
    }

    /**
     * üìÖ Date format√©e pour affichage
     * √âquivalent iOS var formattedDateAdded: String
     */
    val formattedDateAdded: String
        get() {
            val formatter = SimpleDateFormat("dd MMM yyyy, HH:mm", Locale.getDefault())
            return formatter.format(dateAdded)
        }
        
    /**
     * üïê Temps relatif (il y a X minutes)
     */
    val relativeTimeAdded: String
        get() {
            val now = Date()
            val diff = now.time - dateAdded.time
            val minutes = (diff / (1000 * 60)).toInt()
            
            return when {
                minutes < 1 -> "√Ä l'instant"
                minutes < 60 -> "Il y a $minutes min"
                minutes < 1440 -> "Il y a ${minutes / 60}h"
                else -> "Il y a ${minutes / 1440}j"
            }
        }
}

/**
 * üìä R√©sultat de synchronisation favoris
 * Utilis√© pour les retours de Cloud Functions
 */
data class FavoritesSyncResult(
    val success: Boolean,
    val updatedFavoritesCount: Int = 0,
    val userFavoritesCount: Int = 0,
    val partnerFavoritesCount: Int = 0,
    val message: String = ""
)
