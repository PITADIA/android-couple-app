plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
}

apply plugin: 'com.google.gms.google-services'

android {
    namespace 'com.love2loveapp'
    compileSdk 34
    buildToolsVersion "34.0.0"

    defaultConfig {
        applicationId "com.love2loveapp"
        minSdk 24
        targetSdk 35
        // üì± VERSION: Synchronis√©e avec Info.plist iOS
        versionCode 2280
        versionName "2.280"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables {
            useSupportLibrary true
        }

        // üîë S√âCURIT√â: Injection des cl√©s depuis gradle.properties via BuildConfig
        buildConfigField "String", "REVENUECAT_GOOGLE_API_KEY", "\"${project.findProperty('REVENUECAT_GOOGLE_API_KEY') ?: 'default_key'}\""
        buildConfigField "boolean", "DEBUG_LOGGING_ENABLED", "${project.findProperty('DEBUG_LOGGING_ENABLED') ?: false}"
        
        // üó∫Ô∏è Google Maps API Key - Configuration Production Ready
        def googleMapsApiKey = getGoogleMapsApiKey()
        manifestPlaceholders = [googleMapsApiKey: googleMapsApiKey]

        // üõ°Ô∏è Firebase App Check Debug Token (DEBUG uniquement)
        buildConfigField "String", "FIREBASE_DEBUG_TOKEN", "\"${project.findProperty('FIREBASE_DEBUG_TOKEN') ?: ''}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // En production, utilisez les secrets CI/CD
            buildConfigField "String", "REVENUECAT_GOOGLE_API_KEY", "\"${System.getenv('REVENUECAT_GOOGLE_API_KEY') ?: project.findProperty('REVENUECAT_GOOGLE_API_KEY')}\""
            // Pas de debug token en release
            buildConfigField "String", "FIREBASE_DEBUG_TOKEN", "\"\""
        }
        debug {
            // applicationIdSuffix ".debug"  // Comment√© pour √©viter l'erreur Firebase
            debuggable true
            // üõ°Ô∏è Debug token depuis environnement CI/CD ou gradle.properties
            buildConfigField "String", "FIREBASE_DEBUG_TOKEN", "\"${System.getenv('FIREBASE_DEBUG_TOKEN') ?: project.findProperty('FIREBASE_DEBUG_TOKEN') ?: ''}\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            "-opt-in=androidx.compose.animation.ExperimentalAnimationApi",
            "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api"
        ]
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.8'
    }

    // üö´ D√©sactiver compl√®tement les v√©rifications AAR metadata
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
    
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

// üö´ D√©sactiver compl√®tement la v√©rification AAR metadata
tasks.whenTaskAdded { task ->
    if (task.name.contains('checkDebugAarMetadata') || task.name.contains('checkReleaseAarMetadata')) {
        task.enabled = false
    }
}

dependencies {
    // MultIDex support pour applications > 65k m√©thodes
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Android Core (versions compatibles avec compileSdk 35)
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-process:2.7.0'

    // Compose BOM (version compatible avec API 35)
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'androidx.compose.animation:animation'

    // Firebase (version compatible avec API 35 + fix ProviderInstaller)
    implementation platform('com.google.firebase:firebase-bom:33.4.0')
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-functions'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-appcheck'
    implementation 'com.google.firebase:firebase-appcheck-playintegrity'
    implementation 'com.google.firebase:firebase-appcheck-debug'

    // Google Play Services (versions r√©centes pour √©viter ProviderInstaller loop)
    implementation 'com.google.android.gms:play-services-base:18.3.0'
    implementation 'com.google.android.gms:play-services-auth:21.2.0'
    implementation 'com.google.android.gms:play-services-maps:18.2.0'
    implementation 'com.google.android.gms:play-services-location:21.2.0'
    
    // Google Maps Utils pour clustering
    implementation 'com.google.maps.android:android-maps-utils:3.4.0'
    
    // Google Maps Compose pour interface moderne
    implementation 'com.google.maps.android:maps-compose:4.3.3'
    
    // Coil pour chargement d'images
    implementation 'io.coil-kt:coil-compose:2.4.0'

    // RevenueCat
    implementation 'com.revenuecat.purchases:purchases:7.7.0'
    
    // Google Play Billing
    implementation 'com.android.billingclient:billing:6.1.0'
    implementation 'com.android.billingclient:billing-ktx:6.1.0'

    // Image Editing & Cropping (√©quivalent SwiftyCrop iOS) - Version compatible
    implementation 'com.github.CanHub:Android-Image-Cropper:4.3.3'
    
    // Image Loading & Caching (Glide)
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    kapt 'com.github.bumptech.glide:compiler:4.14.2'

    // Badge support (facultatif)
    implementation 'me.leolin:ShortcutBadger:1.1.22'
    
    // üóÉÔ∏è Room Database - D√©pendances compl√®tes pour cache sophistiqu√©
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'              // Support Kotlin Coroutines
    kapt 'androidx.room:room-compiler:2.6.1'                   // Processeur annotations KAPT
    
    // üåê Network Cache - OkHttp pour cache r√©seau sophistiqu√©  
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    
    // üíæ Disk Cache - DiskLruCache pour ImageCacheService
    implementation 'com.jakewharton:disklrucache:2.0.2'
    
    // üì± Widget System Android - D√©pendances pour syst√®me de widgets
    implementation 'androidx.work:work-runtime-ktx:2.8.1'      // WorkManager pour mise √† jour p√©riodique widgets
    implementation 'com.google.code.gson:gson:2.10.1'         // Gson pour s√©rialisation donn√©es SharedPreferences
    implementation 'androidx.glance:glance-appwidget:1.0.0'    // Glance pour widgets modernes (optionnel)
    implementation 'androidx.datastore:datastore-preferences:1.0.0' // DataStore pour stockage widgets
    
    // üéâ Konfetti - Animation de confettis optimis√©e pour performance
    implementation 'nl.dionsegijn:konfetti-compose:2.0.4'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    
    // üîß Contraintes pour forcer les bonnes versions et √©viter les conflits
    constraints {
        implementation('com.google.android.gms:play-services-base') {
            version { strictly '18.3.0' }
            because 'ProviderInstaller ANR fix - force stable Play Services version'
        }
        implementation('com.google.android.datatransport:transport-runtime') {
            version { prefer '3.2.0' }
            because 'ProviderInstaller stability fix - avoid module conflicts'
        }
    }
}

/**
 * üó∫Ô∏è Fonction pour r√©cup√©rer la cl√© Google Maps API
 * Ordre de priorit√© (Production Ready) :
 * 1. Variable d'environnement (CI/CD Production)
 * 2. local.properties (D√©veloppement local)
 * 3. gradle.properties (Fallback d√©veloppement)
 * 4. Placeholder (Indique qu'il faut configurer)
 */
def getGoogleMapsApiKey() {
    // 1. üè≠ PRODUCTION : Variable d'environnement (CI/CD)
    def envKey = System.getenv("GOOGLE_MAPS_API_KEY")
    if (envKey != null && !envKey.isEmpty()) {
        println "üó∫Ô∏è Google Maps API Key: Utilisation variable d'environnement (PRODUCTION)"
        return envKey
    }
    
    // 2. üíª D√âVELOPPEMENT : local.properties
    Properties localProperties = new Properties()
    File localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localProperties.load(new FileInputStream(localPropertiesFile))
        def localKey = localProperties.getProperty('GOOGLE_MAPS_API_KEY')
        if (localKey != null && !localKey.isEmpty() && !localKey.startsWith('VOTRE_')) {
            println "üó∫Ô∏è Google Maps API Key: Utilisation local.properties (D√âVELOPPEMENT)"
            return localKey
        }
    }
    
    // 3. üîÑ FALLBACK : gradle.properties
    def gradleKey = project.findProperty('GOOGLE_MAPS_API_KEY_DEBUG')
    if (gradleKey != null && !gradleKey.isEmpty()) {
        println "üó∫Ô∏è Google Maps API Key: Utilisation gradle.properties (FALLBACK)"
        return gradleKey
    }
    
    // 4. ‚ö†Ô∏è ERREUR : Aucune cl√© configur√©e
    println "‚ö†Ô∏è ATTENTION: Aucune cl√© Google Maps configur√©e !"
    println "   - Production: D√©finissez GOOGLE_MAPS_API_KEY en variable d'environnement"
    println "   - D√©veloppement: Ajoutez GOOGLE_MAPS_API_KEY dans local.properties"
    return 'YOUR_GOOGLE_MAPS_API_KEY_HERE'
}