import UIKit
import StoreKit
import FirebaseCore
import FirebaseMessaging
import UserNotifications
import FirebaseAppCheck
import RevenueCat

/// Factory personnalis√©e pour App Check Provider
class CoupleAppCheckProviderFactory: NSObject, AppCheckProviderFactory {
    func createProvider(with app: FirebaseApp) -> AppCheckProvider? {
        if #available(iOS 14.0, *) {
            return AppAttestProvider(app: app)
        } else {
            return DeviceCheckProvider(app: app)
        }
    }
}

class AppDelegate: NSObject, UIApplicationDelegate {
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        print("üî• AppDelegate: D√©marrage de l'application")
        
        // üõ°Ô∏è Configuration App Check AVANT Firebase (MODE SURVEILLANCE)
        print("üõ°Ô∏è AppDelegate: Configuration App Check...")
        configureAppCheck()
        print("üõ°Ô∏è AppDelegate: App Check configur√© en mode surveillance")
        
        // Configuration Firebase
        print("üî• AppDelegate: Configuration Firebase...")
        FirebaseApp.configure()
        print("üî• AppDelegate: Firebase configur√© avec succ√®s")
        
        // Configuration RevenueCat (tracking uniquement)
        print("üí∞ AppDelegate: Configuration RevenueCat...")
        configureRevenueCat()
        print("üí∞ AppDelegate: RevenueCat configur√©")
        
        // Configuration des achats in-app
        print("üî• AppDelegate: Configuration StoreKit...")
        configureStoreKit()
        print("üî• AppDelegate: StoreKit configur√©")
        
        // Configure User Notifications
        configureUserNotifications()
        
        print("üî• AppDelegate: Initialisation termin√©e")
        return true
    }
    
    private func configureRevenueCat() {
        print("üí∞ AppDelegate: Initialisation RevenueCat pour tracking...")
        
        // Configuration RevenueCat en mode tracking uniquement
        Purchases.logLevel = .info
        Purchases.configure(withAPIKey: "appl_pMKnixURdQHqWmKnsoicGCXeiJL")
        
        print("üí∞ AppDelegate: RevenueCat initialis√© - mode tracking actif")
        print("üí∞ AppDelegate: Les transactions StoreKit seront automatiquement track√©es")
    }
    
    private func configureStoreKit() {
        print("üî• AppDelegate: Ajout de l'observateur StoreKit")
        // Configuration pour les achats in-app
        SKPaymentQueue.default().add(SubscriptionService.shared)
    }
    
    private func configureUserNotifications() {
        print("üî• AppDelegate: Configuration notifications‚Ä¶")
        let center = UNUserNotificationCenter.current()
        center.delegate = self
        print("üî• AppDelegate: UNUserNotificationCenter delegate d√©fini")
    }
    
    /// üõ°Ô∏è Configuration App Check en mode SURVEILLANCE (aucun blocage)
    private func configureAppCheck() {
        print("üõ°Ô∏è AppCheck: Initialisation du provider...")
        
        #if DEBUG
        // En debug : utiliser le debug provider
        let providerFactory = AppCheckDebugProviderFactory()
        print("üõ°Ô∏è AppCheck: Mode DEBUG - Provider de d√©veloppement")
        #else
        // En production : utiliser App Attest (d√©j√† configur√© dans Firebase)
        let providerFactory = CoupleAppCheckProviderFactory()
        print("üõ°Ô∏è AppCheck: Mode PRODUCTION - App Attest provider")
        #endif
        
        AppCheck.setAppCheckProviderFactory(providerFactory)
        
        // üéØ IMPORTANT: Mode surveillance uniquement - aucun blocage
        print("üõ°Ô∏è AppCheck: ‚ö†Ô∏è Mode SURVEILLANCE activ√© - aucun service ne sera bloqu√©")
        print("üõ°Ô∏è AppCheck: Les m√©triques seront collect√©es pendant 2-3 semaines")
        print("üõ°Ô∏è AppCheck: Activation de l'enforcement sera faite manuellement plus tard")
    }
    
    func applicationWillTerminate(_ application: UIApplication) {
        print("üî• AppDelegate: Arr√™t de l'application")
        // Nettoyer les observateurs StoreKit
        SKPaymentQueue.default().remove(SubscriptionService.shared)
        print("üî• AppDelegate: Observateurs StoreKit supprim√©s")
    }
    
    /// Appel√© quand l'app devient active (premier plan)
    func applicationDidBecomeActive(_ application: UIApplication) {
        print("üîî AppDelegate: App devenue active")
        
        // üéØ DOUBLE NOTIFICATION FIX: Nettoyer sp√©cifiquement les notifications de messages
        Task {
            let center = UNUserNotificationCenter.current()
            let deliveredNotifications = await center.deliveredNotifications()
            
            // Trouver toutes les notifications de messages
            let messageNotificationIds = deliveredNotifications
                .filter { $0.request.identifier.hasPrefix("new_message_") }
                .map { $0.request.identifier }
            
            if !messageNotificationIds.isEmpty {
                print("üóëÔ∏è AppDelegate: Suppression \(messageNotificationIds.count) notifications de messages obsol√®tes")
                center.removeDeliveredNotifications(withIdentifiers: messageNotificationIds)
            }
            
            // Nettoyer aussi toutes les notifications en attente et le badge
            await MainActor.run {
                BadgeManager.clearAllNotificationsAndBadge()
            }
        }
    }
}

extension AppDelegate: UNUserNotificationCenterDelegate {
    // Afficher les notifications m√™me lorsque l'app est au premier plan (banni√®re + son + badge)
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        print("üîî AppDelegate: willPresent notification - ID: \(notification.request.identifier)")
        
        // üéØ FIX DOUBLE NOTIFICATION: Ne pas afficher les notifications de message quand l'app est au premier plan
        if notification.request.identifier.hasPrefix("new_message_") {
            print("üîî AppDelegate: Notification de message d√©tect√©e - suppression pour √©viter double affichage")
            // Supprimer imm√©diatement cette notification
            center.removeDeliveredNotifications(withIdentifiers: [notification.request.identifier])
            // Ne pas afficher la banni√®re (app d√©j√† ouverte)
            completionHandler([])
            return
        }
        
        // Afficher les autres types de notifications normalement
        completionHandler([.banner, .list, .sound, .badge])
    }
    
    // G√©rer la r√©ponse de l'utilisateur aux notifications
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        print("üîî AppDelegate: didReceive response - ID: \(response.notification.request.identifier)")
        
        // G√©rer les notifications de messages
        let userInfo = response.notification.request.content.userInfo
        if let questionId = userInfo["questionId"] as? String {
            print("üîî AppDelegate: Ouverture question: \(questionId)")
            // TODO: Naviguer vers la question
        }
        
        completionHandler()
    }
    
    // G√©rer les notifications push re√ßues
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        print("üîî AppDelegate: Token APNS re√ßu - \(deviceToken.count) bytes")
        print("üîî AppDelegate: Token APNS hex: \(deviceToken.map { String(format: "%02.2hhx", $0) }.joined())")
        
        // Assigner le token APNS √† Firebase Messaging
        Messaging.messaging().apnsToken = deviceToken
        
        // D√©clencher une nouvelle tentative de r√©cup√©ration du token FCM
        print("üîî AppDelegate: Token APNS assign√© - demande refresh FCM")
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            FCMService.shared.refreshToken()
        }
    }
    
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        print("‚ùå AppDelegate: Erreur enregistrement APNS - \(error)")
        print("‚ùå AppDelegate: Description: \(error.localizedDescription)")
    }
} 