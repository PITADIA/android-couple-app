import Foundation
import SwiftUI
import Combine
import FirebaseAuth
import FirebaseFirestore
import FirebaseFunctions

class PartnerSubscriptionSyncService: ObservableObject {
    static let shared = PartnerSubscriptionSyncService()
    
    private var cancellables = Set<AnyCancellable>()
    private var userListener: ListenerRegistration?
    private var partnerListener: ListenerRegistration?
    
    private init() {
        startListeningForUser()
        setupAuthObserver()
    }
    
    private func setupAuthObserver() {
        // Observer les changements d'authentification
        Auth.auth().addStateDidChangeListener { [weak self] (auth: Auth, user: FirebaseAuth.User?) in
            if user != nil {
                print("üîÑ PartnerSubscriptionSyncService: Utilisateur reconnect√© - Red√©marrage listeners")
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    self?.startListeningForUser()
                }
            } else {
                print("‚ö†Ô∏è PartnerSubscriptionSyncService: Utilisateur d√©connect√© - Arr√™t listeners")
                self?.stopAllListeners()
            }
        }
    }
    
    // MARK: - √âcoute des changements utilisateur
    
    private func startListeningForUser() {
        guard let currentUser = Auth.auth().currentUser else { 
            print("‚ö†Ô∏è PartnerSubscriptionSyncService: Utilisateur non authentifi√©, arr√™t des listeners")
            return 
        }
        
        // Arr√™ter les anciens listeners
        stopAllListeners()
        
        userListener = Firestore.firestore()
            .collection("users")
            .document(currentUser.uid)
            .addSnapshotListener { [weak self] snapshot, error in
                if let error = error {
                    print("‚ùå PartnerSubscriptionSyncService: Erreur listener utilisateur: \(error)")
                    
                    // Si erreur de permissions, v√©rifier l'authentification
                    if error.localizedDescription.contains("permissions") {
                        print("‚ö†Ô∏è PartnerSubscriptionSyncService: Erreur de permissions - V√©rification auth")
                        self?.handleAuthenticationError()
                    }
                    return
                }
                
                guard let data = snapshot?.data() else { 
                    print("‚ö†Ô∏è PartnerSubscriptionSyncService: Aucune donn√©e utilisateur trouv√©e")
                    return 
                }
                
                // üîß DEBUG: Logs d√©taill√©s pour identifier le probl√®me
                let partnerIdRaw = data["partnerId"]
                print("üîç PartnerSubscriptionSyncService: partnerId brut: \(partnerIdRaw ?? "nil")")
                print("üîç PartnerSubscriptionSyncService: Type: \(type(of: partnerIdRaw))")
                
                // Si l'utilisateur a un partenaire connect√©, √©couter ses changements d'abonnement
                if let partnerId = data["partnerId"] as? String, !partnerId.isEmpty {
                    print("üîç PartnerSubscriptionSyncService: partnerId valide trouv√©: '\(partnerId)'")
                    self?.startListeningForPartner(partnerId: partnerId)
                } else {
                    print("üîç PartnerSubscriptionSyncService: Aucun partenaire valide - arr√™t √©coute")
                    if let partnerIdString = data["partnerId"] as? String {
                        print("üîç PartnerSubscriptionSyncService: partnerId est cha√Æne vide: '\(partnerIdString)'")
                    }
                    // Pas de partenaire, arr√™ter l'√©coute
                    self?.stopListeningForPartner()
                }
            }
    }
    
    private func handleAuthenticationError() {
        print("üîß PartnerSubscriptionSyncService: Gestion erreur authentification")
        
        // Arr√™ter tous les listeners
        stopAllListeners()
        
        // V√©rifier si l'utilisateur est encore authentifi√©
        if Auth.auth().currentUser == nil {
            print("‚ö†Ô∏è PartnerSubscriptionSyncService: Utilisateur d√©connect√© - Arr√™t du service")
        } else {
            print("üîÑ PartnerSubscriptionSyncService: Red√©marrage des listeners apr√®s erreur auth")
            // Red√©marrer les listeners apr√®s un d√©lai
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                self.startListeningForUser()
            }
        }
    }
    
    private func stopAllListeners() {
        userListener?.remove()
        userListener = nil
        stopListeningForPartner()
    }
    
    private func startListeningForPartner(partnerId: String) {
        // üîß CORRECTION: V√©rification robuste du partnerId
        guard !partnerId.isEmpty, partnerId.trimmingCharacters(in: .whitespacesAndNewlines).count > 0 else {
            print("‚ùå PartnerSubscriptionSyncService: partnerId vide ou invalide re√ßu: '\(partnerId)'")
            stopListeningForPartner()
            return
        }
        
        // Arr√™ter l'ancienne √©coute
        stopListeningForPartner()
        
        // üîß CORRECTION: Ne plus √©couter directement les donn√©es du partenaire
        // La synchronisation se fera via Cloud Functions lors des changements d'abonnement
        print("üîÑ PartnerSubscriptionSyncService: Synchronisation initiale avec partenaire: \(partnerId)")
        print("üîÑ PartnerSubscriptionSyncService: partnerId valid√© - longueur: \(partnerId.count)")
        
        guard let currentUser = Auth.auth().currentUser else { return }
        
        // Faire une synchronisation initiale avec un petit d√©lai pour √©viter les conditions de course
        Task {
            // üîß CORRECTION: Petit d√©lai pour laisser le temps aux mises √† jour d'abonnement de se terminer
            try? await Task.sleep(nanoseconds: 2_000_000_000) // 2 secondes
            await self.syncSubscriptionViaCloudFunction(
                userId: currentUser.uid,
                partnerId: partnerId
            )
        }
    }
    
    private func stopListeningForPartner() {
        partnerListener?.remove()
        partnerListener = nil
    }
    
    // MARK: - Synchronisation des abonnements via Cloud Functions
    
    private func syncSubscriptionViaCloudFunction(userId: String, partnerId: String) async {
        // üîß CORRECTION: V√©rification robuste du partnerId avant l'appel
        guard !partnerId.isEmpty, partnerId.trimmingCharacters(in: .whitespacesAndNewlines).count > 0 else {
            print("‚ùå PartnerSubscriptionSyncService: partnerId vide ou invalide: '\(partnerId)'")
            return
        }
        
        do {
            print("üîÑ PartnerSubscriptionSyncService: Synchronisation via Cloud Function")
            print("üîÑ PartnerSubscriptionSyncService: partnerId: '\(partnerId)' (longueur: \(partnerId.count))")
            
            let functions = Functions.functions()
            let data = [
                "partnerId": partnerId
            ]
            
            let result = try await functions.httpsCallable("syncPartnerSubscriptions").call(data)
            
            if let resultData = result.data as? [String: Any],
               let success = resultData["success"] as? Bool,
               success {
                print("‚úÖ PartnerSubscriptionSyncService: Synchronisation r√©ussie")
                
                // Notifier les changements si n√©cessaire
                if let inherited = resultData["subscriptionInherited"] as? Bool,
                   inherited,
                   let fromPartnerName = resultData["fromPartnerName"] as? String {
                    await MainActor.run {
                        NotificationCenter.default.post(
                            name: .partnerSubscriptionShared,
                            object: nil,
                            userInfo: [
                                "partnerId": userId,
                                "fromPartnerName": fromPartnerName
                            ]
                        )
                    }
                }
            } else {
                print("‚ùå PartnerSubscriptionSyncService: √âchec synchronisation")
            }
            
        } catch {
            print("‚ùå PartnerSubscriptionSyncService: Erreur synchronisation Cloud Function: \(error)")
        }
    }
    

    
    deinit {
        userListener?.remove()
        partnerListener?.remove()
    }
    
    // MARK: - M√©thode publique pour red√©marrage
    
    func restart() {
        print("üîÑ PartnerSubscriptionSyncService: Red√©marrage manuel")
        stopAllListeners()
        startListeningForUser()
    }
} 