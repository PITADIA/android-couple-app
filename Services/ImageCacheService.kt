package com.lyes.love2love.cache

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.util.Log
import android.util.LruCache
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.launch
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.text.DecimalFormat
import kotlin.math.max

/**
 * ImageCacheService (Android)
 * - Cache m√©moire via LruCache (limit√© en octets)
 * - Cache disque dans <app>/cache/ImageCache
 * - Methods : getCachedImage, cacheImage, clearCachedImage, clearCache, getCacheSize
 * - Compatibilit√© widgets : cacheImageForWidget, getCachedWidgetImage
 *
 * Usage :
 *   val cache = ImageCacheService.getInstance(context)
 *   cache.cacheImage(bitmap, url)
 *   val bmp = cache.getCachedImage(url)
 */
class ImageCacheService private constructor(
    private val appContext: Context
) {

    companion object {
        private const val TAG = "ImageCacheService"

        // Limites m√©moire (align√©es sur ton Swift : ~100 MB)
        private const val MEMORY_MAX_BYTES: Int = 100 * 1024 * 1024 // 100 MB
        // Swift limitait √† 50 images, LruCache ne g√®re pas un "countLimit" nativement.
        // On se repose ici sur la limite en octets.

        @Volatile
        private var INSTANCE: ImageCacheService? = null

        fun getInstance(context: Context): ImageCacheService =
            INSTANCE ?: synchronized(this) {
                INSTANCE ?: ImageCacheService(context.applicationContext).also { INSTANCE = it }
            }
    }

    // --- M√©moire ---
    private val memoryCache = object : LruCache<String, Bitmap>(MEMORY_MAX_BYTES) {
        override fun sizeOf(key: String, value: Bitmap): Int {
            // Compte la taille r√©elle du bitmap
            return value.byteCount
        }
    }

    // --- Disque ---
    private val cacheDirectory: File = File(appContext.cacheDir, "ImageCache").apply {
        if (!exists()) mkdirs()
    }

    // --- Concurrence disque ---
    private val ioScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    init {
        Log.i(TAG, "üñºÔ∏è Cache initialis√© ‚Äî Dossier: ${cacheDirectory.absolutePath}")
    }

    // =====================
    // Public API
    // =====================

    /** Retourne un Bitmap si pr√©sent en cache m√©moire ou disque, sinon null. */
    fun getCachedImage(urlString: String): Bitmap? {
        val key = cacheKeyForURL(urlString)

        // 1) M√©moire
        memoryCache.get(key)?.let {
            Log.d(TAG, "üñºÔ∏è Image trouv√©e en cache m√©moire")
            return it
        }

        // 2) Disque
        loadImageFromDisk(key)?.let { diskBmp ->
            Log.d(TAG, "üñºÔ∏è Image trouv√©e en cache disque")
            memoryCache.put(key, diskBmp) // Remonte en m√©moire
            return diskBmp
        }

        Log.d(TAG, "üñºÔ∏è Aucune image en cache")
        return null
    }

    /** Ajoute/Met √† jour une image en cache (m√©moire + disque asynchrone). */
    fun cacheImage(image: Bitmap, urlString: String) {
        val key = cacheKeyForURL(urlString)

        // M√©moire
        memoryCache.put(key, image)

        // Disque (asynchrone)
        ioScope.launch {
            saveImageToDisk(image, key)
        }

        Log.d(TAG, "üñºÔ∏è Image mise en cache")
    }

    /** Supprime une image sp√©cifique du cache (m√©moire + disque). */
    fun clearCachedImage(urlString: String) {
        val key = cacheKeyForURL(urlString)

        // M√©moire
        memoryCache.remove(key)

        // Disque
        ioScope.launch {
            val file = File(cacheDirectory, "$key.jpg")
            if (file.exists()) file.delete()
        }

        Log.d(TAG, "üóëÔ∏è Image supprim√©e du cache")
    }

    /** Vide tout le cache (m√©moire + disque). */
    fun clearCache() {
        memoryCache.evictAll()
        ioScope.launch {
            cacheDirectory.deleteRecursively()
            cacheDirectory.mkdirs()
        }
        Log.i(TAG, "üñºÔ∏è Cache vid√©")
    }

    /** Taille du cache (m√©moire th√©orique max + disque r√©el). */
    fun getCacheSize(): CacheSize {
        val memorySizeHuman = "~${MEMORY_MAX_BYTES / 1024 / 1024}MB"

        var diskBytes = 0L
        cacheDirectory.walkTopDown().forEach { f ->
            if (f.isFile) diskBytes += f.length()
        }
        val diskSizeHuman = humanReadableByteCount(diskBytes)

        return CacheSize(memorySizeHuman, diskSizeHuman)
    }

    // =====================
    // Widget Compatibility
    // =====================

    /**
     * Sauvegarde synchrone pour widgets (nom de fichier fourni).
     * Remarque : sur Android, le widget ne lit pas directement le fichier ;
     * c‚Äôest l‚Äôapp qui charge l‚Äôimage et l‚Äôassigne au RemoteViews/Glance.
     */
    fun cacheImageForWidget(image: Bitmap, fileName: String) {
        Log.d(TAG, "üñºÔ∏è cacheImageForWidget(file=$fileName)")
        val file = File(cacheDirectory, fileName)
        try {
            FileOutputStream(file).use { out ->
                image.compress(Bitmap.CompressFormat.JPEG, 80, out)
            }
            if (file.exists()) {
                Log.d(TAG, "‚úÖ Image widget sauv√©e: ${file.name} (${humanReadableByteCount(file.length())})")
            } else {
                Log.e(TAG, "‚ùå Fichier widget introuvable apr√®s √©criture")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur sauvegarde widget: ${e.message}", e)
        }
    }

    /** Charge un bitmap destin√© √† un widget √† partir d‚Äôun nom de fichier. */
    fun getCachedWidgetImage(fileName: String): Bitmap? {
        val file = File(cacheDirectory, fileName)
        if (!file.exists()) return null
        return try {
            BitmapFactory.decodeStream(FileInputStream(file))
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lecture image widget: ${e.message}", e)
            null
        }
    }

    // =====================
    // Privates
    // =====================

    private fun cacheKeyForURL(urlString: String): String {
        // Cl√© stable et ‚Äúsafe‚Äù pour syst√®me de fichiers
        return try {
            val uri = Uri.parse(urlString)
            val path = (uri.path ?: urlString).replace("/", "_")
            val queryHash = uri.query?.hashCode()?.toString()
            val base = if (!queryHash.isNullOrEmpty()) "${path}_$queryHash" else path

            // Nettoyage des caract√®res probl√©matiques + limite longueur
            val cleaned = base.replace(Regex("[^A-Za-z0-9._-]"), "_")
            if (cleaned.length <= 200) cleaned
            else cleaned.take(150) + "_" + cleaned.hashCode()
        } catch (_: Exception) {
            // Fallback ultra-robuste
            urlString.hashCode().toString()
        }
    }

    private fun loadImageFromDisk(cacheKey: String): Bitmap? {
        val file = File(cacheDirectory, "$cacheKey.jpg")
        if (!file.exists()) return null
        return try {
            BitmapFactory.decodeStream(FileInputStream(file))
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lecture disque: ${e.message}", e)
            null
        }
    }

    private fun saveImageToDisk(image: Bitmap, cacheKey: String) {
        val file = File(cacheDirectory, "$cacheKey.jpg")
        try {
            FileOutputStream(file).use { out ->
                image.compress(Bitmap.CompressFormat.JPEG, 80, out)
            }
            Log.d(TAG, "üñºÔ∏è Image sauv√©e sur disque")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur sauvegarde disque: ${e.message}", e)
        }
    }

    private fun humanReadableByteCount(bytes: Long): String {
        if (bytes < 1024) return "$bytes B"
        val unit = 1024.0
        val exp = (Math.log(bytes.toDouble()) / Math.log(unit)).toInt()
        val pre = "KMGTPE"[exp - 1]
        val df = DecimalFormat("#.#")
        return "${df.format(bytes / Math.pow(unit, exp.toDouble()))} ${pre}B"
    }

    data class CacheSize(
        val memorySize: String,
        val diskSize: String
    )
}
