import Foundation

/// Service de localisation pour g√©rer les traductions de l'application
class LocalizationService {
    static let shared = LocalizationService()
    
    // Variable statique pour √©viter les logs r√©p√©titifs
    private static var lastLoggedLanguage: String = ""
    
    private init() {}
    
    /// Obtient une cha√Æne localis√©e avec String Catalogs
    func localizedString(for key: String, tableName: String? = nil, comment: String = "") -> String {
        let tableName = tableName ?? "UI" // Par d√©faut, utiliser UI.xcstrings
        
        // Utiliser NSLocalizedString directement avec String Catalogs
        let translation = NSLocalizedString(key, tableName: tableName, comment: comment)
        return translation
    }
    
    /// Helper sp√©cifique pour les textes d'interface utilisateur (utilise UI.xcstrings)
    static func ui(_ key: String, comment: String = "") -> String {
        return NSLocalizedString(key, tableName: "UI", comment: comment)
    }
    
    /// Helper pour les cat√©gories (utilise Categories.xcstrings)
    static func category(_ key: String, comment: String = "") -> String {
        return NSLocalizedString(key, tableName: "Categories", comment: comment)
    }
    
    /// Obtient une cha√Æne localis√©e avec String Catalogs (m√©thode g√©n√©rique)
    func localizedString(for key: String, comment: String = "") -> String {
        return NSLocalizedString(key, comment: comment)
    }
    
    /// Change le symbole de devise selon la r√©gion du t√©l√©phone (garde le m√™me prix)
    /// ‚ö†Ô∏è DEPRECATED: Utilis√© uniquement comme fallback si StoreKit n'est pas disponible
    static func localizedCurrencySymbol(for priceString: String) -> String {
        // Utiliser la r√©gion syst√®me plut√¥t que la devise locale de l'App Store
        let regionCode = Locale.current.region?.identifier ?? "FR"
        let languageCode = Locale.current.language.languageCode?.identifier ?? "fr"
        
        // Extraire le prix num√©rique (ex: "4,99‚Ç¨" -> "4,99")
        let numericPrice = priceString.replacingOccurrences(of: "‚Ç¨", with: "")
        
        // D√©terminer la devise selon la r√©gion/langue
        let currencySymbol: String
        
        // Prioriser la langue d'interface si elle est anglaise
        if languageCode == "en" {
            switch regionCode {
            case "US":
                currencySymbol = "$"
            case "GB":
                currencySymbol = "¬£"
            case "CA":
                currencySymbol = "CAD$"
            case "AU":
                currencySymbol = "AUD$"
            default:
                currencySymbol = "$" // Par d√©faut dollar pour interface anglaise
            }
        } else {
            // Sinon utiliser la r√©gion
            switch regionCode {
            case "US", "PR", "VI", "GU", "AS", "MP":
                currencySymbol = "$"
            case "GB", "IM", "JE", "GG":
                currencySymbol = "¬£"
            case "CA":
                currencySymbol = "CAD$"
            case "CH", "LI":
                currencySymbol = "CHF"
            case "JP":
                currencySymbol = "¬•"
            case "AU":
                currencySymbol = "AUD$"
            default:
                currencySymbol = "‚Ç¨"
            }
        }
        
        // Formater selon le symbole
        if currencySymbol.contains("$") && !currencySymbol.contains("CAD") && !currencySymbol.contains("AUD") {
            return "$\(numericPrice)" // Dollar avant
        } else if currencySymbol == "¬£" {
            return "¬£\(numericPrice)" // Livre avant
        } else if currencySymbol == "¬•" {
            return "¬•\(numericPrice)" // Yen avant
        } else if currencySymbol.contains("CAD") || currencySymbol.contains("AUD") || currencySymbol.contains("CHF") {
            return "\(numericPrice) \(currencySymbol)" // Apr√®s pour CAD, AUD, CHF
        } else {
            return priceString // Garder ‚Ç¨ par d√©faut
        }
    }
    
    /// Divise un prix format√© par 2 pour calculer le prix par utilisateur
    /// Utilis√© par StoreKitPricingService pour maintenir la coh√©rence avec l'ancien syst√®me
    static func dividePrice(formattedPrice: String, by divisor: Double = 2.0) -> String {
        // Extraire le prix num√©rique du string format√©
        let cleanPrice = formattedPrice.replacingOccurrences(of: "[^0-9.,]", with: "", options: .regularExpression)
        
        if let price = Double(cleanPrice.replacingOccurrences(of: ",", with: ".")), price > 0 {
            let dividedPrice = price / divisor
            
            // R√©appliquer le format original
            let formatter = NumberFormatter()
            formatter.numberStyle = .currency
            formatter.currencyCode = getCurrencyCode(from: formattedPrice)
            formatter.locale = Locale.current
            
            return formatter.string(from: NSNumber(value: dividedPrice)) ?? formattedPrice
        }
        
        return formattedPrice
    }
    
    /// Extrait le code de devise d'un prix format√©
    private static func getCurrencyCode(from formattedPrice: String) -> String {
        if formattedPrice.contains("$") {
            return "USD"
        } else if formattedPrice.contains("¬£") {
            return "GBP"
        } else if formattedPrice.contains("‚Ç¨") {
            return "EUR"
        } else if formattedPrice.contains("¬•") {
            return "JPY"
        } else if formattedPrice.contains("CHF") {
            return "CHF"
        } else {
            return "EUR" // Par d√©faut
        }
    }
    
    /// Retourne le nom de l'image localis√©e selon la langue du t√©l√©phone
    static func localizedImageName(frenchImage: String, defaultImage: String) -> String {
        let languageCode = Locale.current.language.languageCode?.identifier ?? "en"
        
        // üîá Log r√©duit : seulement lors du premier appel ou changement de langue
        if lastLoggedLanguage != languageCode {
            print("üñºÔ∏è LocalizationService: Langue syst√®me d√©tect√©e: \(languageCode)")
            lastLoggedLanguage = languageCode
        }
        
        // Si la langue est fran√ßaise, utiliser l'image fran√ßaise
        if languageCode == "fr" {
            return frenchImage
        } else {
            // Pour toutes les autres langues (anglais, etc.), utiliser l'image par d√©faut
            return defaultImage
        }
    }

    /// Retourne le nom de l'image localis√©e avec support sp√©cifique pour l'allemand
    /// - Parameters:
    ///   - frenchImage: nom de l'image en fran√ßais
    ///   - defaultImage: nom de l'image par d√©faut (anglais et autres)
    ///   - germanImage: nom de l'image pour l'allemand
    /// - Returns: le nom d'image correspondant √† la langue syst√®me
    static func localizedImageName(frenchImage: String, defaultImage: String, germanImage: String) -> String {
        let languageCode = Locale.current.language.languageCode?.identifier ?? "en"

        if lastLoggedLanguage != languageCode {
            print("üñºÔ∏è LocalizationService: Langue syst√®me d√©tect√©e: \(languageCode)")
            lastLoggedLanguage = languageCode
        }

        switch languageCode {
        case "fr":
            return frenchImage
        case "de":
            return germanImage
        default:
            return defaultImage
        }
    }
}

// MARK: - Extension pour Question

extension Question {
    /// Version optimis√©e qui utilise le service de localisation
    var optimizedLocalizedText: String {
        // Avec le nouveau syst√®me String Catalogs, le texte est d√©j√† localis√©
        return text
    }
}

// MARK: - Extensions pour l'UI

extension String {
    /// Helper pour obtenir le texte localis√© depuis UI.xcstrings
    var localizedUI: String {
        return LocalizationService.ui(self)
    }
    
    /// Helper pour obtenir le texte localis√© depuis Categories.xcstrings  
    var localizedCategory: String {
        return LocalizationService.category(self)
    }
} 