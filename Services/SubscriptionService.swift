import Foundation
import StoreKit
import Combine
import FirebaseFirestore
import FirebaseAuth
import FirebaseAnalytics

class SubscriptionService: NSObject, ObservableObject, SKPaymentTransactionObserver {
    static let shared = SubscriptionService()
    
    @Published var products: [SKProduct] = []
    @Published var isSubscribed: Bool = false
    @Published var lastPurchasedProduct: SKProduct?
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    
    private let productIdentifiers: Set<String> = [
        "com.lyes.love2love.subscription.weekly",
        "com.lyes.love2love.subscription.monthly"
    ]
    
    private var cancellables = Set<AnyCancellable>()
    
    override init() {
        super.init()
        SKPaymentQueue.default().add(self)
        
        // Nettoyer les transactions en attente au d√©marrage pour √©viter les blocages
        clearPendingTransactions()
        
        // Charger les produits apr√®s un court d√©lai pour √©viter les conflits
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.loadProducts()
        }
        
        checkSubscriptionStatus()
    }
    
    deinit {
        SKPaymentQueue.default().remove(self)
    }
    
    func loadProducts() {
        print("üî• SubscriptionService: Chargement des produits...")
        
        let request = SKProductsRequest(productIdentifiers: productIdentifiers)
        request.delegate = self
        request.start()
        
        // Timeout de s√©curit√©
        DispatchQueue.main.asyncAfter(deadline: .now() + 30) { [weak self] in
            if self?.products.isEmpty == true {
                print("‚ö†Ô∏è SubscriptionService: Timeout - Aucune r√©ponse d'Apple apr√®s 30s")
                DispatchQueue.main.async {
                    self?.errorMessage = "Impossible de charger les offres d'abonnement. V√©rifiez votre connexion et r√©essayez."
                }
            }
        }
    }
    
    func purchase(product: SKProduct) {
        print("üî• SubscriptionService: Tentative d'achat: \(product.productIdentifier)")
        
        guard SKPaymentQueue.canMakePayments() else {
            print("‚ùå SubscriptionService: Achats non autoris√©s sur cet appareil")
            errorMessage = "Les achats ne sont pas autoris√©s sur cet appareil"
            return
        }
        
        isLoading = true
        let payment = SKPayment(product: product)
        SKPaymentQueue.default().add(payment)
    }
    
    func restorePurchases() {
        print("üî• SubscriptionService: Restauration des achats...")
        
        isLoading = true
        SKPaymentQueue.default().restoreCompletedTransactions()
    }
    
    /// Nettoyer les transactions en attente qui peuvent bloquer les achats
    private func clearPendingTransactions() {
        let pendingTransactions = SKPaymentQueue.default().transactions
        
        guard !pendingTransactions.isEmpty else { return }
        
        print("üîß SubscriptionService: Nettoyage de \(pendingTransactions.count) transaction(s) en attente")
        
        for transaction in pendingTransactions {
            switch transaction.transactionState {
            case .purchased, .restored, .failed:
                SKPaymentQueue.default().finishTransaction(transaction)
            case .purchasing:
                print("‚ö†Ô∏è SubscriptionService: Transaction en cours d'achat d√©tect√©e")
            case .deferred:
                print("‚ö†Ô∏è SubscriptionService: Transaction diff√©r√©e d√©tect√©e")
            @unknown default:
                break
            }
        }
        
        // R√©initialiser l'√©tat de chargement
        DispatchQueue.main.async {
            self.isLoading = false
            self.errorMessage = nil
        }
    }
    
    private func checkSubscriptionStatus() {
        // V√©rifier le statut d'abonnement depuis Firebase
        if let user = FirebaseService.shared.currentUser {
            isSubscribed = user.isSubscribed
        }
    }
    
    // MARK: - SKPaymentTransactionObserver
    
    func paymentQueue(_ queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {
        print("üî• SubscriptionService: Mise √† jour des transactions - \(transactions.count) transaction(s)")
        NSLog("üî• SubscriptionService: Mise √† jour des transactions - \(transactions.count) transaction(s)")
        
        for transaction in transactions {
            print("üî• SubscriptionService: Transaction \(transaction.transactionIdentifier ?? "unknown") - √âtat: \(transaction.transactionState.rawValue)")
            NSLog("üî• SubscriptionService: Transaction \(transaction.transactionIdentifier ?? "unknown") - √âtat: \(transaction.transactionState.rawValue)")
            
            switch transaction.transactionState {
            case .purchased:
                print("üî• SubscriptionService: Transaction PURCHASED")
                NSLog("üî• SubscriptionService: Transaction PURCHASED")
                handleSuccessfulPurchase(transaction)
            case .restored:
                print("üî• SubscriptionService: Transaction RESTORED")
                NSLog("üî• SubscriptionService: Transaction RESTORED")
                handleRestored(transaction)
            case .failed:
                print("üî• SubscriptionService: Transaction FAILED")
                NSLog("üî• SubscriptionService: Transaction FAILED")
                handleFailed(transaction)
            case .deferred:
                print("üî• SubscriptionService: Transaction DEFERRED")
                NSLog("üî• SubscriptionService: Transaction DEFERRED")
            case .purchasing:
                print("üî• SubscriptionService: Transaction PURCHASING - Sheet Apple devrait appara√Ætre")
                NSLog("üî• SubscriptionService: Transaction PURCHASING - Sheet Apple devrait appara√Ætre")
                // S'assurer que le loading reste actif pendant l'achat
                DispatchQueue.main.async {
                    self.isLoading = true
                }
                
                // Timeout de s√©curit√© pour √©viter le chargement infini
                DispatchQueue.main.asyncAfter(deadline: .now() + 60) { [weak self] in
                    // V√©rifier si la transaction est toujours en cours apr√®s 60s
                    if let currentTransaction = queue.transactions.first(where: { $0.transactionIdentifier == transaction.transactionIdentifier }),
                       currentTransaction.transactionState == .purchasing {
                        print("‚ö†Ô∏è SubscriptionService: Transaction bloqu√©e en √©tat purchasing depuis 60s")
                        NSLog("‚ö†Ô∏è SubscriptionService: Transaction bloqu√©e en √©tat purchasing depuis 60s")
                        DispatchQueue.main.async {
                            self?.isLoading = false
                            self?.errorMessage = "La transaction a pris trop de temps. Veuillez r√©essayer."
                        }
                    }
                }
            @unknown default:
                print("üî• SubscriptionService: Transaction √©tat inconnu: \(transaction.transactionState.rawValue)")
                NSLog("üî• SubscriptionService: Transaction √©tat inconnu: \(transaction.transactionState.rawValue)")
                break
            }
        }
    }
    
    private func handleSuccessfulPurchase(_ transaction: SKPaymentTransaction) {
        print("üî• SubscriptionService: ‚úÖ Achat r√©ussi: \(transaction.payment.productIdentifier)")
        NSLog("üî• SubscriptionService: ‚úÖ Achat r√©ussi: \(transaction.payment.productIdentifier)")
        
        // üìä Analytics: Abonnement r√©ussi avec le bon type
        let planType = transaction.payment.productIdentifier.contains("weekly") ? "weekly" : "monthly"
        Analytics.logEvent("abonnement_reussi", parameters: [
            "type": planType,
            "source": "storekit_success"
        ])
        print("üìä √âv√©nement Firebase: abonnement_reussi - type: \(planType) - source: storekit_success")
        
        isSubscribed = true
        isLoading = false
        
        // NOUVEAU: Marquer comme abonnement direct AVANT de mettre √† jour Firebase
        Task {
            await markSubscriptionAsDirect()
            
            // Mettre √† jour Firebase APR√àS avoir marqu√© l'abonnement comme direct
            await MainActor.run {
                FirebaseService.shared.updateSubscriptionStatus(isSubscribed: true)
            }
            
            // Le partage automatique sera g√©r√© par PartnerSubscriptionSyncService
            print("üî• SubscriptionService: Synchronisation automatique via PartnerSubscriptionSyncService")
        }
        
        SKPaymentQueue.default().finishTransaction(transaction)
        
        // Notifier le succ√®s
        NotificationCenter.default.post(
            name: NSNotification.Name("SubscriptionPurchased"),
            object: nil
        )
        
        print("üî• SubscriptionService: Achat finalis√© et partag√© avec partenaire")
        NSLog("üî• SubscriptionService: Achat finalis√© et partag√© avec partenaire")
    }
    
    private func handleRestored(_ transaction: SKPaymentTransaction) {
        print("üî• SubscriptionService: ‚úÖ Achat restaur√©: \(transaction.payment.productIdentifier)")
        NSLog("üî• SubscriptionService: ‚úÖ Achat restaur√©: \(transaction.payment.productIdentifier)")
        
        // üìä Analytics: Achat restaur√©
        Analytics.logEvent("achat_restaure", parameters: [:])
        print("üìä √âv√©nement Firebase: achat_restaure")
        
        isSubscribed = true
        isLoading = false
        
        // NOUVEAU: Marquer comme abonnement direct AVANT de mettre √† jour Firebase
        Task {
            await markSubscriptionAsDirect()
            
            // Mettre √† jour Firebase APR√àS avoir marqu√© l'abonnement comme direct
            await MainActor.run {
                FirebaseService.shared.updateSubscriptionStatus(isSubscribed: true)
            }
            
            // Le partage automatique sera g√©r√© par PartnerSubscriptionSyncService
            print("üî• SubscriptionService: Synchronisation automatique via PartnerSubscriptionSyncService")
        }
        
        SKPaymentQueue.default().finishTransaction(transaction)
        
        // Notifier la restauration r√©ussie
        NotificationCenter.default.post(
            name: NSNotification.Name("SubscriptionRestored"),
            object: nil
        )
        
        print("üî• SubscriptionService: Restauration finalis√©e et partag√©e avec partenaire")
        NSLog("üî• SubscriptionService: Restauration finalis√©e et partag√©e avec partenaire")
    }
    
    private func handleFailed(_ transaction: SKPaymentTransaction) {
        print("üî• SubscriptionService: ‚ùå Transaction √©chou√©e")
        NSLog("üî• SubscriptionService: ‚ùå Transaction √©chou√©e")
        
        isLoading = false
        
        if let error = transaction.error as? SKError {
            print("üî• SubscriptionService: Code d'erreur SKError: \(error.code.rawValue)")
            NSLog("üî• SubscriptionService: Code d'erreur SKError: \(error.code.rawValue)")
            
            if error.code != .paymentCancelled {
                print("üî• SubscriptionService: ‚ùå Erreur d'achat: \(error.localizedDescription)")
                NSLog("üî• SubscriptionService: ‚ùå Erreur d'achat: \(error.localizedDescription)")
                errorMessage = "Erreur d'achat: \(error.localizedDescription)"
            } else {
                print("üî• SubscriptionService: Achat annul√© par l'utilisateur")
                NSLog("üî• SubscriptionService: Achat annul√© par l'utilisateur")
            }
        } else if let error = transaction.error {
            print("üî• SubscriptionService: ‚ùå Erreur g√©n√©rale: \(error.localizedDescription)")
            NSLog("üî• SubscriptionService: ‚ùå Erreur g√©n√©rale: \(error.localizedDescription)")
        }
        
        SKPaymentQueue.default().finishTransaction(transaction)
        print("üî• SubscriptionService: Transaction √©chou√©e finalis√©e")
        NSLog("üî• SubscriptionService: Transaction √©chou√©e finalis√©e")
    }
    
    func paymentQueue(_ queue: SKPaymentQueue, restoreCompletedTransactionsFailedWithError error: Error) {
        print("üî• SubscriptionService: ‚ùå Erreur de restauration: \(error.localizedDescription)")
        NSLog("üî• SubscriptionService: ‚ùå Erreur de restauration: \(error.localizedDescription)")
        
        isLoading = false
        errorMessage = "Erreur de restauration: \(error.localizedDescription)"
    }
    
    func paymentQueueRestoreCompletedTransactionsFinished(_ queue: SKPaymentQueue) {
        print("üî• SubscriptionService: ‚úÖ Restauration termin√©e - \(queue.transactions.count) transaction(s)")
        NSLog("üî• SubscriptionService: ‚úÖ Restauration termin√©e - \(queue.transactions.count) transaction(s)")
        
        isLoading = false
        if queue.transactions.isEmpty {
            errorMessage = "Aucun achat √† restaurer trouv√©"
            print("üî• SubscriptionService: Aucun achat √† restaurer")
            NSLog("üî• SubscriptionService: Aucun achat √† restaurer")
        }
    }
    
    // MARK: - Gestion de la r√©siliation d'abonnement
    
    func handleSubscriptionExpired() async {
        guard let currentUser = Auth.auth().currentUser else {
            print("üî• SubscriptionService: Pas d'utilisateur connect√© pour r√©siliation")
            return
        }
        
        print("üî• SubscriptionService: Gestion r√©siliation abonnement pour: \(currentUser.uid)")
        
        // R√©voquer l'abonnement de l'utilisateur principal
        await revokeUserSubscription(userId: currentUser.uid)
        
        // Mettre √† jour l'√©tat local
        await MainActor.run {
            self.isSubscribed = false
        }
        
        // Mettre √† jour Firebase
        FirebaseService.shared.updateSubscriptionStatus(isSubscribed: false)
        
        // La synchronisation avec le partenaire sera automatiquement g√©r√©e par PartnerSubscriptionSyncService
        print("‚úÖ SubscriptionService: R√©siliation effectu√©e, synchronisation automatique en cours")
    }
    
    private func revokeUserSubscription(userId: String) async {
        do {
            try await Firestore.firestore()
                .collection("users")
                .document(userId)
                .updateData([
                    "isSubscribed": false,
                    "subscriptionExpiredAt": Timestamp(date: Date()),
                    "subscriptionType": FieldValue.delete()
                ])
            
            print("‚úÖ SubscriptionService: Abonnement r√©voqu√© pour utilisateur: \(userId)")
            
        } catch {
            print("‚ùå SubscriptionService: Erreur r√©vocation utilisateur: \(error)")
        }
    }
    
    // MARK: - V√©rification p√©riodique des abonnements
    
    func startSubscriptionStatusMonitoring() {
        // Timer pour v√©rifier l'√©tat des abonnements toutes les heures
        Timer.scheduledTimer(withTimeInterval: 3600, repeats: true) { _ in
            Task {
                await self.checkSubscriptionStatus()
            }
        }
        
        print("üî• SubscriptionService: Monitoring des abonnements d√©marr√©")
    }
    
    private func checkSubscriptionStatus() async {
        guard let currentUser = Auth.auth().currentUser else { return }
        
        print("üî• SubscriptionService: V√©rification statut abonnement...")
        
        // TODO: Ici vous devriez impl√©menter la v√©rification Apple Receipt
        // Pour l'instant, simulation bas√©e sur l'√©tat Firebase
        
        do {
            let userDoc = try await Firestore.firestore()
                .collection("users")
                .document(currentUser.uid)
                .getDocument()
            
            guard let userData = userDoc.data(),
                  let isSubscribed = userData["isSubscribed"] as? Bool else { return }
            
            // Si l'utilisateur √©tait abonn√© localement mais ne l'est plus dans Firebase
            if self.isSubscribed && !isSubscribed {
                print("üî• SubscriptionService: D√©tection de r√©siliation d'abonnement")
                await handleSubscriptionExpired()
            }
            
        } catch {
            print("‚ùå SubscriptionService: Erreur v√©rification statut: \(error)")
        }
    }
    
    private func markSubscriptionAsDirect() async {
        guard let currentUser = Auth.auth().currentUser else { return }
        
        do {
            try await Firestore.firestore()
                .collection("users")
                .document(currentUser.uid)
                .updateData([
                    "subscriptionType": "direct",
                    "subscriptionPurchasedAt": Timestamp(date: Date())
                ])
            
            print("‚úÖ SubscriptionService: Abonnement marqu√© comme direct")
            
        } catch {
            print("‚ùå SubscriptionService: Erreur marquage abonnement direct: \(error)")
        }
    }
}

// MARK: - SKProductsRequestDelegate

extension SubscriptionService: SKProductsRequestDelegate {
    func productsRequest(_ request: SKProductsRequest, didReceive response: SKProductsResponse) {
        print("üî• SubscriptionService: R√©ponse re√ßue - \(response.products.count) produits valides")
        
        if !response.invalidProductIdentifiers.isEmpty {
            print("‚ùå SubscriptionService: Identifiants invalides: \(response.invalidProductIdentifiers)")
        }
        
        DispatchQueue.main.async {
            self.products = response.products
            
            if self.products.isEmpty {
                print("‚ùå SubscriptionService: Aucun produit charg√©")
                self.errorMessage = "Aucun produit disponible. V√©rifiez votre connexion."
            }
        }
    }
    
    func request(_ request: SKRequest, didFailWithError error: Error) {
        print("‚ùå SubscriptionService: Erreur chargement produits: \(error.localizedDescription)")
        
        DispatchQueue.main.async {
            self.errorMessage = "Erreur lors du chargement des produits: \(error.localizedDescription)"
        }
    }
} 