// Fonction s√©curis√©e pour r√©cup√©rer des URLs sign√©es d'images
exports.getSignedImageURL = functions.https.onCall(async (data, context) => {
  console.log("üîß getSignedImageURL: D√©but g√©n√©ration URL sign√©e");

  // V√©rifier l'authentification
  if (!context.auth) {
    console.log("‚ùå getSignedImageURL: Utilisateur non authentifi√©");
    throw new functions.https.HttpsError(
      "unauthenticated",
      "Utilisateur non authentifi√©"
    );
  }

  const currentUserId = context.auth.uid;
  const { filePath } = data;

  console.log(`üîß getSignedImageURL: Utilisateur: ${currentUserId}`);
  console.log(`üîß getSignedImageURL: Chemin fichier: ${filePath}`);

  if (!filePath) {
    throw new functions.https.HttpsError(
      "invalid-argument",
      "Chemin de fichier requis"
    );
  }

  try {
    // V√©rifier que le chemin est autoris√© (seulement certains dossiers)
    const allowedPaths = ["journal_images/", "profile_images/"];
    const isAllowedPath = allowedPaths.some((path) =>
      filePath.startsWith(path)
    );

    if (!isAllowedPath) {
      console.log(`‚ùå getSignedImageURL: Chemin non autoris√©: ${filePath}`);
      throw new functions.https.HttpsError(
        "permission-denied",
        "Chemin de fichier non autoris√©"
      );
    }

    // Extraire l'ID utilisateur du chemin
    const pathParts = filePath.split("/");
    if (pathParts.length < 2) {
      throw new functions.https.HttpsError(
        "invalid-argument",
        "Format de chemin invalide"
      );
    }

    const fileOwnerId = pathParts[1];

    // V√©rifier les permissions d'acc√®s
    let hasAccess = false;

    if (currentUserId === fileOwnerId) {
      // Propri√©taire du fichier
      hasAccess = true;
      console.log("‚úÖ getSignedImageURL: Acc√®s autoris√© - Propri√©taire");
    } else {
      // V√©rifier si c'est un partenaire connect√©
      const currentUserDoc = await admin
        .firestore()
        .collection("users")
        .doc(currentUserId)
        .get();

      const fileOwnerDoc = await admin
        .firestore()
        .collection("users")
        .doc(fileOwnerId)
        .get();

      if (currentUserDoc.exists && fileOwnerDoc.exists) {
        const currentUserData = currentUserDoc.data();
        const fileOwnerData = fileOwnerDoc.data();

        // V√©rification bidirectionnelle des partenaires (multiple champs)
        const isPartnerViaPartnerId =
          currentUserData.partnerId === fileOwnerId &&
          fileOwnerData.partnerId === currentUserId;

        const isPartnerViaConnectedPartnerId =
          currentUserData.connectedPartnerId === fileOwnerId &&
          fileOwnerData.connectedPartnerId === currentUserId;

        if (isPartnerViaPartnerId || isPartnerViaConnectedPartnerId) {
          hasAccess = true;
          console.log(
            "‚úÖ getSignedImageURL: Acc√®s autoris√© - Partenaire connect√©"
          );
        }
      }
    }

    if (!hasAccess) {
      console.log("‚ùå getSignedImageURL: Acc√®s refus√©");
      throw new functions.https.HttpsError(
        "permission-denied",
        "Acc√®s non autoris√© √† ce fichier"
      );
    }

    // G√©n√©rer l'URL sign√©e avec expiration courte (15 minutes)
    const bucket = admin.storage().bucket();
    const file = bucket.file(filePath);

    // V√©rifier que le fichier existe
    const [exists] = await file.exists();
    if (!exists) {
      console.log(`‚ùå getSignedImageURL: Fichier inexistant: ${filePath}`);
      throw new functions.https.HttpsError("not-found", "Fichier non trouv√©");
    }

    const [signedUrl] = await file.getSignedUrl({
      action: "read",
      expires: Date.now() + 15 * 60 * 1000, // 15 minutes
    });

    console.log("‚úÖ getSignedImageURL: URL sign√©e g√©n√©r√©e avec succ√®s");
    return { signedUrl };
  } catch (error) {
    console.log(`‚ùå getSignedImageURL: Erreur: ${error.message}`);

    if (error instanceof functions.https.HttpsError) {
      throw error;
    }

    throw new functions.https.HttpsError(
      "internal",
      "Erreur lors de la g√©n√©ration de l'URL sign√©e"
    );
  }
});
