import Foundation
import SwiftUI
import Combine

class FreemiumManager: ObservableObject {
    @Published var showingSubscription = false {
        didSet {
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM MANAGER: showingSubscription changÃ© vers \(showingSubscription)")
            // Envoyer une notification pour synchroniser avec MainView
            NotificationCenter.default.post(name: .freemiumManagerChanged, object: nil)
        }
    }
    @Published var blockedCategoryAttempt: QuestionCategory?
    
    private weak var appState: AppState?
    private var cancellables = Set<AnyCancellable>()
    
    init(appState: AppState) {
        self.appState = appState
        setupObservers()
    }
    
    private func setupObservers() {
        // Observer les changements d'abonnement
        appState?.$currentUser
            .sink { [weak self] user in
                // RÃ©agir aux changements d'abonnement si nÃ©cessaire
                print("ðŸ”¥ FreemiumManager: Utilisateur changÃ© - isSubscribed: \(user?.isSubscribed ?? false)")
            }
            .store(in: &cancellables)
    }
    
    // MARK: - Public Methods
    
    /// VÃ©rifie si l'utilisateur peut accÃ©der Ã  une catÃ©gorie
    func canAccessCategory(_ category: QuestionCategory) -> Bool {
        // Les catÃ©gories gratuites sont toujours accessibles
        if !category.isPremium {
            return true
        }
        
        // Les catÃ©gories premium nÃ©cessitent un abonnement
        return appState?.currentUser?.isSubscribed ?? false
    }
    
    /// GÃ¨re le tap sur une catÃ©gorie avec la logique freemium
    func handleCategoryTap(_ category: QuestionCategory, onSuccess: @escaping () -> Void) {
        print("ðŸ”¥ FreemiumManager: Tap sur catÃ©gorie: \(category.title)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: DEBUT GESTION TAP")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: - CatÃ©gorie: \(category.title)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: - isPremium: \(category.isPremium)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: - showingSubscription AVANT: \(showingSubscription)")
        
        if canAccessCategory(category) {
            print("ðŸ”¥ FreemiumManager: AccÃ¨s autorisÃ© Ã  \(category.title)")
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: ACCES AUTORISE - EXECUTION CALLBACK")
            onSuccess()
        } else {
            print("ðŸ”¥ FreemiumManager: AccÃ¨s bloquÃ© Ã  \(category.title) - affichage subscription")
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: ACCES BLOQUE - PREPARATION AFFICHAGE")
            
            blockedCategoryAttempt = category
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: - blockedCategoryAttempt dÃ©fini: \(category.title)")
            
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: - MISE A JOUR showingSubscription vers TRUE")
            showingSubscription = true
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: - showingSubscription APRES: \(showingSubscription)")
            
            // Notifier le changement
            NotificationCenter.default.post(name: .freemiumManagerChanged, object: nil)
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: - NOTIFICATION ENVOYEE")
            
            // VÃ©rification immÃ©diate
            DispatchQueue.main.async {
                print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: VERIFICATION ASYNC - showingSubscription: \(self.showingSubscription)")
            }
            
            // Analytics - track blocked category
            trackCategoryBlocked(category)
            
            print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM TAP: FIN GESTION TAP BLOQUE")
        }
    }
    
    /// Retourne les catÃ©gories accessibles selon le statut d'abonnement
    func getAccessibleCategories() -> [QuestionCategory] {
        let isSubscribed = appState?.currentUser?.isSubscribed ?? false
        
        if isSubscribed {
            print("ðŸ”¥ FreemiumManager: Utilisateur premium - toutes catÃ©gories accessibles")
            return QuestionCategory.categories
        } else {
            print("ðŸ”¥ FreemiumManager: Utilisateur gratuit - catÃ©gories limitÃ©es")
            // Pour les utilisateurs gratuits, seule la premiÃ¨re catÃ©gorie gratuite est accessible
            let freeCategories = QuestionCategory.categories.filter { !$0.isPremium }
            return Array(freeCategories.prefix(1)) // Seulement la premiÃ¨re catÃ©gorie gratuite
        }
    }
    
    /// Retourne toutes les catÃ©gories avec leur statut de blocage
    func getAllCategoriesWithStatus() -> [QuestionCategory] {
        return QuestionCategory.categories
    }
    
    /// VÃ©rifie si une catÃ©gorie doit Ãªtre affichÃ©e comme bloquÃ©e
    func isCategoryBlocked(_ category: QuestionCategory) -> Bool {
        let isSubscribed = appState?.currentUser?.isSubscribed ?? false
        let isBlocked = category.isPremium && !isSubscribed
        
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM BLOCKED CHECK: CatÃ©gorie: \(category.title)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM BLOCKED CHECK: - isPremium: \(category.isPremium)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM BLOCKED CHECK: - isSubscribed: \(isSubscribed)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM BLOCKED CHECK: - isBlocked: \(isBlocked)")
        
        return isBlocked
    }
    
    /// Ferme la vue de subscription
    func dismissSubscription() {
        print("ðŸ”¥ FreemiumManager: Fermeture de la vue subscription")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM DISMISS: DEBUT FERMETURE")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM DISMISS: - showingSubscription AVANT: \(showingSubscription)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM DISMISS: - blockedCategoryAttempt AVANT: \(blockedCategoryAttempt?.title ?? "nil")")
        
        showingSubscription = false
        blockedCategoryAttempt = nil
        
        // Notifier le changement
        NotificationCenter.default.post(name: .freemiumManagerChanged, object: nil)
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM DISMISS: - NOTIFICATION ENVOYEE")
        
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM DISMISS: - showingSubscription APRES: \(showingSubscription)")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM DISMISS: - blockedCategoryAttempt APRES: \(blockedCategoryAttempt?.title ?? "nil")")
        print("ðŸ”¥ðŸ”¥ðŸ”¥ FREEMIUM DISMISS: FIN FERMETURE")
    }
    
    // MARK: - Analytics (pour le futur)
    
    private func trackCategoryBlocked(_ category: QuestionCategory) {
        print("ðŸ”¥ FreemiumManager: Analytics - CatÃ©gorie bloquÃ©e: \(category.title)")
        // Ici vous pourrez ajouter Firebase Analytics, Mixpanel, etc.
        // Analytics.track("category_blocked", properties: ["category": category.title])
    }
    
    func trackUpgradePromptShown() {
        print("ðŸ”¥ FreemiumManager: Analytics - Prompt d'upgrade affichÃ©")
        // Analytics.track("upgrade_prompt_shown")
    }
    
    func trackConversion() {
        print("ðŸ”¥ FreemiumManager: Analytics - Conversion rÃ©ussie")
        // Analytics.track("freemium_conversion")
    }
}

// MARK: - Extensions pour le futur

extension FreemiumManager {
    /// FonctionnalitÃ©s futures - limitation quotidienne
    var dailyQuestionsRemaining: Int {
        // Pour l'instant, pas de limitation
        return 999
    }
    
    /// FonctionnalitÃ©s futures - systÃ¨me de crÃ©dits
    var credits: Int {
        // Pour l'instant, pas de systÃ¨me de crÃ©dits
        return 0
    }
    
    /// FonctionnalitÃ©s futures - accÃ¨s temporaire
    func hasTemporaryAccess(to category: QuestionCategory) -> Bool {
        // Pour l'instant, pas d'accÃ¨s temporaire
        return false
    }
} 