import Foundation
import Combine
import UIKit
import FirebaseAnalytics

class OnboardingViewModel: ObservableObject {
    enum OnboardingStep: CaseIterable {
        case relationshipGoals
        case relationshipDate
        case relationshipImprovement
        case authentication
        case displayName
        case profilePhoto
        case completion
        case loading
        case partnerCode
        case fitnessIntro
        case fitnessIntro2
        case dailyQuestionNotification
        case categoriesPreview
        case subscription
    }
    
    @Published var currentStep: OnboardingStep = .relationshipGoals
    @Published var userName: String = ""
    @Published var birthDate: Date = Date()
    @Published var selectedGoals: [String] = []
    @Published var relationshipDuration: AppUser.RelationshipDuration = .oneToThreeYears
    @Published var relationshipImprovement: String = ""
    @Published var selectedImprovements: [String] = []
    @Published var questionMode: String = "üîÑ Questions vari√©es"
    @Published var isLoading: Bool = false
    @Published var shouldSkipSubscription: Bool = false
    @Published var shouldShowPartnerConnectionSuccess = false
    @Published var connectedPartnerName: String = ""
    @Published var relationshipStartDate: Date?
    @Published var profileImage: UIImage?
    @Published var currentLocation: UserLocation?
    
    var appState: AppState?
    private var cancellables = Set<AnyCancellable>()
    private var isCompletingSubscription = false
    
    // Options pour les objectifs de relation
    var relationshipGoals: [String] {
        [
            "goal_create_connection".localized,
            "goal_talk_avoided_subjects".localized,
            "goal_increase_passion".localized,
            "goal_share_more_laughs".localized,
            "goal_find_complicity".localized
        ]
    }

    // Options pour l'am√©lioration de la relation
    var relationshipImprovements: [String] {
        [
            "improvement_create_strong_moment".localized,
            "improvement_revive_connection".localized,
            "improvement_break_routine".localized,
            "improvement_say_unsaid".localized
        ]
    }
    
    // Options pour le mode de questions
    let questionModes = [
        "üéØ S√©rieux",
        "üéâ Fun",
        "üå∂Ô∏è Hot et Sensuel",
        "üí´ Profond"
    ]
    
    // Propri√©t√© calcul√©e pour la barre de progression
    var progressValue: Double {
        let totalSteps = Double(OnboardingStep.allCases.count)
        let currentIndex = Double(OnboardingStep.allCases.firstIndex(of: currentStep) ?? 0)
        return (currentIndex + 1) / totalSteps
    }
    
    init(appState: AppState) {
        print("üî• OnboardingViewModel: Initialisation avec AppState")
        self.appState = appState
        
        // Observer les changements d'abonnement
        NotificationCenter.default.addObserver(
            forName: .subscriptionUpdated,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            self?.handleSubscriptionUpdate()
        }
        
        // NOUVEAU: Observer les connexions partenaire r√©ussies
        NotificationCenter.default.addObserver(
            forName: .partnerConnectionSuccess,
            object: nil,
            queue: .main
        ) { [weak self] notification in
            if let userInfo = notification.userInfo,
               let partnerName = userInfo["partnerName"] as? String {
                self?.showPartnerConnectionSuccess(partnerName: partnerName)
            }
        }
    }
    
    init() {
        print("üî• OnboardingViewModel: Initialisation sans AppState")
        self.appState = nil
    }
    
    func updateAppState(_ newAppState: AppState) {
        print("üî• OnboardingViewModel: Mise √† jour AppState")
        self.appState = newAppState
    }
    
    func nextStep() {
        let stepNumber = OnboardingStep.allCases.firstIndex(of: currentStep) ?? 0
        
        // üìä Analytics: Progression onboarding
        Analytics.logEvent("onboarding_etape", parameters: ["etape": stepNumber])
        print("üìä √âv√©nement Firebase: onboarding_etape - √©tape: \(stepNumber)")
        
        switch currentStep {
        case .relationshipGoals:
            currentStep = .relationshipDate
        case .relationshipDate:
            currentStep = .relationshipImprovement
        case .relationshipImprovement:
            currentStep = .authentication
        case .authentication:
            currentStep = .displayName
        case .displayName:
            // Toujours permettre de passer √† profilePhoto, m√™me avec nom vide (auto-g√©n√©ration)
            print("üî• OnboardingViewModel: displayName -> profilePhoto (nom: '\(userName)')")
            currentStep = .profilePhoto
        case .profilePhoto:
            currentStep = .completion
        case .completion:
            currentStep = .loading
            completeDataCollection()
        case .loading:
            if shouldSkipSubscription {
                finalizeOnboarding(withSubscription: true)
            } else {
                currentStep = .partnerCode
            }
        case .partnerCode:
            currentStep = .categoriesPreview
        case .categoriesPreview:
            currentStep = .fitnessIntro
        case .fitnessIntro:
            currentStep = .fitnessIntro2
        case .fitnessIntro2:
            currentStep = .dailyQuestionNotification
        case .dailyQuestionNotification:
            currentStep = .subscription
        case .subscription:
            // L'onboarding doit √™tre finalis√© via skipSubscription() ou completeSubscription()
            break
        }
    }
    
    func previousStep() {
        print("üî• OnboardingViewModel: Retour √† l'√©tape pr√©c√©dente depuis \(currentStep)")
        switch currentStep {
        case .relationshipGoals:
            print("üî• OnboardingViewModel: D√©j√† √† la premi√®re √©tape")
            break
        case .relationshipDate:
            currentStep = .relationshipGoals
        case .relationshipImprovement:
            currentStep = .relationshipDate
        case .authentication:
            currentStep = .relationshipImprovement
        case .displayName:
            currentStep = .authentication
        case .profilePhoto:
            // Retour conditionnel : si on a un nom Apple, retourner √† auth, sinon √† displayName
            if let appleDisplayName = AuthenticationService.shared.appleUserDisplayName, !appleDisplayName.isEmpty {
                currentStep = .authentication
            } else {
                currentStep = .displayName
            }
        case .completion:
            currentStep = .profilePhoto
        case .loading:
            currentStep = .completion
        case .partnerCode:
            currentStep = .loading
        case .categoriesPreview:
            currentStep = .partnerCode
        case .fitnessIntro:
            currentStep = .categoriesPreview
        case .fitnessIntro2:
            currentStep = .fitnessIntro
        case .dailyQuestionNotification:
            currentStep = .fitnessIntro2
        case .subscription:
            print("üî• OnboardingViewModel: Impossible de revenir en arri√®re depuis l'abonnement")
            break
        }
        print("üî• OnboardingViewModel: Nouvelle √©tape: \(currentStep)")
    }
    
    func toggleGoal(_ goal: String) {
        if selectedGoals.contains(goal) {
            selectedGoals.removeAll { $0 == goal }
        } else {
            selectedGoals.append(goal)
        }
    }
    
    private func completeDataCollection() {
        print("üî• OnboardingViewModel: D√©but de la finalisation de la collecte de donn√©es")
        isLoading = true
        
        // Simuler un traitement
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            print("üî• OnboardingViewModel: Fin du chargement simul√©")
            self.isLoading = false
            self.currentStep = .partnerCode
        }
    }
    
    func completeAuthentication() {
        print("üî• OnboardingViewModel: Authentification termin√©e")
        print("üî• OnboardingViewModel: Attente du traitement Apple Name...")
        
        // NOUVEAU: Attendre que AuthenticationService ait fini de traiter appleUserDisplayName
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.checkAppleNameAndProceed()
        }
    }
    
    private func checkAppleNameAndProceed() {
        print("üî• OnboardingViewModel: V√©rification nom Apple...")
        
        let appleDisplayName = AuthenticationService.shared.appleUserDisplayName
        print("üî• OnboardingViewModel: appleUserDisplayName = '\(appleDisplayName ?? "nil")'")
        print("üî• OnboardingViewModel: isEmpty = \(appleDisplayName?.isEmpty ?? true)")
        
        // V√©rifier si Apple a fourni un nom d'affichage
        if let appleDisplayName = appleDisplayName, !appleDisplayName.isEmpty {
            print("üî• OnboardingViewModel: ‚úÖ Nom Apple fourni (\(appleDisplayName)) - Skip DisplayNameStepView")
            // Utiliser le nom fourni par Apple
            self.userName = appleDisplayName
            print("üî• OnboardingViewModel: userName d√©fini √†: '\(self.userName)'")
            // Passer directement √† la photo de profil
            print("üî• OnboardingViewModel: Navigation vers .profilePhoto")
            self.currentStep = .profilePhoto
        } else {
            print("üî• OnboardingViewModel: ‚ùå Aucun nom Apple fourni - Afficher DisplayNameStepView")
            // Pas de nom fourni, demander un pseudonyme
            print("üî• OnboardingViewModel: Navigation vers .displayName")
            self.currentStep = .displayName
        }
    }
    
    func skipSubscription() {
        print("üî• OnboardingViewModel: Abonnement ignor√©, finalisation")
        print("‚è≠Ô∏è Onboarding sans abonnement")
        finalizeOnboarding(withSubscription: false)
    }
    
    func completeSubscription() {
        // Protection contre les doubles appels
        guard !isCompletingSubscription else {
            print("üî• OnboardingViewModel: ‚ö†Ô∏è Appel ignor√© - Finalisation d√©j√† en cours")
            return
        }
        
        isCompletingSubscription = true
        print("üî• OnboardingViewModel: Abonnement termin√©, finalisation")
        print("‚úÖ Onboarding avec abonnement")
        finalizeOnboarding(withSubscription: true)
    }
    
    func finalizeOnboarding(withSubscription isSubscribed: Bool = false) {
        print("üî• OnboardingViewModel: Finalisation compl√®te de l'onboarding")
        print("üéØ Finalisation onboarding")
        
        // NOUVEAU: D√©sactiver l'overlay de connexion partenaire de l'onboarding
        // car MainView va prendre le relais
        if shouldShowPartnerConnectionSuccess {
            print("üî• OnboardingViewModel: D√©sactivation overlay connexion partenaire (MainView prend le relais)")
            shouldShowPartnerConnectionSuccess = false
        }
        
        #if DEBUG
        print("üî• OnboardingViewModel: Cr√©ation de l'utilisateur avec:")
        print("  - Nom: \(userName)")
        print("  - Objectifs: \(selectedGoals)")
        print("  - Dur√©e de relation: \(relationshipDuration)")
        print("  - Am√©lioration souhait√©e: \(selectedImprovements)")
        print("  - Mode de questions: \(questionMode)")
        print("  - Abonn√©: \(isSubscribed)")
        #else
        print("üî• OnboardingViewModel: Cr√©ation de l'utilisateur termin√©e")
        #endif
        
        print("üë§ Cr√©ation utilisateur final")
        
        // Convertir le tableau d'am√©liorations en string pour Firebase
        let improvementString = selectedImprovements.joined(separator: ", ")
        
        // üîß CORRECTION: Pr√©server les donn√©es de connexion partenaire existantes
        FirebaseService.shared.finalizeOnboardingWithPartnerData(
            name: userName,
            relationshipGoals: selectedGoals,
            relationshipDuration: relationshipDuration,
            relationshipImprovement: improvementString.isEmpty ? nil : improvementString,
            questionMode: questionMode.isEmpty ? nil : questionMode,
            isSubscribed: isSubscribed,
            relationshipStartDate: relationshipStartDate,
            profileImage: profileImage,
            currentLocation: currentLocation
        ) { [weak self] success, user in
            DispatchQueue.main.async {
                guard let self = self else { return }
                
                if success, let user = user {
                    print("‚úÖ OnboardingViewModel: Finalisation r√©ussie avec pr√©servation donn√©es partenaire")
                            print("‚úÖ Utilisateur cr√©√© avec succ√®s")
                    
                    guard let appState = self.appState else {
                        print("‚ùå OnboardingViewModel: AppState manquant!")
                        NSLog("‚ùå‚ùå‚ùå ONBOARDING: APPSTATE MANQUANT!")
                        return
                    }
                    
                    print("üî• OnboardingViewModel: Mise √† jour de l'utilisateur via AppState")
                            print("üì± Mise √† jour interface")
                    
                    // üìä Analytics: Onboarding termin√©
                    Analytics.logEvent("onboarding_complete", parameters: [:])
                    print("üìä √âv√©nement Firebase: onboarding_complete")
                    
                    // NOUVEAU: Marquer la fin du processus d'onboarding dans Firebase et AppState
                    FirebaseService.shared.completeOnboardingProcess()
                    appState.isOnboardingInProgress = false
                    // R√©initialisation des flags d'onboarding
                    
                    appState.updateUser(user)
                    appState.completeOnboarding()
                    print("üî• OnboardingViewModel: Onboarding termin√©")
                            print("üéâ Onboarding termin√© avec succ√®s")
                } else {
                    print("‚ùå OnboardingViewModel: Erreur lors de la finalisation")
                    NSLog("‚ùå‚ùå‚ùå ONBOARDING: ERREUR FINALISATION!")
                }
                
                // Reset du flag de protection
                self.isCompletingSubscription = false
            }
        }
    }
    
    // DEPRECATED: Ces m√©thodes ne sont plus utilis√©es avec le nouveau flux
    func completeOnboardingAfterSubscription() {
        print("‚ö†Ô∏è OnboardingViewModel: DEPRECATED - completeOnboardingAfterSubscription appel√©e")
        completeAuthentication()
    }
    
    // NOUVEAU: M√©thode pour passer l'abonnement suite √† un h√©ritage
    func skipSubscriptionDueToInheritance() {
        print("üî• OnboardingViewModel: Abonnement h√©rit√© du partenaire premium - skip subscription")
        shouldSkipSubscription = true
    }
    
    // NOUVEAU: M√©thode pour r√©initialiser le flag de skip si n√©cessaire
    func resetSubscriptionSkip() {
        print("üî• OnboardingViewModel: Reset flag skip subscription")
        shouldSkipSubscription = false
    }
    
    func handleSubscriptionUpdate() {
        print("üî• OnboardingViewModel: Mise √† jour d'abonnement d√©tect√©e")
        // G√©rer les mises √† jour d'abonnement si n√©cessaire
    }
    
    func showPartnerConnectionSuccess(partnerName: String) {
        print("üéâ OnboardingViewModel: Affichage message connexion pour: \(partnerName)")
        connectedPartnerName = partnerName
        shouldShowPartnerConnectionSuccess = true
    }
    
    func dismissPartnerConnectionSuccess() {
        print("üéâ OnboardingViewModel: Fermeture message connexion")
        shouldShowPartnerConnectionSuccess = false
        connectedPartnerName = ""
    }
}
